<?xml version="1.0" ?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.1/graphml.xsd"><key id="reference" for="node" attr.name="reference" attr.type="string"></key><key id="identifier" for="node" attr.name="identifier" attr.type="string"></key><key id="modifier" for="node" attr.name="modifier" attr.type="string"></key><key id="text" for="node" attr.name="text" attr.type="string"></key><key id="type" for="node" attr.name="type" attr.type="string"></key><key id="parentType" for="node" attr.name="parentType" attr.type="string"></key><key id="type" for="edge" attr.name="type" attr.type="string"></key><graph id="G" edgedefault="directed"><node id="1462"><data key="reference">otherMethodCall</data><data key="identifier">_getMethod</data><data key="text">_getMethod</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1461"><data key="reference"></data><data key="text">_getMethod(targetClass, methodName, params)</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1460"><data key="reference">java.lang.reflect.Method</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1459"><data key="reference">nonQualifiedClassName</data><data key="identifier">Method</data><data key="text">Method</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1458"><data key="reference"></data><data key="text">Method</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1457"><data key="reference"></data><data key="text">method = _getMethod(targetClass, methodName, params)</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1456"><data key="reference"></data><data key="modifier"></data><data key="text">Method method = _getMethod(targetClass, methodName, params)</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1455"><data key="reference"></data><data key="text">{
    Method method = _getMethod(targetClass, methodName, params);
    if (method == null) {
        throw new ReflectorException("Method: \'" + methodName + "\' not found in class: \'" + targetClass + "\'");
    }
    return method;
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="1454"><data key="reference">nonQualifiedClassName</data><data key="identifier">Method</data><data key="text">Method</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1453"><data key="reference"></data><data key="text">Method</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="1452"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1473"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="1472"><data key="reference"></data><data key="text">new ReflectorException("Method: \'" + methodName + "\' not found in class: \'" + targetClass + "\'")</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="1471"><data key="reference"></data><data key="text">throw new ReflectorException("Method: \'" + methodName + "\' not found in class: \'" + targetClass + "\'");</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="1470"><data key="reference"></data><data key="text">{
    throw new ReflectorException("Method: \'" + methodName + "\' not found in class: \'" + targetClass + "\'");
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1"><data key="reference"></data><data key="text">package org.codehaus.plexus.util.reflection;

import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;

/**
 * Utility class used to instantiate an object using reflection. This utility hides many of the gory details needed to
 * do this.
 *
 * @author John Casey
 */
public final class Reflector {

    private static final String CONSTRUCTOR_METHOD_NAME = "$$CONSTRUCTOR$$";

    private static final String GET_INSTANCE_METHOD_NAME = "getInstance";

    private Map&lt;String, Map&lt;String, Map&lt;String, Method&gt;&gt;&gt; classMaps = new HashMap&lt;String, Map&lt;String, Map&lt;String, Method&gt;&gt;&gt;();

    /**
     * Ensure no instances of Reflector are created...this is a utility.
     */
    public Reflector() {
    }

    /**
     * Create a new instance of a class, given the array of parameters... Uses constructor caching to find a constructor
     * that matches the parameter types, either specifically (first choice) or abstractly...
     *
     * @param theClass The class to instantiate
     * @param params The parameters to pass to the constructor
     * @return The instantiated object
     * @throws ReflectorException In case anything goes wrong here...
     */
    @SuppressWarnings({ "UnusedDeclaration" })
    public &lt;T&gt; T newInstance(Class&lt;T&gt; theClass, Object[] params) throws ReflectorException {
        if (params == null) {
            params = new Object[0];
        }
        Class[] paramTypes = new Class[params.length];
        for (int i = 0, len = params.length; i &lt; len; i++) {
            paramTypes[i] = params[i].getClass();
        }
        try {
            Constructor&lt;T&gt; con = getConstructor(theClass, paramTypes);
            if (con == null) {
                StringBuilder buffer = new StringBuilder();
                buffer.append("Constructor not found for class: ");
                buffer.append(theClass.getName());
                buffer.append(" with specified or ancestor parameter classes: ");
                for (Class paramType : paramTypes) {
                    buffer.append(paramType.getName());
                    buffer.append(',');
                }
                buffer.setLength(buffer.length() - 1);
                throw new ReflectorException(buffer.toString());
            }
            return con.newInstance(params);
        } catch (InstantiationException ex) {
            throw new ReflectorException(ex);
        } catch (InvocationTargetException ex) {
            throw new ReflectorException(ex);
        } catch (IllegalAccessException ex) {
            throw new ReflectorException(ex);
        }
    }

    /**
     * Retrieve the singleton instance of a class, given the array of parameters... Uses constructor caching to find a
     * constructor that matches the parameter types, either specifically (first choice) or abstractly...
     *
     * @param theClass The class to retrieve the singleton of
     * @param initParams The parameters to pass to the constructor
     * @return The singleton object
     * @throws ReflectorException In case anything goes wrong here...
     */
    @SuppressWarnings({ "UnusedDeclaration" })
    public &lt;T&gt; T getSingleton(Class&lt;T&gt; theClass, Object[] initParams) throws ReflectorException {
        Class[] paramTypes = new Class[initParams.length];
        for (int i = 0, len = initParams.length; i &lt; len; i++) {
            paramTypes[i] = initParams[i].getClass();
        }
        try {
            Method method = getMethod(theClass, GET_INSTANCE_METHOD_NAME, paramTypes);
            // noinspection unchecked
            return (T) method.invoke(null, initParams);
        } catch (InvocationTargetException ex) {
            throw new ReflectorException(ex);
        } catch (IllegalAccessException ex) {
            throw new ReflectorException(ex);
        }
    }

    /**
     * Invoke the specified method on the specified target with the specified params...
     *
     * @param target The target of the invocation
     * @param methodName The method name to invoke
     * @param params The parameters to pass to the method invocation
     * @return The result of the method call
     * @throws ReflectorException In case of an error looking up or invoking the method.
     */
    @SuppressWarnings({ "UnusedDeclaration" })
    public Object invoke(Object target, String methodName, Object[] params) throws ReflectorException {
        if (params == null) {
            params = new Object[0];
        }
        Class[] paramTypes = new Class[params.length];
        for (int i = 0, len = params.length; i &lt; len; i++) {
            paramTypes[i] = params[i].getClass();
        }
        try {
            Method method = getMethod(target.getClass(), methodName, paramTypes);
            if (method == null) {
                StringBuilder buffer = new StringBuilder();
                buffer.append("Singleton-producing method named '").append(methodName).append("' not found with specified parameter classes: ");
                for (Class paramType : paramTypes) {
                    buffer.append(paramType.getName());
                    buffer.append(',');
                }
                buffer.setLength(buffer.length() - 1);
                throw new ReflectorException(buffer.toString());
            }
            return method.invoke(target, params);
        } catch (InvocationTargetException ex) {
            throw new ReflectorException(ex);
        } catch (IllegalAccessException ex) {
            throw new ReflectorException(ex);
        }
    }

    @SuppressWarnings({ "UnusedDeclaration" })
    public Object getStaticField(Class targetClass, String fieldName) throws ReflectorException {
        try {
            Field field = targetClass.getField(fieldName);
            return field.get(null);
        } catch (SecurityException e) {
            throw new ReflectorException(e);
        } catch (NoSuchFieldException e) {
            throw new ReflectorException(e);
        } catch (IllegalArgumentException e) {
            throw new ReflectorException(e);
        } catch (IllegalAccessException e) {
            throw new ReflectorException(e);
        }
    }

    @SuppressWarnings({ "UnusedDeclaration" })
    public Object getField(Object target, String fieldName) throws ReflectorException {
        return getField(target, fieldName, false);
    }

    public Object getField(Object target, String fieldName, boolean breakAccessibility) throws ReflectorException {
        Class targetClass = target.getClass();
        while (targetClass != null) {
            try {
                Field field = targetClass.getDeclaredField(fieldName);
                boolean accessibilityBroken = false;
                if (!field.isAccessible() &amp;&amp; breakAccessibility) {
                    field.setAccessible(true);
                    accessibilityBroken = true;
                }
                Object result = field.get(target);
                if (accessibilityBroken) {
                    field.setAccessible(false);
                }
                return result;
            } catch (SecurityException e) {
                throw new ReflectorException(e);
            } catch (NoSuchFieldException e) {
                if (targetClass == Object.class)
                    throw new ReflectorException(e);
                targetClass = targetClass.getSuperclass();
            } catch (IllegalAccessException e) {
                throw new ReflectorException(e);
            }
        }
        // Never reached, but needed to satisfy compiler
        return null;
    }

    /**
     * Invoke the specified static method with the specified params...
     *
     * @param targetClass The target class of the invocation
     * @param methodName The method name to invoke
     * @param params The parameters to pass to the method invocation
     * @return The result of the method call
     * @throws ReflectorException In case of an error looking up or invoking the method.
     */
    @SuppressWarnings({ "UnusedDeclaration" })
    public Object invokeStatic(Class targetClass, String methodName, Object[] params) throws ReflectorException {
        if (params == null) {
            params = new Object[0];
        }
        Class[] paramTypes = new Class[params.length];
        for (int i = 0, len = params.length; i &lt; len; i++) {
            paramTypes[i] = params[i].getClass();
        }
        try {
            Method method = getMethod(targetClass, methodName, paramTypes);
            if (method == null) {
                StringBuilder buffer = new StringBuilder();
                buffer.append("Singleton-producing method named \'").append(methodName).append("\' not found with specified parameter classes: ");
                for (Class paramType : paramTypes) {
                    buffer.append(paramType.getName());
                    buffer.append(',');
                }
                buffer.setLength(buffer.length() - 1);
                throw new ReflectorException(buffer.toString());
            }
            return method.invoke(null, params);
        } catch (InvocationTargetException ex) {
            throw new ReflectorException(ex);
        } catch (IllegalAccessException ex) {
            throw new ReflectorException(ex);
        }
    }

    /**
     * Return the constructor, checking the cache first and storing in cache if not already there..
     *
     * @param targetClass The class to get the constructor from
     * @param params The classes of the parameters which the constructor should match.
     * @return the Constructor object that matches.
     * @throws ReflectorException In case we can't retrieve the proper constructor.
     */
    public &lt;T&gt; Constructor&lt;T&gt; getConstructor(Class&lt;T&gt; targetClass, Class[] params) throws ReflectorException {
        Map&lt;String, Constructor&lt;T&gt;&gt; constructorMap = getConstructorMap(targetClass);
        StringBuilder key = new StringBuilder(200);
        key.append("(");
        for (Class param : params) {
            key.append(param.getName());
            key.append(",");
        }
        if (params.length &gt; 0) {
            key.setLength(key.length() - 1);
        }
        key.append(")");
        Constructor&lt;T&gt; constructor;
        String paramKey = key.toString();
        synchronized (paramKey.intern()) {
            constructor = constructorMap.get(paramKey);
            if (constructor == null) {
                @SuppressWarnings({ "unchecked" }) Constructor&lt;T&gt;[] cands = (Constructor&lt;T&gt;[]) targetClass.getConstructors();
                for (Constructor&lt;T&gt; cand : cands) {
                    Class[] types = cand.getParameterTypes();
                    if (params.length != types.length) {
                        continue;
                    }
                    for (int j = 0, len2 = params.length; j &lt; len2; j++) {
                        if (!types[j].isAssignableFrom(params[j])) {
                            continue;
                        }
                    }
                    // we got it, so store it!
                    constructor = cand;
                    constructorMap.put(paramKey, constructor);
                }
            }
        }
        if (constructor == null) {
            throw new ReflectorException("Error retrieving constructor object for: " + targetClass.getName() + paramKey);
        }
        return constructor;
    }

    public Object getObjectProperty(Object target, String propertyName) throws ReflectorException {
        Object returnValue;
        if (propertyName == null || propertyName.trim().length() &lt; 1) {
            throw new ReflectorException("Cannot retrieve value for empty property.");
        }
        String beanAccessor = "get" + Character.toUpperCase(propertyName.charAt(0));
        if (propertyName.trim().length() &gt; 1) {
            beanAccessor += propertyName.substring(1).trim();
        }
        Class targetClass = target.getClass();
        Class[] emptyParams = {};
        Method method = _getMethod(targetClass, beanAccessor, emptyParams);
        if (method == null) {
            method = _getMethod(targetClass, propertyName, emptyParams);
        }
        if (method != null) {
            try {
                returnValue = method.invoke(target, new Object[] {});
            } catch (IllegalAccessException e) {
                throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
            } catch (InvocationTargetException e) {
                throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
            }
        }
        if (method != null) {
            try {
                returnValue = method.invoke(target, new Object[] {});
            } catch (IllegalAccessException e) {
                throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
            } catch (InvocationTargetException e) {
                throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
            }
        } else {
            returnValue = getField(target, propertyName, true);
            if (returnValue == null) {
                // TODO: Check if exception is the right action! Field exists, but contains null
                throw new ReflectorException("Neither method: \'" + propertyName + "\' nor bean accessor: \'" + beanAccessor + "\' can be found for class: \'" + targetClass + "\', and retrieval of field: \'" + propertyName + "\' returned null as value.");
            }
        }
        return returnValue;
    }

    /**
     * Return the method, checking the cache first and storing in cache if not already there..
     *
     * @param targetClass The class to get the method from
     * @param params The classes of the parameters which the method should match.
     * @return the Method object that matches.
     * @throws ReflectorException In case we can't retrieve the proper method.
     */
    public Method getMethod(Class targetClass, String methodName, Class[] params) throws ReflectorException {
        Method method = _getMethod(targetClass, methodName, params);
        if (method == null) {
            throw new ReflectorException("Method: \'" + methodName + "\' not found in class: \'" + targetClass + "\'");
        }
        return method;
    }

    private Method _getMethod(Class targetClass, String methodName, Class[] params) throws ReflectorException {
        Map&lt;String, Method&gt; methodMap = (Map&lt;String, Method&gt;) getMethodMap(targetClass, methodName);
        StringBuilder key = new StringBuilder(200);
        key.append("(");
        for (Class param : params) {
            key.append(param.getName());
            key.append(",");
        }
        key.append(")");
        Method method;
        String paramKey = key.toString();
        synchronized (paramKey.intern()) {
            method = (Method) methodMap.get(paramKey);
            if (method == null) {
                Method[] cands = targetClass.getMethods();
                for (Method cand : cands) {
                    String name = cand.getName();
                    if (!methodName.equals(name)) {
                        continue;
                    }
                    Class[] types = cand.getParameterTypes();
                    if (params.length != types.length) {
                        continue;
                    }
                    for (int j = 0, len2 = params.length; j &lt; len2; j++) {
                        if (!types[j].isAssignableFrom(params[j])) {
                            continue;
                        }
                    }
                    // we got it, so store it!
                    method = cand;
                    methodMap.put(paramKey, method);
                }
            }
        }
        return method;
    }

    /**
     * Retrieve the cache of constructors for the specified class.
     *
     * @param theClass the class to lookup.
     * @return The cache of constructors.
     * @throws ReflectorException in case of a lookup error.
     */
    private &lt;T&gt; Map&lt;String, Constructor&lt;T&gt;&gt; getConstructorMap(Class&lt;T&gt; theClass) throws ReflectorException {
        return (Map&lt;String, Constructor&lt;T&gt;&gt;) getMethodMap(theClass, CONSTRUCTOR_METHOD_NAME);
    }

    /**
     * Retrieve the cache of methods for the specified class and method name.
     *
     * @param theClass the class to lookup.
     * @param methodName The name of the method to lookup.
     * @return The cache of constructors.
     * @throws ReflectorException in case of a lookup error.
     */
    private Map&lt;String, ?&gt; getMethodMap(Class theClass, String methodName) throws ReflectorException {
        Map&lt;String, Method&gt; methodMap;
        if (theClass == null) {
            return null;
        }
        String className = theClass.getName();
        synchronized (className.intern()) {
            Map&lt;String, Map&lt;String, Method&gt;&gt; classMethods = classMaps.get(className);
            if (classMethods == null) {
                classMethods = new HashMap&lt;String, Map&lt;String, Method&gt;&gt;();
                methodMap = new HashMap&lt;String, Method&gt;();
                classMethods.put(methodName, methodMap);
                classMaps.put(className, classMethods);
            } else {
                String key = className + "::" + methodName;
                synchronized (key.intern()) {
                    methodMap = classMethods.get(methodName);
                    if (methodMap == null) {
                        methodMap = new HashMap&lt;String, Method&gt;();
                        classMethods.put(methodName, methodMap);
                    }
                }
            }
        }
        return methodMap;
    }
}
</data><data key="type">CompilationUnit</data></node><node id="1469"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="2"><data key="reference"></data><data key="text">package org.codehaus.plexus.util.reflection;

</data><data key="type">PackageDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="1468"><data key="reference">java.lang.reflect.Method</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="3"><data key="reference"></data><data key="identifier">reflection</data><data key="text">org.codehaus.plexus.util.reflection</data><data key="type">Name</data><data key="parentType">PackageDeclaration</data></node><node id="1467"><data key="reference"></data><data key="text">method == null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="4"><data key="reference"></data><data key="identifier">util</data><data key="text">org.codehaus.plexus.util</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="1466"><data key="reference"></data><data key="text">if (method == null) {
    throw new ReflectorException("Method: \'" + methodName + "\' not found in class: \'" + targetClass + "\'");
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="5"><data key="reference"></data><data key="identifier">plexus</data><data key="text">org.codehaus.plexus</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="1465"><data key="reference">java.lang.Class[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="6"><data key="reference"></data><data key="identifier">codehaus</data><data key="text">org.codehaus</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="1464"><data key="reference">java.lang.String</data><data key="identifier">methodName</data><data key="text">methodName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="7"><data key="reference"></data><data key="identifier">org</data><data key="text">org</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="1463"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="8"><data key="reference"></data><data key="text">import java.lang.reflect.Constructor;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="9"><data key="reference"></data><data key="identifier">Constructor</data><data key="text">java.lang.reflect.Constructor</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="1000"><data key="reference"></data><data key="text">key.append("(")</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1484"><data key="reference"></data><data key="text">return method;</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="1483"><data key="reference"></data><data key="identifier">\'</data><data key="text">"\'"</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1482"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1481"><data key="reference"></data><data key="identifier">\' not found in class: \'</data><data key="text">"\' not found in class: \'"</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1480"><data key="reference">java.lang.String</data><data key="identifier">methodName</data><data key="text">methodName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1479"><data key="reference"></data><data key="identifier">Method: \'</data><data key="text">"Method: \'"</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1478"><data key="reference"></data><data key="text">"Method: \'" + methodName</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="1477"><data key="reference"></data><data key="text">"Method: \'" + methodName + "\' not found in class: \'"</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="1476"><data key="reference"></data><data key="text">"Method: \'" + methodName + "\' not found in class: \'" + targetClass</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="1475"><data key="reference"></data><data key="text">"Method: \'" + methodName + "\' not found in class: \'" + targetClass + "\'"</data><data key="type">BinaryExpr</data><data key="parentType">ObjectCreationExpr</data></node><node id="1474"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1011"><data key="reference"></data><data key="text">{
    key.append(param.getName());
    key.append(",");
}</data><data key="type">BlockStmt</data><data key="parentType">ForeachStmt</data></node><node id="1495"><data key="reference">java.lang.String</data><data key="identifier">methodName</data><data key="text">methodName</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1010"><data key="reference">java.lang.Class[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1494"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1493"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1492"><data key="reference"></data><data key="modifier"></data><data key="text">String methodName</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="1491"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1490"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1008"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1007"><data key="reference"></data><data key="text">Class</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1006"><data key="reference"></data><data key="text">param</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1005"><data key="reference"></data><data key="modifier"></data><data key="text">Class param</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForeachStmt</data></node><node id="1489"><data key="reference"></data><data key="text">Class</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1004"><data key="reference"></data><data key="text">for (Class param : params) {
    key.append(param.getName());
    key.append(",");
}</data><data key="type">ForeachStmt</data><data key="parentType">BlockStmt</data></node><node id="1488"><data key="reference"></data><data key="modifier"></data><data key="text">Class targetClass</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="1003"><data key="reference"></data><data key="identifier">(</data><data key="text">"("</data><data key="type">StringLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1487"><data key="reference">userDefinedMethodName</data><data key="identifier">_getMethod</data><data key="text">_getMethod</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="1002"><data key="reference">otherMethodCall</data><data key="identifier">append</data><data key="text">append</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1486"><data key="reference"></data><data key="modifier">private</data><data key="text">private Method _getMethod(Class targetClass, String methodName, Class[] params) throws ReflectorException {
    Map&lt;String, Method&gt; methodMap = (Map&lt;String, Method&gt;) getMethodMap(targetClass, methodName);
    StringBuilder key = new StringBuilder(200);
    key.append("(");
    for (Class param : params) {
        key.append(param.getName());
        key.append(",");
    }
    key.append(")");
    Method method;
    String paramKey = key.toString();
    synchronized (paramKey.intern()) {
        method = (Method) methodMap.get(paramKey);
        if (method == null) {
            Method[] cands = targetClass.getMethods();
            for (Method cand : cands) {
                String name = cand.getName();
                if (!methodName.equals(name)) {
                    continue;
                }
                Class[] types = cand.getParameterTypes();
                if (params.length != types.length) {
                    continue;
                }
                for (int j = 0, len2 = params.length; j &lt; len2; j++) {
                    if (!types[j].isAssignableFrom(params[j])) {
                        continue;
                    }
                }
                // we got it, so store it!
                method = cand;
                methodMap.put(paramKey, method);
            }
        }
    }
    return method;
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="1001"><data key="reference">java.lang.StringBuilder</data><data key="identifier">key</data><data key="text">key</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1485"><data key="reference">java.lang.reflect.Method</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1009"><data key="reference">java.lang.Class</data><data key="identifier">param</data><data key="text">param</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1022"><data key="reference"></data><data key="text">if (params.length &gt; 0) {
    key.setLength(key.length() - 1);
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1021"><data key="reference"></data><data key="identifier">,</data><data key="text">","</data><data key="type">StringLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1020"><data key="reference">otherMethodCall</data><data key="identifier">append</data><data key="text">append</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1019"><data key="reference">java.lang.StringBuilder</data><data key="identifier">key</data><data key="text">key</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1018"><data key="reference"></data><data key="text">key.append(",")</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1017"><data key="reference">otherMethodCall</data><data key="identifier">getName</data><data key="text">getName</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1016"><data key="reference">java.lang.Class</data><data key="identifier">param</data><data key="text">param</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1015"><data key="reference"></data><data key="text">param.getName()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1499"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1014"><data key="reference">otherMethodCall</data><data key="identifier">append</data><data key="text">append</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1498"><data key="reference"></data><data key="text">Class</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayType</data></node><node id="1013"><data key="reference">java.lang.StringBuilder</data><data key="identifier">key</data><data key="text">key</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1497"><data key="reference"></data><data key="text">Class[]</data><data key="type">ArrayType</data><data key="parentType">Parameter</data></node><node id="1012"><data key="reference"></data><data key="text">key.append(param.getName())</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1496"><data key="reference"></data><data key="modifier"></data><data key="text">Class[] params</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="1033"><data key="reference"></data><data key="text">key.length()</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="1032"><data key="reference"></data><data key="text">key.length() - 1</data><data key="type">BinaryExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1031"><data key="reference">otherMethodCall</data><data key="identifier">setLength</data><data key="text">setLength</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1030"><data key="reference">java.lang.StringBuilder</data><data key="identifier">key</data><data key="text">key</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1029"><data key="reference"></data><data key="text">key.setLength(key.length() - 1)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1028"><data key="reference"></data><data key="text">{
    key.setLength(key.length() - 1);
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1027"><data key="reference"></data><data key="identifier">0</data><data key="text">0</data><data key="type">IntegerLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1026"><data key="reference">int</data><data key="identifier">length</data><data key="text">length</data><data key="type">SimpleName</data><data key="parentType">FieldAccessExpr</data></node><node id="1025"><data key="reference">java.lang.Class[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="600"><data key="reference"></data><data key="modifier"></data><data key="text">NoSuchFieldException e</data><data key="type">Parameter</data><data key="parentType">CatchClause</data></node><node id="1024"><data key="reference"></data><data key="text">params.length</data><data key="type">FieldAccessExpr</data><data key="parentType">BinaryExpr</data></node><node id="601"><data key="reference"></data><data key="text">NoSuchFieldException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1023"><data key="reference"></data><data key="text">params.length &gt; 0</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="602"><data key="reference">nonQualifiedClassName</data><data key="identifier">NoSuchFieldException</data><data key="text">NoSuchFieldException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="603"><data key="reference">java.lang.NoSuchFieldException</data><data key="identifier">e</data><data key="text">e</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="604"><data key="reference"></data><data key="text">{
    throw new ReflectorException(e);
}</data><data key="type">BlockStmt</data><data key="parentType">CatchClause</data></node><node id="605"><data key="reference"></data><data key="text">throw new ReflectorException(e);</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="606"><data key="reference"></data><data key="text">new ReflectorException(e)</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="607"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="608"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="609"><data key="reference">java.lang.NoSuchFieldException</data><data key="identifier">e</data><data key="text">e</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1044"><data key="reference">nonQualifiedClassName</data><data key="identifier">Constructor</data><data key="text">Constructor</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1043"><data key="reference"></data><data key="text">Constructor&lt;T&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1042"><data key="reference"></data><data key="text">constructor</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1041"><data key="reference"></data><data key="modifier"></data><data key="text">Constructor&lt;T&gt; constructor</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1040"><data key="reference"></data><data key="identifier">)</data><data key="text">")"</data><data key="type">StringLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1039"><data key="reference">otherMethodCall</data><data key="identifier">append</data><data key="text">append</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1038"><data key="reference">java.lang.StringBuilder</data><data key="identifier">key</data><data key="text">key</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1037"><data key="reference"></data><data key="text">key.append(")")</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="610"><data key="reference"></data><data key="text"> catch (IllegalArgumentException e) {
    throw new ReflectorException(e);
}</data><data key="type">CatchClause</data><data key="parentType">TryStmt</data></node><node id="1036"><data key="reference"></data><data key="identifier">1</data><data key="text">1</data><data key="type">IntegerLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="611"><data key="reference"></data><data key="modifier"></data><data key="text">IllegalArgumentException e</data><data key="type">Parameter</data><data key="parentType">CatchClause</data></node><node id="1035"><data key="reference">otherMethodCall</data><data key="identifier">length</data><data key="text">length</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="612"><data key="reference"></data><data key="text">IllegalArgumentException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1034"><data key="reference">java.lang.StringBuilder</data><data key="identifier">key</data><data key="text">key</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="613"><data key="reference">nonQualifiedClassName</data><data key="identifier">IllegalArgumentException</data><data key="text">IllegalArgumentException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="614"><data key="reference">java.lang.IllegalArgumentException</data><data key="identifier">e</data><data key="text">e</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="615"><data key="reference"></data><data key="text">{
    throw new ReflectorException(e);
}</data><data key="type">BlockStmt</data><data key="parentType">CatchClause</data></node><node id="616"><data key="reference"></data><data key="text">throw new ReflectorException(e);</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="617"><data key="reference"></data><data key="text">new ReflectorException(e)</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="618"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="619"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1055"><data key="reference">otherMethodCall</data><data key="identifier">toString</data><data key="text">toString</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1054"><data key="reference">java.lang.StringBuilder</data><data key="identifier">key</data><data key="text">key</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1053"><data key="reference"></data><data key="text">key.toString()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1052"><data key="reference">java.lang.String</data><data key="identifier">paramKey</data><data key="text">paramKey</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1051"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1050"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1049"><data key="reference"></data><data key="text">paramKey = key.toString()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="620"><data key="reference">java.lang.IllegalArgumentException</data><data key="identifier">e</data><data key="text">e</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1048"><data key="reference"></data><data key="modifier"></data><data key="text">String paramKey = key.toString()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="621"><data key="reference"></data><data key="text"> catch (IllegalAccessException e) {
    throw new ReflectorException(e);
}</data><data key="type">CatchClause</data><data key="parentType">TryStmt</data></node><node id="1047"><data key="reference">java.lang.reflect.Constructor</data><data key="identifier">constructor</data><data key="text">constructor</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="622"><data key="reference"></data><data key="modifier"></data><data key="text">IllegalAccessException e</data><data key="type">Parameter</data><data key="parentType">CatchClause</data></node><node id="1046"><data key="reference">nonQualifiedClassName</data><data key="identifier">T</data><data key="text">T</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="623"><data key="reference"></data><data key="text">IllegalAccessException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1045"><data key="reference"></data><data key="text">T</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="624"><data key="reference">nonQualifiedClassName</data><data key="identifier">IllegalAccessException</data><data key="text">IllegalAccessException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="625"><data key="reference">java.lang.IllegalAccessException</data><data key="identifier">e</data><data key="text">e</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="626"><data key="reference"></data><data key="text">{
    throw new ReflectorException(e);
}</data><data key="type">BlockStmt</data><data key="parentType">CatchClause</data></node><node id="627"><data key="reference"></data><data key="text">throw new ReflectorException(e);</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="628"><data key="reference"></data><data key="text">new ReflectorException(e)</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="629"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="1066"><data key="reference">java.lang.String</data><data key="identifier">paramKey</data><data key="text">paramKey</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1065"><data key="reference">otherMethodCall</data><data key="identifier">get</data><data key="text">get</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1064"><data key="reference">java.util.Map</data><data key="identifier">constructorMap</data><data key="text">constructorMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1063"><data key="reference"></data><data key="text">constructorMap.get(paramKey)</data><data key="type">MethodCallExpr</data><data key="parentType">AssignExpr</data></node><node id="1062"><data key="reference">java.lang.reflect.Constructor</data><data key="identifier">constructor</data><data key="text">constructor</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1061"><data key="reference"></data><data key="identifier">=</data><data key="text">constructor = constructorMap.get(paramKey)</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1060"><data key="reference"></data><data key="text">{
    constructor = constructorMap.get(paramKey);
    if (constructor == null) {
        @SuppressWarnings({ "unchecked" }) Constructor&lt;T&gt;[] cands = (Constructor&lt;T&gt;[]) targetClass.getConstructors();
        for (Constructor&lt;T&gt; cand : cands) {
            Class[] types = cand.getParameterTypes();
            if (params.length != types.length) {
                continue;
            }
            for (int j = 0, len2 = params.length; j &lt; len2; j++) {
                if (!types[j].isAssignableFrom(params[j])) {
                    continue;
                }
            }
            // we got it, so store it!
            constructor = cand;
            constructorMap.put(paramKey, constructor);
        }
    }
}</data><data key="type">BlockStmt</data><data key="parentType">SynchronizedStmt</data></node><node id="630"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="631"><data key="reference">java.lang.IllegalAccessException</data><data key="identifier">e</data><data key="text">e</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1059"><data key="reference">otherMethodCall</data><data key="identifier">intern</data><data key="text">intern</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="632"><data key="reference"></data><data key="modifier">public</data><data key="text">@SuppressWarnings({ "UnusedDeclaration" })
public Object getField(Object target, String fieldName) throws ReflectorException {
    return getField(target, fieldName, false);
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="1058"><data key="reference">java.lang.String</data><data key="identifier">paramKey</data><data key="text">paramKey</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="633"><data key="reference"></data><data key="text">@SuppressWarnings({ "UnusedDeclaration" })</data><data key="type">SingleMemberAnnotationExpr</data><data key="parentType">MethodDeclaration</data></node><node id="1057"><data key="reference"></data><data key="text">paramKey.intern()</data><data key="type">MethodCallExpr</data><data key="parentType">SynchronizedStmt</data></node><node id="634"><data key="reference"></data><data key="identifier">SuppressWarnings</data><data key="text">SuppressWarnings</data><data key="type">Name</data><data key="parentType">SingleMemberAnnotationExpr</data></node><node id="1056"><data key="reference"></data><data key="text">synchronized (paramKey.intern()) {
    constructor = constructorMap.get(paramKey);
    if (constructor == null) {
        @SuppressWarnings({ "unchecked" }) Constructor&lt;T&gt;[] cands = (Constructor&lt;T&gt;[]) targetClass.getConstructors();
        for (Constructor&lt;T&gt; cand : cands) {
            Class[] types = cand.getParameterTypes();
            if (params.length != types.length) {
                continue;
            }
            for (int j = 0, len2 = params.length; j &lt; len2; j++) {
                if (!types[j].isAssignableFrom(params[j])) {
                    continue;
                }
            }
            // we got it, so store it!
            constructor = cand;
            constructorMap.put(paramKey, constructor);
        }
    }
}</data><data key="type">SynchronizedStmt</data><data key="parentType">BlockStmt</data></node><node id="635"><data key="reference"></data><data key="text">{ "UnusedDeclaration" }</data><data key="type">ArrayInitializerExpr</data><data key="parentType">SingleMemberAnnotationExpr</data></node><node id="636"><data key="reference"></data><data key="identifier">UnusedDeclaration</data><data key="text">"UnusedDeclaration"</data><data key="type">StringLiteralExpr</data><data key="parentType">ArrayInitializerExpr</data></node><node id="637"><data key="reference">userDefinedMethodName</data><data key="identifier">getField</data><data key="text">getField</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="638"><data key="reference"></data><data key="modifier"></data><data key="text">Object target</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="639"><data key="reference"></data><data key="text">Object</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1077"><data key="reference"></data><data key="text">cands = (Constructor&lt;T&gt;[]) targetClass.getConstructors()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1076"><data key="reference"></data><data key="identifier">unchecked</data><data key="text">"unchecked"</data><data key="type">StringLiteralExpr</data><data key="parentType">ArrayInitializerExpr</data></node><node id="1075"><data key="reference"></data><data key="text">{ "unchecked" }</data><data key="type">ArrayInitializerExpr</data><data key="parentType">SingleMemberAnnotationExpr</data></node><node id="1074"><data key="reference"></data><data key="identifier">SuppressWarnings</data><data key="text">SuppressWarnings</data><data key="type">Name</data><data key="parentType">SingleMemberAnnotationExpr</data></node><node id="1073"><data key="reference"></data><data key="text">@SuppressWarnings({ "unchecked" })</data><data key="type">SingleMemberAnnotationExpr</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1072"><data key="reference"></data><data key="modifier"></data><data key="text">@SuppressWarnings({ "unchecked" }) Constructor&lt;T&gt;[] cands = (Constructor&lt;T&gt;[]) targetClass.getConstructors()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1071"><data key="reference"></data><data key="text">{
    @SuppressWarnings({ "unchecked" }) Constructor&lt;T&gt;[] cands = (Constructor&lt;T&gt;[]) targetClass.getConstructors();
    for (Constructor&lt;T&gt; cand : cands) {
        Class[] types = cand.getParameterTypes();
        if (params.length != types.length) {
            continue;
        }
        for (int j = 0, len2 = params.length; j &lt; len2; j++) {
            if (!types[j].isAssignableFrom(params[j])) {
                continue;
            }
        }
        // we got it, so store it!
        constructor = cand;
        constructorMap.put(paramKey, constructor);
    }
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1070"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="640"><data key="reference">nonQualifiedClassName</data><data key="identifier">Object</data><data key="text">Object</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="641"><data key="reference">java.lang.Object</data><data key="identifier">target</data><data key="text">target</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="642"><data key="reference"></data><data key="modifier"></data><data key="text">String fieldName</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="643"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1069"><data key="reference">java.lang.reflect.Constructor</data><data key="identifier">constructor</data><data key="text">constructor</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="644"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1068"><data key="reference"></data><data key="text">constructor == null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="645"><data key="reference">java.lang.String</data><data key="identifier">fieldName</data><data key="text">fieldName</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1067"><data key="reference"></data><data key="text">if (constructor == null) {
    @SuppressWarnings({ "unchecked" }) Constructor&lt;T&gt;[] cands = (Constructor&lt;T&gt;[]) targetClass.getConstructors();
    for (Constructor&lt;T&gt; cand : cands) {
        Class[] types = cand.getParameterTypes();
        if (params.length != types.length) {
            continue;
        }
        for (int j = 0, len2 = params.length; j &lt; len2; j++) {
            if (!types[j].isAssignableFrom(params[j])) {
                continue;
            }
        }
        // we got it, so store it!
        constructor = cand;
        constructorMap.put(paramKey, constructor);
    }
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="646"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="647"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="648"><data key="reference"></data><data key="text">Object</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="649"><data key="reference">nonQualifiedClassName</data><data key="identifier">Object</data><data key="text">Object</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1080"><data key="reference">nonQualifiedClassName</data><data key="identifier">Constructor</data><data key="text">Constructor</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1088"><data key="reference"></data><data key="text">T</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1087"><data key="reference">nonQualifiedClassName</data><data key="identifier">Constructor</data><data key="text">Constructor</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1086"><data key="reference"></data><data key="text">Constructor&lt;T&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayType</data></node><node id="1085"><data key="reference"></data><data key="text">Constructor&lt;T&gt;[]</data><data key="type">ArrayType</data><data key="parentType">CastExpr</data></node><node id="1084"><data key="reference"></data><data key="text">(Constructor&lt;T&gt;[]) targetClass.getConstructors()</data><data key="type">CastExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1083"><data key="reference">java.lang.reflect.Constructor&lt;T&gt;[]</data><data key="identifier">cands</data><data key="text">cands</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1082"><data key="reference">nonQualifiedClassName</data><data key="identifier">T</data><data key="text">T</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1081"><data key="reference"></data><data key="text">T</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="650"><data key="reference"></data><data key="text">{
    return getField(target, fieldName, false);
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="651"><data key="reference"></data><data key="text">return getField(target, fieldName, false);</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="652"><data key="reference"></data><data key="text">getField(target, fieldName, false)</data><data key="type">MethodCallExpr</data><data key="parentType">ReturnStmt</data></node><node id="653"><data key="reference">otherMethodCall</data><data key="identifier">getField</data><data key="text">getField</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="654"><data key="reference">java.lang.Object</data><data key="identifier">target</data><data key="text">target</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="655"><data key="reference">java.lang.String</data><data key="identifier">fieldName</data><data key="text">fieldName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1079"><data key="reference"></data><data key="text">Constructor&lt;T&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayType</data></node><node id="656"><data key="reference"></data><data key="identifier">false</data><data key="text">false</data><data key="type">BooleanLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1078"><data key="reference"></data><data key="text">Constructor&lt;T&gt;[]</data><data key="type">ArrayType</data><data key="parentType">VariableDeclarator</data></node><node id="657"><data key="reference"></data><data key="modifier">public</data><data key="text">public Object getField(Object target, String fieldName, boolean breakAccessibility) throws ReflectorException {
    Class targetClass = target.getClass();
    while (targetClass != null) {
        try {
            Field field = targetClass.getDeclaredField(fieldName);
            boolean accessibilityBroken = false;
            if (!field.isAccessible() &amp;&amp; breakAccessibility) {
                field.setAccessible(true);
                accessibilityBroken = true;
            }
            Object result = field.get(target);
            if (accessibilityBroken) {
                field.setAccessible(false);
            }
            return result;
        } catch (SecurityException e) {
            throw new ReflectorException(e);
        } catch (NoSuchFieldException e) {
            if (targetClass == Object.class)
                throw new ReflectorException(e);
            targetClass = targetClass.getSuperclass();
        } catch (IllegalAccessException e) {
            throw new ReflectorException(e);
        }
    }
    // Never reached, but needed to satisfy compiler
    return null;
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="658"><data key="reference">userDefinedMethodName</data><data key="identifier">getField</data><data key="text">getField</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="659"><data key="reference"></data><data key="modifier"></data><data key="text">Object target</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="1091"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1090"><data key="reference"></data><data key="text">targetClass.getConstructors()</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="1099"><data key="reference">nonQualifiedClassName</data><data key="identifier">T</data><data key="text">T</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1098"><data key="reference"></data><data key="text">T</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1097"><data key="reference">nonQualifiedClassName</data><data key="identifier">Constructor</data><data key="text">Constructor</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1096"><data key="reference"></data><data key="text">Constructor&lt;T&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1095"><data key="reference"></data><data key="text">cand</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1094"><data key="reference"></data><data key="modifier"></data><data key="text">Constructor&lt;T&gt; cand</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForeachStmt</data></node><node id="1093"><data key="reference"></data><data key="text">for (Constructor&lt;T&gt; cand : cands) {
    Class[] types = cand.getParameterTypes();
    if (params.length != types.length) {
        continue;
    }
    for (int j = 0, len2 = params.length; j &lt; len2; j++) {
        if (!types[j].isAssignableFrom(params[j])) {
            continue;
        }
    }
    // we got it, so store it!
    constructor = cand;
    constructorMap.put(paramKey, constructor);
}</data><data key="type">ForeachStmt</data><data key="parentType">BlockStmt</data></node><node id="1092"><data key="reference">otherMethodCall</data><data key="identifier">getConstructors</data><data key="text">getConstructors</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="660"><data key="reference"></data><data key="text">Object</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="661"><data key="reference">nonQualifiedClassName</data><data key="identifier">Object</data><data key="text">Object</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="662"><data key="reference">java.lang.Object</data><data key="identifier">target</data><data key="text">target</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="663"><data key="reference"></data><data key="modifier"></data><data key="text">String fieldName</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="664"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="665"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="666"><data key="reference">java.lang.String</data><data key="identifier">fieldName</data><data key="text">fieldName</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="667"><data key="reference"></data><data key="modifier"></data><data key="text">boolean breakAccessibility</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="1089"><data key="reference">nonQualifiedClassName</data><data key="identifier">T</data><data key="text">T</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="668"><data key="reference"></data><data key="identifier">boolean</data><data key="text">boolean</data><data key="type">PrimitiveType</data><data key="parentType">Parameter</data></node><node id="669"><data key="reference">boolean</data><data key="identifier">breakAccessibility</data><data key="text">breakAccessibility</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="670"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="671"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="672"><data key="reference"></data><data key="text">Object</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="673"><data key="reference">nonQualifiedClassName</data><data key="identifier">Object</data><data key="text">Object</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="674"><data key="reference"></data><data key="text">{
    Class targetClass = target.getClass();
    while (targetClass != null) {
        try {
            Field field = targetClass.getDeclaredField(fieldName);
            boolean accessibilityBroken = false;
            if (!field.isAccessible() &amp;&amp; breakAccessibility) {
                field.setAccessible(true);
                accessibilityBroken = true;
            }
            Object result = field.get(target);
            if (accessibilityBroken) {
                field.setAccessible(false);
            }
            return result;
        } catch (SecurityException e) {
            throw new ReflectorException(e);
        } catch (NoSuchFieldException e) {
            if (targetClass == Object.class)
                throw new ReflectorException(e);
            targetClass = targetClass.getSuperclass();
        } catch (IllegalAccessException e) {
            throw new ReflectorException(e);
        }
    }
    // Never reached, but needed to satisfy compiler
    return null;
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="675"><data key="reference"></data><data key="modifier"></data><data key="text">Class targetClass = target.getClass()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="676"><data key="reference"></data><data key="text">targetClass = target.getClass()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="677"><data key="reference"></data><data key="text">Class</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="678"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="679"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="680"><data key="reference"></data><data key="text">target.getClass()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="681"><data key="reference">java.lang.Object</data><data key="identifier">target</data><data key="text">target</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="682"><data key="reference">otherMethodCall</data><data key="identifier">getClass</data><data key="text">getClass</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="683"><data key="reference"></data><data key="text">while (targetClass != null) {
    try {
        Field field = targetClass.getDeclaredField(fieldName);
        boolean accessibilityBroken = false;
        if (!field.isAccessible() &amp;&amp; breakAccessibility) {
            field.setAccessible(true);
            accessibilityBroken = true;
        }
        Object result = field.get(target);
        if (accessibilityBroken) {
            field.setAccessible(false);
        }
        return result;
    } catch (SecurityException e) {
        throw new ReflectorException(e);
    } catch (NoSuchFieldException e) {
        if (targetClass == Object.class)
            throw new ReflectorException(e);
        targetClass = targetClass.getSuperclass();
    } catch (IllegalAccessException e) {
        throw new ReflectorException(e);
    }
}</data><data key="type">WhileStmt</data><data key="parentType">BlockStmt</data></node><node id="200"><data key="reference"></data><data key="identifier"> with specified or ancestor parameter classes: </data><data key="text">" with specified or ancestor parameter classes: "</data><data key="type">StringLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="684"><data key="reference"></data><data key="text">targetClass != null</data><data key="type">BinaryExpr</data><data key="parentType">WhileStmt</data></node><node id="201"><data key="reference"></data><data key="text">for (Class paramType : paramTypes) {
    buffer.append(paramType.getName());
    buffer.append(',');
}</data><data key="type">ForeachStmt</data><data key="parentType">BlockStmt</data></node><node id="685"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="202"><data key="reference"></data><data key="modifier"></data><data key="text">Class paramType</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForeachStmt</data></node><node id="686"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="203"><data key="reference"></data><data key="text">paramType</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="687"><data key="reference"></data><data key="text">{
    try {
        Field field = targetClass.getDeclaredField(fieldName);
        boolean accessibilityBroken = false;
        if (!field.isAccessible() &amp;&amp; breakAccessibility) {
            field.setAccessible(true);
            accessibilityBroken = true;
        }
        Object result = field.get(target);
        if (accessibilityBroken) {
            field.setAccessible(false);
        }
        return result;
    } catch (SecurityException e) {
        throw new ReflectorException(e);
    } catch (NoSuchFieldException e) {
        if (targetClass == Object.class)
            throw new ReflectorException(e);
        targetClass = targetClass.getSuperclass();
    } catch (IllegalAccessException e) {
        throw new ReflectorException(e);
    }
}</data><data key="type">BlockStmt</data><data key="parentType">WhileStmt</data></node><node id="204"><data key="reference"></data><data key="text">Class</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="688"><data key="reference"></data><data key="text">try {
    Field field = targetClass.getDeclaredField(fieldName);
    boolean accessibilityBroken = false;
    if (!field.isAccessible() &amp;&amp; breakAccessibility) {
        field.setAccessible(true);
        accessibilityBroken = true;
    }
    Object result = field.get(target);
    if (accessibilityBroken) {
        field.setAccessible(false);
    }
    return result;
} catch (SecurityException e) {
    throw new ReflectorException(e);
} catch (NoSuchFieldException e) {
    if (targetClass == Object.class)
        throw new ReflectorException(e);
    targetClass = targetClass.getSuperclass();
} catch (IllegalAccessException e) {
    throw new ReflectorException(e);
}</data><data key="type">TryStmt</data><data key="parentType">BlockStmt</data></node><node id="205"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="689"><data key="reference"></data><data key="text">{
    Field field = targetClass.getDeclaredField(fieldName);
    boolean accessibilityBroken = false;
    if (!field.isAccessible() &amp;&amp; breakAccessibility) {
        field.setAccessible(true);
        accessibilityBroken = true;
    }
    Object result = field.get(target);
    if (accessibilityBroken) {
        field.setAccessible(false);
    }
    return result;
}</data><data key="type">BlockStmt</data><data key="parentType">TryStmt</data></node><node id="206"><data key="reference">java.lang.Class</data><data key="identifier">paramType</data><data key="text">paramType</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="207"><data key="reference">java.lang.Class[]</data><data key="identifier">paramTypes</data><data key="text">paramTypes</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="208"><data key="reference"></data><data key="text">{
    buffer.append(paramType.getName());
    buffer.append(',');
}</data><data key="type">BlockStmt</data><data key="parentType">ForeachStmt</data></node><node id="209"><data key="reference"></data><data key="text">buffer.append(paramType.getName())</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="690"><data key="reference"></data><data key="modifier"></data><data key="text">Field field = targetClass.getDeclaredField(fieldName)</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="691"><data key="reference"></data><data key="text">field = targetClass.getDeclaredField(fieldName)</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="692"><data key="reference"></data><data key="text">Field</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="693"><data key="reference">nonQualifiedClassName</data><data key="identifier">Field</data><data key="text">Field</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="210"><data key="reference">java.lang.StringBuilder</data><data key="identifier">buffer</data><data key="text">buffer</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="694"><data key="reference">java.lang.reflect.Field</data><data key="identifier">field</data><data key="text">field</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="211"><data key="reference">otherMethodCall</data><data key="identifier">append</data><data key="text">append</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="695"><data key="reference"></data><data key="text">targetClass.getDeclaredField(fieldName)</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="212"><data key="reference"></data><data key="text">paramType.getName()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="696"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="213"><data key="reference">java.lang.Class</data><data key="identifier">paramType</data><data key="text">paramType</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="697"><data key="reference">otherMethodCall</data><data key="identifier">getDeclaredField</data><data key="text">getDeclaredField</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="214"><data key="reference">otherMethodCall</data><data key="identifier">getName</data><data key="text">getName</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="698"><data key="reference">java.lang.String</data><data key="identifier">fieldName</data><data key="text">fieldName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="215"><data key="reference"></data><data key="text">buffer.append(',')</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="699"><data key="reference"></data><data key="modifier"></data><data key="text">boolean accessibilityBroken = false</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="216"><data key="reference">java.lang.StringBuilder</data><data key="identifier">buffer</data><data key="text">buffer</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="217"><data key="reference">otherMethodCall</data><data key="identifier">append</data><data key="text">append</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="218"><data key="reference"></data><data key="identifier">,</data><data key="text">','</data><data key="type">CharLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="219"><data key="reference"></data><data key="text">buffer.setLength(buffer.length() - 1)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="220"><data key="reference">java.lang.StringBuilder</data><data key="identifier">buffer</data><data key="text">buffer</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="221"><data key="reference">otherMethodCall</data><data key="identifier">setLength</data><data key="text">setLength</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="222"><data key="reference"></data><data key="text">buffer.length() - 1</data><data key="type">BinaryExpr</data><data key="parentType">MethodCallExpr</data></node><node id="223"><data key="reference"></data><data key="text">buffer.length()</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="224"><data key="reference">java.lang.StringBuilder</data><data key="identifier">buffer</data><data key="text">buffer</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="225"><data key="reference">otherMethodCall</data><data key="identifier">length</data><data key="text">length</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="226"><data key="reference"></data><data key="identifier">1</data><data key="text">1</data><data key="type">IntegerLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="227"><data key="reference"></data><data key="text">throw new ReflectorException(buffer.toString());</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="228"><data key="reference"></data><data key="text">new ReflectorException(buffer.toString())</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="229"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="230"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="231"><data key="reference"></data><data key="text">buffer.toString()</data><data key="type">MethodCallExpr</data><data key="parentType">ObjectCreationExpr</data></node><node id="232"><data key="reference">java.lang.StringBuilder</data><data key="identifier">buffer</data><data key="text">buffer</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="233"><data key="reference">otherMethodCall</data><data key="identifier">toString</data><data key="text">toString</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="234"><data key="reference"></data><data key="text">return con.newInstance(params);</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="235"><data key="reference"></data><data key="text">con.newInstance(params)</data><data key="type">MethodCallExpr</data><data key="parentType">ReturnStmt</data></node><node id="236"><data key="reference">java.lang.reflect.Constructor</data><data key="identifier">con</data><data key="text">con</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="237"><data key="reference">otherMethodCall</data><data key="identifier">newInstance</data><data key="text">newInstance</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="238"><data key="reference">java.lang.Object[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="239"><data key="reference"></data><data key="text"> catch (InstantiationException ex) {
    throw new ReflectorException(ex);
}</data><data key="type">CatchClause</data><data key="parentType">TryStmt</data></node><node id="240"><data key="reference"></data><data key="modifier"></data><data key="text">InstantiationException ex</data><data key="type">Parameter</data><data key="parentType">CatchClause</data></node><node id="241"><data key="reference"></data><data key="text">InstantiationException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="242"><data key="reference">nonQualifiedClassName</data><data key="identifier">InstantiationException</data><data key="text">InstantiationException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="243"><data key="reference">java.lang.InstantiationException</data><data key="identifier">ex</data><data key="text">ex</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="244"><data key="reference"></data><data key="text">{
    throw new ReflectorException(ex);
}</data><data key="type">BlockStmt</data><data key="parentType">CatchClause</data></node><node id="245"><data key="reference"></data><data key="text">throw new ReflectorException(ex);</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="246"><data key="reference"></data><data key="text">new ReflectorException(ex)</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="247"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="248"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="249"><data key="reference">java.lang.InstantiationException</data><data key="identifier">ex</data><data key="text">ex</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="250"><data key="reference"></data><data key="text"> catch (InvocationTargetException ex) {
    throw new ReflectorException(ex);
}</data><data key="type">CatchClause</data><data key="parentType">TryStmt</data></node><node id="251"><data key="reference"></data><data key="modifier"></data><data key="text">InvocationTargetException ex</data><data key="type">Parameter</data><data key="parentType">CatchClause</data></node><node id="252"><data key="reference"></data><data key="text">InvocationTargetException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="253"><data key="reference">nonQualifiedClassName</data><data key="identifier">InvocationTargetException</data><data key="text">InvocationTargetException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="254"><data key="reference">java.lang.reflect.InvocationTargetException</data><data key="identifier">ex</data><data key="text">ex</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="255"><data key="reference"></data><data key="text">{
    throw new ReflectorException(ex);
}</data><data key="type">BlockStmt</data><data key="parentType">CatchClause</data></node><node id="256"><data key="reference"></data><data key="text">throw new ReflectorException(ex);</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="257"><data key="reference"></data><data key="text">new ReflectorException(ex)</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="258"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="259"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="260"><data key="reference">java.lang.reflect.InvocationTargetException</data><data key="identifier">ex</data><data key="text">ex</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="261"><data key="reference"></data><data key="text"> catch (IllegalAccessException ex) {
    throw new ReflectorException(ex);
}</data><data key="type">CatchClause</data><data key="parentType">TryStmt</data></node><node id="262"><data key="reference"></data><data key="modifier"></data><data key="text">IllegalAccessException ex</data><data key="type">Parameter</data><data key="parentType">CatchClause</data></node><node id="263"><data key="reference"></data><data key="text">IllegalAccessException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="264"><data key="reference">nonQualifiedClassName</data><data key="identifier">IllegalAccessException</data><data key="text">IllegalAccessException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="265"><data key="reference">java.lang.IllegalAccessException</data><data key="identifier">ex</data><data key="text">ex</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="266"><data key="reference"></data><data key="text">{
    throw new ReflectorException(ex);
}</data><data key="type">BlockStmt</data><data key="parentType">CatchClause</data></node><node id="267"><data key="reference"></data><data key="text">throw new ReflectorException(ex);</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="268"><data key="reference"></data><data key="text">new ReflectorException(ex)</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="269"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="270"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="271"><data key="reference">java.lang.IllegalAccessException</data><data key="identifier">ex</data><data key="text">ex</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="272"><data key="reference"></data><data key="modifier">public</data><data key="text">/**
 * Retrieve the singleton instance of a class, given the array of parameters... Uses constructor caching to find a
 * constructor that matches the parameter types, either specifically (first choice) or abstractly...
 *
 * @param theClass The class to retrieve the singleton of
 * @param initParams The parameters to pass to the constructor
 * @return The singleton object
 * @throws ReflectorException In case anything goes wrong here...
 */
@SuppressWarnings({ "UnusedDeclaration" })
public &lt;T&gt; T getSingleton(Class&lt;T&gt; theClass, Object[] initParams) throws ReflectorException {
    Class[] paramTypes = new Class[initParams.length];
    for (int i = 0, len = initParams.length; i &lt; len; i++) {
        paramTypes[i] = initParams[i].getClass();
    }
    try {
        Method method = getMethod(theClass, GET_INSTANCE_METHOD_NAME, paramTypes);
        // noinspection unchecked
        return (T) method.invoke(null, initParams);
    } catch (InvocationTargetException ex) {
        throw new ReflectorException(ex);
    } catch (IllegalAccessException ex) {
        throw new ReflectorException(ex);
    }
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="273"><data key="reference"></data><data key="text">@SuppressWarnings({ "UnusedDeclaration" })</data><data key="type">SingleMemberAnnotationExpr</data><data key="parentType">MethodDeclaration</data></node><node id="274"><data key="reference"></data><data key="identifier">SuppressWarnings</data><data key="text">SuppressWarnings</data><data key="type">Name</data><data key="parentType">SingleMemberAnnotationExpr</data></node><node id="275"><data key="reference"></data><data key="text">{ "UnusedDeclaration" }</data><data key="type">ArrayInitializerExpr</data><data key="parentType">SingleMemberAnnotationExpr</data></node><node id="276"><data key="reference"></data><data key="identifier">UnusedDeclaration</data><data key="text">"UnusedDeclaration"</data><data key="type">StringLiteralExpr</data><data key="parentType">ArrayInitializerExpr</data></node><node id="277"><data key="reference"></data><data key="text">T</data><data key="type">TypeParameter</data><data key="parentType">MethodDeclaration</data></node><node id="278"><data key="reference">runtimeGenericType</data><data key="identifier">T</data><data key="text">T</data><data key="type">SimpleName</data><data key="parentType">TypeParameter</data></node><node id="279"><data key="reference">userDefinedMethodName</data><data key="identifier">getSingleton</data><data key="text">getSingleton</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="280"><data key="reference"></data><data key="modifier"></data><data key="text">Class&lt;T&gt; theClass</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="281"><data key="reference"></data><data key="text">Class&lt;T&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="282"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="283"><data key="reference"></data><data key="text">T</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="284"><data key="reference">nonQualifiedClassName</data><data key="identifier">T</data><data key="text">T</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="285"><data key="reference">java.lang.Class</data><data key="identifier">theClass</data><data key="text">theClass</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="286"><data key="reference"></data><data key="modifier"></data><data key="text">Object[] initParams</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="287"><data key="reference"></data><data key="text">Object[]</data><data key="type">ArrayType</data><data key="parentType">Parameter</data></node><node id="288"><data key="reference"></data><data key="text">Object</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayType</data></node><node id="289"><data key="reference">nonQualifiedClassName</data><data key="identifier">Object</data><data key="text">Object</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="290"><data key="reference">java.lang.Object[]</data><data key="identifier">initParams</data><data key="text">initParams</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="291"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="292"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="293"><data key="reference"></data><data key="text">T</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="294"><data key="reference">nonQualifiedClassName</data><data key="identifier">T</data><data key="text">T</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="295"><data key="reference"></data><data key="text">{
    Class[] paramTypes = new Class[initParams.length];
    for (int i = 0, len = initParams.length; i &lt; len; i++) {
        paramTypes[i] = initParams[i].getClass();
    }
    try {
        Method method = getMethod(theClass, GET_INSTANCE_METHOD_NAME, paramTypes);
        // noinspection unchecked
        return (T) method.invoke(null, initParams);
    } catch (InvocationTargetException ex) {
        throw new ReflectorException(ex);
    } catch (IllegalAccessException ex) {
        throw new ReflectorException(ex);
    }
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="296"><data key="reference"></data><data key="modifier"></data><data key="text">Class[] paramTypes = new Class[initParams.length]</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="297"><data key="reference"></data><data key="text">paramTypes = new Class[initParams.length]</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="298"><data key="reference"></data><data key="text">Class[]</data><data key="type">ArrayType</data><data key="parentType">VariableDeclarator</data></node><node id="299"><data key="reference"></data><data key="text">Class</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayType</data></node><node id="1503"><data key="reference"></data><data key="text">Method</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="1502"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1501"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="1500"><data key="reference">java.lang.Class[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1509"><data key="reference">nonQualifiedClassName</data><data key="identifier">Map</data><data key="text">Map</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1508"><data key="reference"></data><data key="text">Map&lt;String, Method&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1507"><data key="reference"></data><data key="text">methodMap = (Map&lt;String, Method&gt;) getMethodMap(targetClass, methodName)</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1506"><data key="reference"></data><data key="modifier"></data><data key="text">Map&lt;String, Method&gt; methodMap = (Map&lt;String, Method&gt;) getMethodMap(targetClass, methodName)</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1505"><data key="reference"></data><data key="text">{
    Map&lt;String, Method&gt; methodMap = (Map&lt;String, Method&gt;) getMethodMap(targetClass, methodName);
    StringBuilder key = new StringBuilder(200);
    key.append("(");
    for (Class param : params) {
        key.append(param.getName());
        key.append(",");
    }
    key.append(")");
    Method method;
    String paramKey = key.toString();
    synchronized (paramKey.intern()) {
        method = (Method) methodMap.get(paramKey);
        if (method == null) {
            Method[] cands = targetClass.getMethods();
            for (Method cand : cands) {
                String name = cand.getName();
                if (!methodName.equals(name)) {
                    continue;
                }
                Class[] types = cand.getParameterTypes();
                if (params.length != types.length) {
                    continue;
                }
                for (int j = 0, len2 = params.length; j &lt; len2; j++) {
                    if (!types[j].isAssignableFrom(params[j])) {
                        continue;
                    }
                }
                // we got it, so store it!
                method = cand;
                methodMap.put(paramKey, method);
            }
        }
    }
    return method;
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="1504"><data key="reference">nonQualifiedClassName</data><data key="identifier">Method</data><data key="text">Method</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1514"><data key="reference">java.util.Map</data><data key="identifier">methodMap</data><data key="text">methodMap</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1513"><data key="reference">nonQualifiedClassName</data><data key="identifier">Method</data><data key="text">Method</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1512"><data key="reference"></data><data key="text">Method</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1511"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1510"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1519"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1518"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1517"><data key="reference">nonQualifiedClassName</data><data key="identifier">Map</data><data key="text">Map</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1516"><data key="reference"></data><data key="text">Map&lt;String, Method&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="1515"><data key="reference"></data><data key="text">(Map&lt;String, Method&gt;) getMethodMap(targetClass, methodName)</data><data key="type">CastExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1525"><data key="reference">java.lang.String</data><data key="identifier">methodName</data><data key="text">methodName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1524"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1523"><data key="reference">otherMethodCall</data><data key="identifier">getMethodMap</data><data key="text">getMethodMap</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1522"><data key="reference"></data><data key="text">getMethodMap(targetClass, methodName)</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="1521"><data key="reference">nonQualifiedClassName</data><data key="identifier">Method</data><data key="text">Method</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1520"><data key="reference"></data><data key="text">Method</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1529"><data key="reference">nonQualifiedClassName</data><data key="identifier">StringBuilder</data><data key="text">StringBuilder</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1528"><data key="reference"></data><data key="text">StringBuilder</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1527"><data key="reference"></data><data key="text">key = new StringBuilder(200)</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1526"><data key="reference"></data><data key="modifier"></data><data key="text">StringBuilder key = new StringBuilder(200)</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1536"><data key="reference">java.lang.StringBuilder</data><data key="identifier">key</data><data key="text">key</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1535"><data key="reference"></data><data key="text">key.append("(")</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1534"><data key="reference"></data><data key="identifier">200</data><data key="text">200</data><data key="type">IntegerLiteralExpr</data><data key="parentType">ObjectCreationExpr</data></node><node id="1533"><data key="reference">nonQualifiedClassName</data><data key="identifier">StringBuilder</data><data key="text">StringBuilder</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1532"><data key="reference"></data><data key="text">StringBuilder</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="1531"><data key="reference"></data><data key="text">new StringBuilder(200)</data><data key="type">ObjectCreationExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1530"><data key="reference">java.lang.StringBuilder</data><data key="identifier">key</data><data key="text">key</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1539"><data key="reference"></data><data key="text">for (Class param : params) {
    key.append(param.getName());
    key.append(",");
}</data><data key="type">ForeachStmt</data><data key="parentType">BlockStmt</data></node><node id="1538"><data key="reference"></data><data key="identifier">(</data><data key="text">"("</data><data key="type">StringLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1537"><data key="reference">otherMethodCall</data><data key="identifier">append</data><data key="text">append</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1550"><data key="reference"></data><data key="text">param.getName()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1547"><data key="reference"></data><data key="text">key.append(param.getName())</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1546"><data key="reference"></data><data key="text">{
    key.append(param.getName());
    key.append(",");
}</data><data key="type">BlockStmt</data><data key="parentType">ForeachStmt</data></node><node id="1545"><data key="reference">java.lang.Class[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1544"><data key="reference">java.lang.Class</data><data key="identifier">param</data><data key="text">param</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1543"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1542"><data key="reference"></data><data key="text">Class</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1541"><data key="reference"></data><data key="text">param</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1540"><data key="reference"></data><data key="modifier"></data><data key="text">Class param</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForeachStmt</data></node><node id="1549"><data key="reference">otherMethodCall</data><data key="identifier">append</data><data key="text">append</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1548"><data key="reference">java.lang.StringBuilder</data><data key="identifier">key</data><data key="text">key</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1561"><data key="reference"></data><data key="modifier"></data><data key="text">Method method</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1560"><data key="reference"></data><data key="identifier">)</data><data key="text">")"</data><data key="type">StringLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1558"><data key="reference">java.lang.StringBuilder</data><data key="identifier">key</data><data key="text">key</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1557"><data key="reference"></data><data key="text">key.append(")")</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1556"><data key="reference"></data><data key="identifier">,</data><data key="text">","</data><data key="type">StringLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1555"><data key="reference">otherMethodCall</data><data key="identifier">append</data><data key="text">append</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1554"><data key="reference">java.lang.StringBuilder</data><data key="identifier">key</data><data key="text">key</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1553"><data key="reference"></data><data key="text">key.append(",")</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1552"><data key="reference">otherMethodCall</data><data key="identifier">getName</data><data key="text">getName</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1551"><data key="reference">java.lang.Class</data><data key="identifier">param</data><data key="text">param</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1559"><data key="reference">otherMethodCall</data><data key="identifier">append</data><data key="text">append</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1572"><data key="reference">java.lang.StringBuilder</data><data key="identifier">key</data><data key="text">key</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1571"><data key="reference"></data><data key="text">key.toString()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1570"><data key="reference">java.lang.String</data><data key="identifier">paramKey</data><data key="text">paramKey</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1569"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1568"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1567"><data key="reference"></data><data key="text">paramKey = key.toString()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1566"><data key="reference"></data><data key="modifier"></data><data key="text">String paramKey = key.toString()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1565"><data key="reference">java.lang.reflect.Method</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1564"><data key="reference">nonQualifiedClassName</data><data key="identifier">Method</data><data key="text">Method</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1563"><data key="reference"></data><data key="text">Method</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1562"><data key="reference"></data><data key="text">method</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1583"><data key="reference">nonQualifiedClassName</data><data key="identifier">Method</data><data key="text">Method</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1582"><data key="reference"></data><data key="text">Method</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="1581"><data key="reference"></data><data key="text">(Method) methodMap.get(paramKey)</data><data key="type">CastExpr</data><data key="parentType">AssignExpr</data></node><node id="1580"><data key="reference">java.lang.reflect.Method</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1579"><data key="reference"></data><data key="identifier">=</data><data key="text">method = (Method) methodMap.get(paramKey)</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1578"><data key="reference"></data><data key="text">{
    method = (Method) methodMap.get(paramKey);
    if (method == null) {
        Method[] cands = targetClass.getMethods();
        for (Method cand : cands) {
            String name = cand.getName();
            if (!methodName.equals(name)) {
                continue;
            }
            Class[] types = cand.getParameterTypes();
            if (params.length != types.length) {
                continue;
            }
            for (int j = 0, len2 = params.length; j &lt; len2; j++) {
                if (!types[j].isAssignableFrom(params[j])) {
                    continue;
                }
            }
            // we got it, so store it!
            method = cand;
            methodMap.put(paramKey, method);
        }
    }
}</data><data key="type">BlockStmt</data><data key="parentType">SynchronizedStmt</data></node><node id="1577"><data key="reference">otherMethodCall</data><data key="identifier">intern</data><data key="text">intern</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1576"><data key="reference">java.lang.String</data><data key="identifier">paramKey</data><data key="text">paramKey</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1575"><data key="reference"></data><data key="text">paramKey.intern()</data><data key="type">MethodCallExpr</data><data key="parentType">SynchronizedStmt</data></node><node id="1574"><data key="reference"></data><data key="text">synchronized (paramKey.intern()) {
    method = (Method) methodMap.get(paramKey);
    if (method == null) {
        Method[] cands = targetClass.getMethods();
        for (Method cand : cands) {
            String name = cand.getName();
            if (!methodName.equals(name)) {
                continue;
            }
            Class[] types = cand.getParameterTypes();
            if (params.length != types.length) {
                continue;
            }
            for (int j = 0, len2 = params.length; j &lt; len2; j++) {
                if (!types[j].isAssignableFrom(params[j])) {
                    continue;
                }
            }
            // we got it, so store it!
            method = cand;
            methodMap.put(paramKey, method);
        }
    }
}</data><data key="type">SynchronizedStmt</data><data key="parentType">BlockStmt</data></node><node id="1573"><data key="reference">otherMethodCall</data><data key="identifier">toString</data><data key="text">toString</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1110"><data key="reference">java.lang.reflect.Constructor</data><data key="identifier">cand</data><data key="text">cand</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1594"><data key="reference"></data><data key="text">cands = targetClass.getMethods()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1593"><data key="reference"></data><data key="modifier"></data><data key="text">Method[] cands = targetClass.getMethods()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1592"><data key="reference"></data><data key="text">{
    Method[] cands = targetClass.getMethods();
    for (Method cand : cands) {
        String name = cand.getName();
        if (!methodName.equals(name)) {
            continue;
        }
        Class[] types = cand.getParameterTypes();
        if (params.length != types.length) {
            continue;
        }
        for (int j = 0, len2 = params.length; j &lt; len2; j++) {
            if (!types[j].isAssignableFrom(params[j])) {
                continue;
            }
        }
        // we got it, so store it!
        method = cand;
        methodMap.put(paramKey, method);
    }
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1591"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1590"><data key="reference">java.lang.reflect.Method</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1107"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1106"><data key="reference"></data><data key="text">Class</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayType</data></node><node id="1105"><data key="reference"></data><data key="text">Class[]</data><data key="type">ArrayType</data><data key="parentType">VariableDeclarator</data></node><node id="1589"><data key="reference"></data><data key="text">method == null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="1104"><data key="reference"></data><data key="text">types = cand.getParameterTypes()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1588"><data key="reference"></data><data key="text">if (method == null) {
    Method[] cands = targetClass.getMethods();
    for (Method cand : cands) {
        String name = cand.getName();
        if (!methodName.equals(name)) {
            continue;
        }
        Class[] types = cand.getParameterTypes();
        if (params.length != types.length) {
            continue;
        }
        for (int j = 0, len2 = params.length; j &lt; len2; j++) {
            if (!types[j].isAssignableFrom(params[j])) {
                continue;
            }
        }
        // we got it, so store it!
        method = cand;
        methodMap.put(paramKey, method);
    }
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1103"><data key="reference"></data><data key="modifier"></data><data key="text">Class[] types = cand.getParameterTypes()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1587"><data key="reference">java.lang.String</data><data key="identifier">paramKey</data><data key="text">paramKey</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1102"><data key="reference"></data><data key="text">{
    Class[] types = cand.getParameterTypes();
    if (params.length != types.length) {
        continue;
    }
    for (int j = 0, len2 = params.length; j &lt; len2; j++) {
        if (!types[j].isAssignableFrom(params[j])) {
            continue;
        }
    }
    // we got it, so store it!
    constructor = cand;
    constructorMap.put(paramKey, constructor);
}</data><data key="type">BlockStmt</data><data key="parentType">ForeachStmt</data></node><node id="1586"><data key="reference">otherMethodCall</data><data key="identifier">get</data><data key="text">get</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1101"><data key="reference">java.lang.reflect.Constructor&lt;T&gt;[]</data><data key="identifier">cands</data><data key="text">cands</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1585"><data key="reference">java.util.Map</data><data key="identifier">methodMap</data><data key="text">methodMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1100"><data key="reference">java.lang.reflect.Constructor</data><data key="identifier">cand</data><data key="text">cand</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1584"><data key="reference"></data><data key="text">methodMap.get(paramKey)</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="1109"><data key="reference"></data><data key="text">cand.getParameterTypes()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1108"><data key="reference">java.lang.Class[]</data><data key="identifier">types</data><data key="text">types</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1121"><data key="reference"></data><data key="text">continue;</data><data key="type">ContinueStmt</data><data key="parentType">BlockStmt</data></node><node id="1120"><data key="reference"></data><data key="text">{
    continue;
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1118"><data key="reference">java.lang.Class[]</data><data key="identifier">types</data><data key="text">types</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1117"><data key="reference"></data><data key="text">types.length</data><data key="type">FieldAccessExpr</data><data key="parentType">BinaryExpr</data></node><node id="1116"><data key="reference">int</data><data key="identifier">length</data><data key="text">length</data><data key="type">SimpleName</data><data key="parentType">FieldAccessExpr</data></node><node id="1115"><data key="reference">java.lang.Class[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1599"><data key="reference"></data><data key="text">targetClass.getMethods()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1114"><data key="reference"></data><data key="text">params.length</data><data key="type">FieldAccessExpr</data><data key="parentType">BinaryExpr</data></node><node id="1598"><data key="reference">java.lang.reflect.Method[]</data><data key="identifier">cands</data><data key="text">cands</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1113"><data key="reference"></data><data key="text">params.length != types.length</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="1597"><data key="reference">nonQualifiedClassName</data><data key="identifier">Method</data><data key="text">Method</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1112"><data key="reference"></data><data key="text">if (params.length != types.length) {
    continue;
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1596"><data key="reference"></data><data key="text">Method</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayType</data></node><node id="1111"><data key="reference">otherMethodCall</data><data key="identifier">getParameterTypes</data><data key="text">getParameterTypes</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1595"><data key="reference"></data><data key="text">Method[]</data><data key="type">ArrayType</data><data key="parentType">VariableDeclarator</data></node><node id="1119"><data key="reference">int</data><data key="identifier">length</data><data key="text">length</data><data key="type">SimpleName</data><data key="parentType">FieldAccessExpr</data></node><node id="1132"><data key="reference">java.lang.Class[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1131"><data key="reference"></data><data key="text">params.length</data><data key="type">FieldAccessExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1130"><data key="reference">int</data><data key="identifier">len2</data><data key="text">len2</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1129"><data key="reference"></data><data key="identifier">int</data><data key="text">int</data><data key="type">PrimitiveType</data><data key="parentType">VariableDeclarator</data></node><node id="1128"><data key="reference"></data><data key="text">len2 = params.length</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1127"><data key="reference"></data><data key="identifier">0</data><data key="text">0</data><data key="type">IntegerLiteralExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1126"><data key="reference">int</data><data key="identifier">j</data><data key="text">j</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1125"><data key="reference"></data><data key="identifier">int</data><data key="text">int</data><data key="type">PrimitiveType</data><data key="parentType">VariableDeclarator</data></node><node id="1124"><data key="reference"></data><data key="text">j = 0</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1123"><data key="reference"></data><data key="modifier"></data><data key="text">int j = 0, len2 = params.length</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForStmt</data></node><node id="700"><data key="reference"></data><data key="text">accessibilityBroken = false</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1122"><data key="reference"></data><data key="text">for (int j = 0, len2 = params.length; j &lt; len2; j++) {
    if (!types[j].isAssignableFrom(params[j])) {
        continue;
    }
}</data><data key="type">ForStmt</data><data key="parentType">BlockStmt</data></node><node id="701"><data key="reference"></data><data key="identifier">boolean</data><data key="text">boolean</data><data key="type">PrimitiveType</data><data key="parentType">VariableDeclarator</data></node><node id="702"><data key="reference">boolean</data><data key="identifier">accessibilityBroken</data><data key="text">accessibilityBroken</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="703"><data key="reference"></data><data key="identifier">false</data><data key="text">false</data><data key="type">BooleanLiteralExpr</data><data key="parentType">VariableDeclarator</data></node><node id="704"><data key="reference"></data><data key="text">if (!field.isAccessible() &amp;&amp; breakAccessibility) {
    field.setAccessible(true);
    accessibilityBroken = true;
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="705"><data key="reference"></data><data key="text">!field.isAccessible() &amp;&amp; breakAccessibility</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="706"><data key="reference"></data><data key="text">!field.isAccessible()</data><data key="type">UnaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="707"><data key="reference"></data><data key="text">field.isAccessible()</data><data key="type">MethodCallExpr</data><data key="parentType">UnaryExpr</data></node><node id="708"><data key="reference">java.lang.reflect.Field</data><data key="identifier">field</data><data key="text">field</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="709"><data key="reference">otherMethodCall</data><data key="identifier">isAccessible</data><data key="text">isAccessible</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1143"><data key="reference"></data><data key="text">types[j]</data><data key="type">ArrayAccessExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1142"><data key="reference"></data><data key="text">types[j].isAssignableFrom(params[j])</data><data key="type">MethodCallExpr</data><data key="parentType">UnaryExpr</data></node><node id="1141"><data key="reference"></data><data key="text">!types[j].isAssignableFrom(params[j])</data><data key="type">UnaryExpr</data><data key="parentType">IfStmt</data></node><node id="1140"><data key="reference"></data><data key="text">if (!types[j].isAssignableFrom(params[j])) {
    continue;
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1139"><data key="reference"></data><data key="text">{
    if (!types[j].isAssignableFrom(params[j])) {
        continue;
    }
}</data><data key="type">BlockStmt</data><data key="parentType">ForStmt</data></node><node id="1138"><data key="reference">int</data><data key="identifier">j</data><data key="text">j</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1137"><data key="reference"></data><data key="text">j++</data><data key="type">UnaryExpr</data><data key="parentType">ForStmt</data></node><node id="1136"><data key="reference">int</data><data key="identifier">len2</data><data key="text">len2</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1135"><data key="reference">int</data><data key="identifier">j</data><data key="text">j</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="710"><data key="reference">boolean</data><data key="identifier">breakAccessibility</data><data key="text">breakAccessibility</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1134"><data key="reference"></data><data key="text">j &lt; len2</data><data key="type">BinaryExpr</data><data key="parentType">ForStmt</data></node><node id="711"><data key="reference"></data><data key="text">{
    field.setAccessible(true);
    accessibilityBroken = true;
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1133"><data key="reference">int</data><data key="identifier">length</data><data key="text">length</data><data key="type">SimpleName</data><data key="parentType">FieldAccessExpr</data></node><node id="712"><data key="reference"></data><data key="text">field.setAccessible(true)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="713"><data key="reference">java.lang.reflect.Field</data><data key="identifier">field</data><data key="text">field</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="714"><data key="reference">otherMethodCall</data><data key="identifier">setAccessible</data><data key="text">setAccessible</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="715"><data key="reference"></data><data key="identifier">true</data><data key="text">true</data><data key="type">BooleanLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="716"><data key="reference"></data><data key="identifier">=</data><data key="text">accessibilityBroken = true</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="717"><data key="reference">boolean</data><data key="identifier">accessibilityBroken</data><data key="text">accessibilityBroken</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="718"><data key="reference"></data><data key="identifier">true</data><data key="text">true</data><data key="type">BooleanLiteralExpr</data><data key="parentType">AssignExpr</data></node><node id="719"><data key="reference"></data><data key="modifier"></data><data key="text">Object result = field.get(target)</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1154"><data key="reference">java.lang.reflect.Constructor</data><data key="identifier">cand</data><data key="text">cand</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1153"><data key="reference">java.lang.reflect.Constructor</data><data key="identifier">constructor</data><data key="text">constructor</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1152"><data key="reference"></data><data key="identifier">=</data><data key="text">constructor = cand</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1151"><data key="reference"></data><data key="text">continue;</data><data key="type">ContinueStmt</data><data key="parentType">BlockStmt</data></node><node id="1150"><data key="reference"></data><data key="text">{
    continue;
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1149"><data key="reference">int</data><data key="identifier">j</data><data key="text">j</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1148"><data key="reference">java.lang.Class[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1147"><data key="reference"></data><data key="text">params[j]</data><data key="type">ArrayAccessExpr</data><data key="parentType">MethodCallExpr</data></node><node id="720"><data key="reference"></data><data key="text">result = field.get(target)</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1146"><data key="reference">otherMethodCall</data><data key="identifier">isAssignableFrom</data><data key="text">isAssignableFrom</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="721"><data key="reference"></data><data key="text">Object</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1145"><data key="reference">int</data><data key="identifier">j</data><data key="text">j</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="722"><data key="reference">nonQualifiedClassName</data><data key="identifier">Object</data><data key="text">Object</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1144"><data key="reference">java.lang.Class[]</data><data key="identifier">types</data><data key="text">types</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="723"><data key="reference">java.lang.Object</data><data key="identifier">result</data><data key="text">result</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="724"><data key="reference"></data><data key="text">field.get(target)</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="725"><data key="reference">java.lang.reflect.Field</data><data key="identifier">field</data><data key="text">field</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="726"><data key="reference">otherMethodCall</data><data key="identifier">get</data><data key="text">get</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="727"><data key="reference">java.lang.Object</data><data key="identifier">target</data><data key="text">target</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="728"><data key="reference"></data><data key="text">if (accessibilityBroken) {
    field.setAccessible(false);
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="729"><data key="reference">boolean</data><data key="identifier">accessibilityBroken</data><data key="text">accessibilityBroken</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1165"><data key="reference"></data><data key="text">throw new ReflectorException("Error retrieving constructor object for: " + targetClass.getName() + paramKey);</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="1164"><data key="reference"></data><data key="text">{
    throw new ReflectorException("Error retrieving constructor object for: " + targetClass.getName() + paramKey);
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1163"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1162"><data key="reference">java.lang.reflect.Constructor</data><data key="identifier">constructor</data><data key="text">constructor</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1161"><data key="reference"></data><data key="text">constructor == null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="1160"><data key="reference"></data><data key="text">if (constructor == null) {
    throw new ReflectorException("Error retrieving constructor object for: " + targetClass.getName() + paramKey);
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1159"><data key="reference">java.lang.reflect.Constructor</data><data key="identifier">constructor</data><data key="text">constructor</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="730"><data key="reference"></data><data key="text">{
    field.setAccessible(false);
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1158"><data key="reference">java.lang.String</data><data key="identifier">paramKey</data><data key="text">paramKey</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="731"><data key="reference"></data><data key="text">field.setAccessible(false)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1157"><data key="reference">otherMethodCall</data><data key="identifier">put</data><data key="text">put</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="732"><data key="reference">java.lang.reflect.Field</data><data key="identifier">field</data><data key="text">field</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1156"><data key="reference">java.util.Map</data><data key="identifier">constructorMap</data><data key="text">constructorMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="733"><data key="reference">otherMethodCall</data><data key="identifier">setAccessible</data><data key="text">setAccessible</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1155"><data key="reference"></data><data key="text">constructorMap.put(paramKey, constructor)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="734"><data key="reference"></data><data key="identifier">false</data><data key="text">false</data><data key="type">BooleanLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="735"><data key="reference"></data><data key="text">return result;</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="736"><data key="reference">java.lang.Object</data><data key="identifier">result</data><data key="text">result</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="737"><data key="reference"></data><data key="text"> catch (SecurityException e) {
    throw new ReflectorException(e);
}</data><data key="type">CatchClause</data><data key="parentType">TryStmt</data></node><node id="738"><data key="reference"></data><data key="modifier"></data><data key="text">SecurityException e</data><data key="type">Parameter</data><data key="parentType">CatchClause</data></node><node id="739"><data key="reference"></data><data key="text">SecurityException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1176"><data key="reference"></data><data key="text">return constructor;</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="1175"><data key="reference">java.lang.String</data><data key="identifier">paramKey</data><data key="text">paramKey</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1174"><data key="reference">otherMethodCall</data><data key="identifier">getName</data><data key="text">getName</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1173"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1172"><data key="reference"></data><data key="text">targetClass.getName()</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="1171"><data key="reference"></data><data key="identifier">Error retrieving constructor object for: </data><data key="text">"Error retrieving constructor object for: "</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1170"><data key="reference"></data><data key="text">"Error retrieving constructor object for: " + targetClass.getName()</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="740"><data key="reference">nonQualifiedClassName</data><data key="identifier">SecurityException</data><data key="text">SecurityException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="741"><data key="reference">java.lang.SecurityException</data><data key="identifier">e</data><data key="text">e</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1169"><data key="reference"></data><data key="text">"Error retrieving constructor object for: " + targetClass.getName() + paramKey</data><data key="type">BinaryExpr</data><data key="parentType">ObjectCreationExpr</data></node><node id="742"><data key="reference"></data><data key="text">{
    throw new ReflectorException(e);
}</data><data key="type">BlockStmt</data><data key="parentType">CatchClause</data></node><node id="1168"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="743"><data key="reference"></data><data key="text">throw new ReflectorException(e);</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="1167"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="744"><data key="reference"></data><data key="text">new ReflectorException(e)</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="1166"><data key="reference"></data><data key="text">new ReflectorException("Error retrieving constructor object for: " + targetClass.getName() + paramKey)</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="745"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="746"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="747"><data key="reference">java.lang.SecurityException</data><data key="identifier">e</data><data key="text">e</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="748"><data key="reference"></data><data key="text"> catch (NoSuchFieldException e) {
    if (targetClass == Object.class)
        throw new ReflectorException(e);
    targetClass = targetClass.getSuperclass();
}</data><data key="type">CatchClause</data><data key="parentType">TryStmt</data></node><node id="749"><data key="reference"></data><data key="modifier"></data><data key="text">NoSuchFieldException e</data><data key="type">Parameter</data><data key="parentType">CatchClause</data></node><node id="1187"><data key="reference">java.lang.String</data><data key="identifier">propertyName</data><data key="text">propertyName</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1186"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1185"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1184"><data key="reference"></data><data key="modifier"></data><data key="text">String propertyName</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="1183"><data key="reference">java.lang.Object</data><data key="identifier">target</data><data key="text">target</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1182"><data key="reference">nonQualifiedClassName</data><data key="identifier">Object</data><data key="text">Object</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1181"><data key="reference"></data><data key="text">Object</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1180"><data key="reference"></data><data key="modifier"></data><data key="text">Object target</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="750"><data key="reference"></data><data key="text">NoSuchFieldException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="751"><data key="reference">nonQualifiedClassName</data><data key="identifier">NoSuchFieldException</data><data key="text">NoSuchFieldException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="752"><data key="reference">java.lang.NoSuchFieldException</data><data key="identifier">e</data><data key="text">e</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="753"><data key="reference"></data><data key="text">{
    if (targetClass == Object.class)
        throw new ReflectorException(e);
    targetClass = targetClass.getSuperclass();
}</data><data key="type">BlockStmt</data><data key="parentType">CatchClause</data></node><node id="1179"><data key="reference">userDefinedMethodName</data><data key="identifier">getObjectProperty</data><data key="text">getObjectProperty</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="754"><data key="reference"></data><data key="text">if (targetClass == Object.class)
    throw new ReflectorException(e);</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1178"><data key="reference"></data><data key="modifier">public</data><data key="text">public Object getObjectProperty(Object target, String propertyName) throws ReflectorException {
    Object returnValue;
    if (propertyName == null || propertyName.trim().length() &lt; 1) {
        throw new ReflectorException("Cannot retrieve value for empty property.");
    }
    String beanAccessor = "get" + Character.toUpperCase(propertyName.charAt(0));
    if (propertyName.trim().length() &gt; 1) {
        beanAccessor += propertyName.substring(1).trim();
    }
    Class targetClass = target.getClass();
    Class[] emptyParams = {};
    Method method = _getMethod(targetClass, beanAccessor, emptyParams);
    if (method == null) {
        method = _getMethod(targetClass, propertyName, emptyParams);
    }
    if (method != null) {
        try {
            returnValue = method.invoke(target, new Object[] {});
        } catch (IllegalAccessException e) {
            throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
        } catch (InvocationTargetException e) {
            throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
        }
    }
    if (method != null) {
        try {
            returnValue = method.invoke(target, new Object[] {});
        } catch (IllegalAccessException e) {
            throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
        } catch (InvocationTargetException e) {
            throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
        }
    } else {
        returnValue = getField(target, propertyName, true);
        if (returnValue == null) {
            // TODO: Check if exception is the right action! Field exists, but contains null
            throw new ReflectorException("Neither method: \'" + propertyName + "\' nor bean accessor: \'" + beanAccessor + "\' can be found for class: \'" + targetClass + "\', and retrieval of field: \'" + propertyName + "\' returned null as value.");
        }
    }
    return returnValue;
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="755"><data key="reference"></data><data key="text">targetClass == Object.class</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="1177"><data key="reference">java.lang.reflect.Constructor</data><data key="identifier">constructor</data><data key="text">constructor</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="756"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="757"><data key="reference"></data><data key="text">Object.class</data><data key="type">ClassExpr</data><data key="parentType">BinaryExpr</data></node><node id="758"><data key="reference"></data><data key="text">Object</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassExpr</data></node><node id="759"><data key="reference">nonQualifiedClassName</data><data key="identifier">Object</data><data key="text">Object</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1190"><data key="reference"></data><data key="text">Object</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="1198"><data key="reference"></data><data key="text">if (propertyName == null || propertyName.trim().length() &lt; 1) {
    throw new ReflectorException("Cannot retrieve value for empty property.");
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1197"><data key="reference">java.lang.Object</data><data key="identifier">returnValue</data><data key="text">returnValue</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1196"><data key="reference">nonQualifiedClassName</data><data key="identifier">Object</data><data key="text">Object</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1195"><data key="reference"></data><data key="text">Object</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1194"><data key="reference"></data><data key="text">returnValue</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1193"><data key="reference"></data><data key="modifier"></data><data key="text">Object returnValue</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1192"><data key="reference"></data><data key="text">{
    Object returnValue;
    if (propertyName == null || propertyName.trim().length() &lt; 1) {
        throw new ReflectorException("Cannot retrieve value for empty property.");
    }
    String beanAccessor = "get" + Character.toUpperCase(propertyName.charAt(0));
    if (propertyName.trim().length() &gt; 1) {
        beanAccessor += propertyName.substring(1).trim();
    }
    Class targetClass = target.getClass();
    Class[] emptyParams = {};
    Method method = _getMethod(targetClass, beanAccessor, emptyParams);
    if (method == null) {
        method = _getMethod(targetClass, propertyName, emptyParams);
    }
    if (method != null) {
        try {
            returnValue = method.invoke(target, new Object[] {});
        } catch (IllegalAccessException e) {
            throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
        } catch (InvocationTargetException e) {
            throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
        }
    }
    if (method != null) {
        try {
            returnValue = method.invoke(target, new Object[] {});
        } catch (IllegalAccessException e) {
            throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
        } catch (InvocationTargetException e) {
            throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
        }
    } else {
        returnValue = getField(target, propertyName, true);
        if (returnValue == null) {
            // TODO: Check if exception is the right action! Field exists, but contains null
            throw new ReflectorException("Neither method: \'" + propertyName + "\' nor bean accessor: \'" + beanAccessor + "\' can be found for class: \'" + targetClass + "\', and retrieval of field: \'" + propertyName + "\' returned null as value.");
        }
    }
    return returnValue;
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="1191"><data key="reference">nonQualifiedClassName</data><data key="identifier">Object</data><data key="text">Object</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="760"><data key="reference"></data><data key="text">throw new ReflectorException(e);</data><data key="type">ThrowStmt</data><data key="parentType">IfStmt</data></node><node id="761"><data key="reference"></data><data key="text">new ReflectorException(e)</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="762"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="763"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="764"><data key="reference">java.lang.NoSuchFieldException</data><data key="identifier">e</data><data key="text">e</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="765"><data key="reference"></data><data key="identifier">=</data><data key="text">targetClass = targetClass.getSuperclass()</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1189"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="766"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1188"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="767"><data key="reference"></data><data key="text">targetClass.getSuperclass()</data><data key="type">MethodCallExpr</data><data key="parentType">AssignExpr</data></node><node id="768"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="769"><data key="reference">otherMethodCall</data><data key="identifier">getSuperclass</data><data key="text">getSuperclass</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="770"><data key="reference"></data><data key="text"> catch (IllegalAccessException e) {
    throw new ReflectorException(e);
}</data><data key="type">CatchClause</data><data key="parentType">TryStmt</data></node><node id="771"><data key="reference"></data><data key="modifier"></data><data key="text">IllegalAccessException e</data><data key="type">Parameter</data><data key="parentType">CatchClause</data></node><node id="772"><data key="reference"></data><data key="text">IllegalAccessException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="773"><data key="reference">nonQualifiedClassName</data><data key="identifier">IllegalAccessException</data><data key="text">IllegalAccessException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="774"><data key="reference">java.lang.IllegalAccessException</data><data key="identifier">e</data><data key="text">e</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="775"><data key="reference"></data><data key="text">{
    throw new ReflectorException(e);
}</data><data key="type">BlockStmt</data><data key="parentType">CatchClause</data></node><node id="776"><data key="reference"></data><data key="text">throw new ReflectorException(e);</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="777"><data key="reference"></data><data key="text">new ReflectorException(e)</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="1199"><data key="reference"></data><data key="text">propertyName == null || propertyName.trim().length() &lt; 1</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="778"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="779"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="780"><data key="reference">java.lang.IllegalAccessException</data><data key="identifier">e</data><data key="text">e</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="781"><data key="reference"></data><data key="text">// Never reached, but needed to satisfy compiler
return null;</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="782"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">ReturnStmt</data></node><node id="783"><data key="reference"></data><data key="modifier">public</data><data key="text">/**
 * Invoke the specified static method with the specified params...
 *
 * @param targetClass The target class of the invocation
 * @param methodName The method name to invoke
 * @param params The parameters to pass to the method invocation
 * @return The result of the method call
 * @throws ReflectorException In case of an error looking up or invoking the method.
 */
@SuppressWarnings({ "UnusedDeclaration" })
public Object invokeStatic(Class targetClass, String methodName, Object[] params) throws ReflectorException {
    if (params == null) {
        params = new Object[0];
    }
    Class[] paramTypes = new Class[params.length];
    for (int i = 0, len = params.length; i &lt; len; i++) {
        paramTypes[i] = params[i].getClass();
    }
    try {
        Method method = getMethod(targetClass, methodName, paramTypes);
        if (method == null) {
            StringBuilder buffer = new StringBuilder();
            buffer.append("Singleton-producing method named \'").append(methodName).append("\' not found with specified parameter classes: ");
            for (Class paramType : paramTypes) {
                buffer.append(paramType.getName());
                buffer.append(',');
            }
            buffer.setLength(buffer.length() - 1);
            throw new ReflectorException(buffer.toString());
        }
        return method.invoke(null, params);
    } catch (InvocationTargetException ex) {
        throw new ReflectorException(ex);
    } catch (IllegalAccessException ex) {
        throw new ReflectorException(ex);
    }
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="300"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="784"><data key="reference"></data><data key="text">@SuppressWarnings({ "UnusedDeclaration" })</data><data key="type">SingleMemberAnnotationExpr</data><data key="parentType">MethodDeclaration</data></node><node id="301"><data key="reference">java.lang.Class[]</data><data key="identifier">paramTypes</data><data key="text">paramTypes</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="785"><data key="reference"></data><data key="identifier">SuppressWarnings</data><data key="text">SuppressWarnings</data><data key="type">Name</data><data key="parentType">SingleMemberAnnotationExpr</data></node><node id="302"><data key="reference"></data><data key="text">new Class[initParams.length]</data><data key="type">ArrayCreationExpr</data><data key="parentType">VariableDeclarator</data></node><node id="786"><data key="reference"></data><data key="text">{ "UnusedDeclaration" }</data><data key="type">ArrayInitializerExpr</data><data key="parentType">SingleMemberAnnotationExpr</data></node><node id="303"><data key="reference"></data><data key="text">Class</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayCreationExpr</data></node><node id="787"><data key="reference"></data><data key="identifier">UnusedDeclaration</data><data key="text">"UnusedDeclaration"</data><data key="type">StringLiteralExpr</data><data key="parentType">ArrayInitializerExpr</data></node><node id="304"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="788"><data key="reference">userDefinedMethodName</data><data key="identifier">invokeStatic</data><data key="text">invokeStatic</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="305"><data key="reference"></data><data key="text">[initParams.length]</data><data key="type">ArrayCreationLevel</data><data key="parentType">ArrayCreationExpr</data></node><node id="789"><data key="reference"></data><data key="modifier"></data><data key="text">Class targetClass</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="306"><data key="reference"></data><data key="text">initParams.length</data><data key="type">FieldAccessExpr</data><data key="parentType">ArrayCreationLevel</data></node><node id="307"><data key="reference">java.lang.Object[]</data><data key="identifier">initParams</data><data key="text">initParams</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="308"><data key="reference">int</data><data key="identifier">length</data><data key="text">length</data><data key="type">SimpleName</data><data key="parentType">FieldAccessExpr</data></node><node id="309"><data key="reference"></data><data key="text">for (int i = 0, len = initParams.length; i &lt; len; i++) {
    paramTypes[i] = initParams[i].getClass();
}</data><data key="type">ForStmt</data><data key="parentType">BlockStmt</data></node><node id="790"><data key="reference"></data><data key="text">Class</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="791"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="792"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="793"><data key="reference"></data><data key="modifier"></data><data key="text">String methodName</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="310"><data key="reference"></data><data key="modifier"></data><data key="text">int i = 0, len = initParams.length</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForStmt</data></node><node id="794"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="311"><data key="reference"></data><data key="text">i = 0</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="795"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="312"><data key="reference"></data><data key="identifier">int</data><data key="text">int</data><data key="type">PrimitiveType</data><data key="parentType">VariableDeclarator</data></node><node id="796"><data key="reference">java.lang.String</data><data key="identifier">methodName</data><data key="text">methodName</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="313"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="797"><data key="reference"></data><data key="modifier"></data><data key="text">Object[] params</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="314"><data key="reference"></data><data key="identifier">0</data><data key="text">0</data><data key="type">IntegerLiteralExpr</data><data key="parentType">VariableDeclarator</data></node><node id="798"><data key="reference"></data><data key="text">Object[]</data><data key="type">ArrayType</data><data key="parentType">Parameter</data></node><node id="315"><data key="reference"></data><data key="text">len = initParams.length</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="799"><data key="reference"></data><data key="text">Object</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayType</data></node><node id="316"><data key="reference"></data><data key="identifier">int</data><data key="text">int</data><data key="type">PrimitiveType</data><data key="parentType">VariableDeclarator</data></node><node id="317"><data key="reference">int</data><data key="identifier">len</data><data key="text">len</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="318"><data key="reference"></data><data key="text">initParams.length</data><data key="type">FieldAccessExpr</data><data key="parentType">VariableDeclarator</data></node><node id="319"><data key="reference">java.lang.Object[]</data><data key="identifier">initParams</data><data key="text">initParams</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="320"><data key="reference">int</data><data key="identifier">length</data><data key="text">length</data><data key="type">SimpleName</data><data key="parentType">FieldAccessExpr</data></node><node id="321"><data key="reference"></data><data key="text">i &lt; len</data><data key="type">BinaryExpr</data><data key="parentType">ForStmt</data></node><node id="322"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="323"><data key="reference">int</data><data key="identifier">len</data><data key="text">len</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="324"><data key="reference"></data><data key="text">i++</data><data key="type">UnaryExpr</data><data key="parentType">ForStmt</data></node><node id="325"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="326"><data key="reference"></data><data key="text">{
    paramTypes[i] = initParams[i].getClass();
}</data><data key="type">BlockStmt</data><data key="parentType">ForStmt</data></node><node id="327"><data key="reference"></data><data key="identifier">=</data><data key="text">paramTypes[i] = initParams[i].getClass()</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="328"><data key="reference"></data><data key="text">paramTypes[i]</data><data key="type">ArrayAccessExpr</data><data key="parentType">AssignExpr</data></node><node id="329"><data key="reference">java.lang.Class[]</data><data key="identifier">paramTypes</data><data key="text">paramTypes</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="330"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="331"><data key="reference"></data><data key="text">initParams[i].getClass()</data><data key="type">MethodCallExpr</data><data key="parentType">AssignExpr</data></node><node id="332"><data key="reference"></data><data key="text">initParams[i]</data><data key="type">ArrayAccessExpr</data><data key="parentType">MethodCallExpr</data></node><node id="333"><data key="reference">java.lang.Object[]</data><data key="identifier">initParams</data><data key="text">initParams</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="334"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="335"><data key="reference">otherMethodCall</data><data key="identifier">getClass</data><data key="text">getClass</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="336"><data key="reference"></data><data key="text">try {
    Method method = getMethod(theClass, GET_INSTANCE_METHOD_NAME, paramTypes);
    // noinspection unchecked
    return (T) method.invoke(null, initParams);
} catch (InvocationTargetException ex) {
    throw new ReflectorException(ex);
} catch (IllegalAccessException ex) {
    throw new ReflectorException(ex);
}</data><data key="type">TryStmt</data><data key="parentType">BlockStmt</data></node><node id="337"><data key="reference"></data><data key="text">{
    Method method = getMethod(theClass, GET_INSTANCE_METHOD_NAME, paramTypes);
    // noinspection unchecked
    return (T) method.invoke(null, initParams);
}</data><data key="type">BlockStmt</data><data key="parentType">TryStmt</data></node><node id="338"><data key="reference"></data><data key="modifier"></data><data key="text">Method method = getMethod(theClass, GET_INSTANCE_METHOD_NAME, paramTypes)</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="339"><data key="reference"></data><data key="text">method = getMethod(theClass, GET_INSTANCE_METHOD_NAME, paramTypes)</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="340"><data key="reference"></data><data key="text">Method</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="341"><data key="reference">nonQualifiedClassName</data><data key="identifier">Method</data><data key="text">Method</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="342"><data key="reference">java.lang.reflect.Method</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="343"><data key="reference"></data><data key="text">getMethod(theClass, GET_INSTANCE_METHOD_NAME, paramTypes)</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="344"><data key="reference">otherMethodCall</data><data key="identifier">getMethod</data><data key="text">getMethod</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="345"><data key="reference">java.lang.Class</data><data key="identifier">theClass</data><data key="text">theClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="346"><data key="reference">java.lang.String</data><data key="identifier">GET_INSTANCE_METHOD_NAME</data><data key="text">GET_INSTANCE_METHOD_NAME</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="347"><data key="reference">java.lang.Class[]</data><data key="identifier">paramTypes</data><data key="text">paramTypes</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="348"><data key="reference"></data><data key="text">// noinspection unchecked
return (T) method.invoke(null, initParams);</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="349"><data key="reference"></data><data key="text">(T) method.invoke(null, initParams)</data><data key="type">CastExpr</data><data key="parentType">ReturnStmt</data></node><node id="350"><data key="reference"></data><data key="text">T</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="351"><data key="reference">nonQualifiedClassName</data><data key="identifier">T</data><data key="text">T</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="352"><data key="reference"></data><data key="text">method.invoke(null, initParams)</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="353"><data key="reference">java.lang.reflect.Method</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="354"><data key="reference">otherMethodCall</data><data key="identifier">invoke</data><data key="text">invoke</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="355"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="356"><data key="reference">java.lang.Object[]</data><data key="identifier">initParams</data><data key="text">initParams</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="357"><data key="reference"></data><data key="text"> catch (InvocationTargetException ex) {
    throw new ReflectorException(ex);
}</data><data key="type">CatchClause</data><data key="parentType">TryStmt</data></node><node id="358"><data key="reference"></data><data key="modifier"></data><data key="text">InvocationTargetException ex</data><data key="type">Parameter</data><data key="parentType">CatchClause</data></node><node id="359"><data key="reference"></data><data key="text">InvocationTargetException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="10"><data key="reference"></data><data key="identifier">reflect</data><data key="text">java.lang.reflect</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="11"><data key="reference"></data><data key="identifier">lang</data><data key="text">java.lang</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="12"><data key="reference"></data><data key="identifier">java</data><data key="text">java</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="13"><data key="reference"></data><data key="text">import java.lang.reflect.Field;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="14"><data key="reference"></data><data key="identifier">Field</data><data key="text">java.lang.reflect.Field</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="15"><data key="reference"></data><data key="identifier">reflect</data><data key="text">java.lang.reflect</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="16"><data key="reference"></data><data key="identifier">lang</data><data key="text">java.lang</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="17"><data key="reference"></data><data key="identifier">java</data><data key="text">java</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="18"><data key="reference"></data><data key="text">import java.lang.reflect.InvocationTargetException;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="19"><data key="reference"></data><data key="identifier">InvocationTargetException</data><data key="text">java.lang.reflect.InvocationTargetException</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="360"><data key="reference">nonQualifiedClassName</data><data key="identifier">InvocationTargetException</data><data key="text">InvocationTargetException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="361"><data key="reference">java.lang.reflect.InvocationTargetException</data><data key="identifier">ex</data><data key="text">ex</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="362"><data key="reference"></data><data key="text">{
    throw new ReflectorException(ex);
}</data><data key="type">BlockStmt</data><data key="parentType">CatchClause</data></node><node id="363"><data key="reference"></data><data key="text">throw new ReflectorException(ex);</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="364"><data key="reference"></data><data key="text">new ReflectorException(ex)</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="365"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="366"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="367"><data key="reference">java.lang.reflect.InvocationTargetException</data><data key="identifier">ex</data><data key="text">ex</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="368"><data key="reference"></data><data key="text"> catch (IllegalAccessException ex) {
    throw new ReflectorException(ex);
}</data><data key="type">CatchClause</data><data key="parentType">TryStmt</data></node><node id="369"><data key="reference"></data><data key="modifier"></data><data key="text">IllegalAccessException ex</data><data key="type">Parameter</data><data key="parentType">CatchClause</data></node><node id="20"><data key="reference"></data><data key="identifier">reflect</data><data key="text">java.lang.reflect</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="21"><data key="reference"></data><data key="identifier">lang</data><data key="text">java.lang</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="22"><data key="reference"></data><data key="identifier">java</data><data key="text">java</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="23"><data key="reference"></data><data key="text">import java.lang.reflect.Method;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="24"><data key="reference"></data><data key="identifier">Method</data><data key="text">java.lang.reflect.Method</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="25"><data key="reference"></data><data key="identifier">reflect</data><data key="text">java.lang.reflect</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="26"><data key="reference"></data><data key="identifier">lang</data><data key="text">java.lang</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="27"><data key="reference"></data><data key="identifier">java</data><data key="text">java</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="28"><data key="reference"></data><data key="text">import java.util.HashMap;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="29"><data key="reference"></data><data key="identifier">HashMap</data><data key="text">java.util.HashMap</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="370"><data key="reference"></data><data key="text">IllegalAccessException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="371"><data key="reference">nonQualifiedClassName</data><data key="identifier">IllegalAccessException</data><data key="text">IllegalAccessException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="372"><data key="reference">java.lang.IllegalAccessException</data><data key="identifier">ex</data><data key="text">ex</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="373"><data key="reference"></data><data key="text">{
    throw new ReflectorException(ex);
}</data><data key="type">BlockStmt</data><data key="parentType">CatchClause</data></node><node id="374"><data key="reference"></data><data key="text">throw new ReflectorException(ex);</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="375"><data key="reference"></data><data key="text">new ReflectorException(ex)</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="376"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="377"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="378"><data key="reference">java.lang.IllegalAccessException</data><data key="identifier">ex</data><data key="text">ex</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="379"><data key="reference"></data><data key="modifier">public</data><data key="text">/**
 * Invoke the specified method on the specified target with the specified params...
 *
 * @param target The target of the invocation
 * @param methodName The method name to invoke
 * @param params The parameters to pass to the method invocation
 * @return The result of the method call
 * @throws ReflectorException In case of an error looking up or invoking the method.
 */
@SuppressWarnings({ "UnusedDeclaration" })
public Object invoke(Object target, String methodName, Object[] params) throws ReflectorException {
    if (params == null) {
        params = new Object[0];
    }
    Class[] paramTypes = new Class[params.length];
    for (int i = 0, len = params.length; i &lt; len; i++) {
        paramTypes[i] = params[i].getClass();
    }
    try {
        Method method = getMethod(target.getClass(), methodName, paramTypes);
        if (method == null) {
            StringBuilder buffer = new StringBuilder();
            buffer.append("Singleton-producing method named '").append(methodName).append("' not found with specified parameter classes: ");
            for (Class paramType : paramTypes) {
                buffer.append(paramType.getName());
                buffer.append(',');
            }
            buffer.setLength(buffer.length() - 1);
            throw new ReflectorException(buffer.toString());
        }
        return method.invoke(target, params);
    } catch (InvocationTargetException ex) {
        throw new ReflectorException(ex);
    } catch (IllegalAccessException ex) {
        throw new ReflectorException(ex);
    }
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="30"><data key="reference"></data><data key="identifier">util</data><data key="text">java.util</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="31"><data key="reference"></data><data key="identifier">java</data><data key="text">java</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="32"><data key="reference"></data><data key="text">import java.util.Map;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="33"><data key="reference"></data><data key="identifier">Map</data><data key="text">java.util.Map</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="34"><data key="reference"></data><data key="identifier">util</data><data key="text">java.util</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="35"><data key="reference"></data><data key="identifier">java</data><data key="text">java</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="36"><data key="reference"></data><data key="modifier">public,final</data><data key="text">/**
 * Utility class used to instantiate an object using reflection. This utility hides many of the gory details needed to
 * do this.
 *
 * @author John Casey
 */
public final class Reflector {

    private static final String CONSTRUCTOR_METHOD_NAME = "$$CONSTRUCTOR$$";

    private static final String GET_INSTANCE_METHOD_NAME = "getInstance";

    private Map&lt;String, Map&lt;String, Map&lt;String, Method&gt;&gt;&gt; classMaps = new HashMap&lt;String, Map&lt;String, Map&lt;String, Method&gt;&gt;&gt;();

    /**
     * Ensure no instances of Reflector are created...this is a utility.
     */
    public Reflector() {
    }

    /**
     * Create a new instance of a class, given the array of parameters... Uses constructor caching to find a constructor
     * that matches the parameter types, either specifically (first choice) or abstractly...
     *
     * @param theClass The class to instantiate
     * @param params The parameters to pass to the constructor
     * @return The instantiated object
     * @throws ReflectorException In case anything goes wrong here...
     */
    @SuppressWarnings({ "UnusedDeclaration" })
    public &lt;T&gt; T newInstance(Class&lt;T&gt; theClass, Object[] params) throws ReflectorException {
        if (params == null) {
            params = new Object[0];
        }
        Class[] paramTypes = new Class[params.length];
        for (int i = 0, len = params.length; i &lt; len; i++) {
            paramTypes[i] = params[i].getClass();
        }
        try {
            Constructor&lt;T&gt; con = getConstructor(theClass, paramTypes);
            if (con == null) {
                StringBuilder buffer = new StringBuilder();
                buffer.append("Constructor not found for class: ");
                buffer.append(theClass.getName());
                buffer.append(" with specified or ancestor parameter classes: ");
                for (Class paramType : paramTypes) {
                    buffer.append(paramType.getName());
                    buffer.append(',');
                }
                buffer.setLength(buffer.length() - 1);
                throw new ReflectorException(buffer.toString());
            }
            return con.newInstance(params);
        } catch (InstantiationException ex) {
            throw new ReflectorException(ex);
        } catch (InvocationTargetException ex) {
            throw new ReflectorException(ex);
        } catch (IllegalAccessException ex) {
            throw new ReflectorException(ex);
        }
    }

    /**
     * Retrieve the singleton instance of a class, given the array of parameters... Uses constructor caching to find a
     * constructor that matches the parameter types, either specifically (first choice) or abstractly...
     *
     * @param theClass The class to retrieve the singleton of
     * @param initParams The parameters to pass to the constructor
     * @return The singleton object
     * @throws ReflectorException In case anything goes wrong here...
     */
    @SuppressWarnings({ "UnusedDeclaration" })
    public &lt;T&gt; T getSingleton(Class&lt;T&gt; theClass, Object[] initParams) throws ReflectorException {
        Class[] paramTypes = new Class[initParams.length];
        for (int i = 0, len = initParams.length; i &lt; len; i++) {
            paramTypes[i] = initParams[i].getClass();
        }
        try {
            Method method = getMethod(theClass, GET_INSTANCE_METHOD_NAME, paramTypes);
            // noinspection unchecked
            return (T) method.invoke(null, initParams);
        } catch (InvocationTargetException ex) {
            throw new ReflectorException(ex);
        } catch (IllegalAccessException ex) {
            throw new ReflectorException(ex);
        }
    }

    /**
     * Invoke the specified method on the specified target with the specified params...
     *
     * @param target The target of the invocation
     * @param methodName The method name to invoke
     * @param params The parameters to pass to the method invocation
     * @return The result of the method call
     * @throws ReflectorException In case of an error looking up or invoking the method.
     */
    @SuppressWarnings({ "UnusedDeclaration" })
    public Object invoke(Object target, String methodName, Object[] params) throws ReflectorException {
        if (params == null) {
            params = new Object[0];
        }
        Class[] paramTypes = new Class[params.length];
        for (int i = 0, len = params.length; i &lt; len; i++) {
            paramTypes[i] = params[i].getClass();
        }
        try {
            Method method = getMethod(target.getClass(), methodName, paramTypes);
            if (method == null) {
                StringBuilder buffer = new StringBuilder();
                buffer.append("Singleton-producing method named '").append(methodName).append("' not found with specified parameter classes: ");
                for (Class paramType : paramTypes) {
                    buffer.append(paramType.getName());
                    buffer.append(',');
                }
                buffer.setLength(buffer.length() - 1);
                throw new ReflectorException(buffer.toString());
            }
            return method.invoke(target, params);
        } catch (InvocationTargetException ex) {
            throw new ReflectorException(ex);
        } catch (IllegalAccessException ex) {
            throw new ReflectorException(ex);
        }
    }

    @SuppressWarnings({ "UnusedDeclaration" })
    public Object getStaticField(Class targetClass, String fieldName) throws ReflectorException {
        try {
            Field field = targetClass.getField(fieldName);
            return field.get(null);
        } catch (SecurityException e) {
            throw new ReflectorException(e);
        } catch (NoSuchFieldException e) {
            throw new ReflectorException(e);
        } catch (IllegalArgumentException e) {
            throw new ReflectorException(e);
        } catch (IllegalAccessException e) {
            throw new ReflectorException(e);
        }
    }

    @SuppressWarnings({ "UnusedDeclaration" })
    public Object getField(Object target, String fieldName) throws ReflectorException {
        return getField(target, fieldName, false);
    }

    public Object getField(Object target, String fieldName, boolean breakAccessibility) throws ReflectorException {
        Class targetClass = target.getClass();
        while (targetClass != null) {
            try {
                Field field = targetClass.getDeclaredField(fieldName);
                boolean accessibilityBroken = false;
                if (!field.isAccessible() &amp;&amp; breakAccessibility) {
                    field.setAccessible(true);
                    accessibilityBroken = true;
                }
                Object result = field.get(target);
                if (accessibilityBroken) {
                    field.setAccessible(false);
                }
                return result;
            } catch (SecurityException e) {
                throw new ReflectorException(e);
            } catch (NoSuchFieldException e) {
                if (targetClass == Object.class)
                    throw new ReflectorException(e);
                targetClass = targetClass.getSuperclass();
            } catch (IllegalAccessException e) {
                throw new ReflectorException(e);
            }
        }
        // Never reached, but needed to satisfy compiler
        return null;
    }

    /**
     * Invoke the specified static method with the specified params...
     *
     * @param targetClass The target class of the invocation
     * @param methodName The method name to invoke
     * @param params The parameters to pass to the method invocation
     * @return The result of the method call
     * @throws ReflectorException In case of an error looking up or invoking the method.
     */
    @SuppressWarnings({ "UnusedDeclaration" })
    public Object invokeStatic(Class targetClass, String methodName, Object[] params) throws ReflectorException {
        if (params == null) {
            params = new Object[0];
        }
        Class[] paramTypes = new Class[params.length];
        for (int i = 0, len = params.length; i &lt; len; i++) {
            paramTypes[i] = params[i].getClass();
        }
        try {
            Method method = getMethod(targetClass, methodName, paramTypes);
            if (method == null) {
                StringBuilder buffer = new StringBuilder();
                buffer.append("Singleton-producing method named \'").append(methodName).append("\' not found with specified parameter classes: ");
                for (Class paramType : paramTypes) {
                    buffer.append(paramType.getName());
                    buffer.append(',');
                }
                buffer.setLength(buffer.length() - 1);
                throw new ReflectorException(buffer.toString());
            }
            return method.invoke(null, params);
        } catch (InvocationTargetException ex) {
            throw new ReflectorException(ex);
        } catch (IllegalAccessException ex) {
            throw new ReflectorException(ex);
        }
    }

    /**
     * Return the constructor, checking the cache first and storing in cache if not already there..
     *
     * @param targetClass The class to get the constructor from
     * @param params The classes of the parameters which the constructor should match.
     * @return the Constructor object that matches.
     * @throws ReflectorException In case we can't retrieve the proper constructor.
     */
    public &lt;T&gt; Constructor&lt;T&gt; getConstructor(Class&lt;T&gt; targetClass, Class[] params) throws ReflectorException {
        Map&lt;String, Constructor&lt;T&gt;&gt; constructorMap = getConstructorMap(targetClass);
        StringBuilder key = new StringBuilder(200);
        key.append("(");
        for (Class param : params) {
            key.append(param.getName());
            key.append(",");
        }
        if (params.length &gt; 0) {
            key.setLength(key.length() - 1);
        }
        key.append(")");
        Constructor&lt;T&gt; constructor;
        String paramKey = key.toString();
        synchronized (paramKey.intern()) {
            constructor = constructorMap.get(paramKey);
            if (constructor == null) {
                @SuppressWarnings({ "unchecked" }) Constructor&lt;T&gt;[] cands = (Constructor&lt;T&gt;[]) targetClass.getConstructors();
                for (Constructor&lt;T&gt; cand : cands) {
                    Class[] types = cand.getParameterTypes();
                    if (params.length != types.length) {
                        continue;
                    }
                    for (int j = 0, len2 = params.length; j &lt; len2; j++) {
                        if (!types[j].isAssignableFrom(params[j])) {
                            continue;
                        }
                    }
                    // we got it, so store it!
                    constructor = cand;
                    constructorMap.put(paramKey, constructor);
                }
            }
        }
        if (constructor == null) {
            throw new ReflectorException("Error retrieving constructor object for: " + targetClass.getName() + paramKey);
        }
        return constructor;
    }

    public Object getObjectProperty(Object target, String propertyName) throws ReflectorException {
        Object returnValue;
        if (propertyName == null || propertyName.trim().length() &lt; 1) {
            throw new ReflectorException("Cannot retrieve value for empty property.");
        }
        String beanAccessor = "get" + Character.toUpperCase(propertyName.charAt(0));
        if (propertyName.trim().length() &gt; 1) {
            beanAccessor += propertyName.substring(1).trim();
        }
        Class targetClass = target.getClass();
        Class[] emptyParams = {};
        Method method = _getMethod(targetClass, beanAccessor, emptyParams);
        if (method == null) {
            method = _getMethod(targetClass, propertyName, emptyParams);
        }
        if (method != null) {
            try {
                returnValue = method.invoke(target, new Object[] {});
            } catch (IllegalAccessException e) {
                throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
            } catch (InvocationTargetException e) {
                throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
            }
        }
        if (method != null) {
            try {
                returnValue = method.invoke(target, new Object[] {});
            } catch (IllegalAccessException e) {
                throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
            } catch (InvocationTargetException e) {
                throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
            }
        } else {
            returnValue = getField(target, propertyName, true);
            if (returnValue == null) {
                // TODO: Check if exception is the right action! Field exists, but contains null
                throw new ReflectorException("Neither method: \'" + propertyName + "\' nor bean accessor: \'" + beanAccessor + "\' can be found for class: \'" + targetClass + "\', and retrieval of field: \'" + propertyName + "\' returned null as value.");
            }
        }
        return returnValue;
    }

    /**
     * Return the method, checking the cache first and storing in cache if not already there..
     *
     * @param targetClass The class to get the method from
     * @param params The classes of the parameters which the method should match.
     * @return the Method object that matches.
     * @throws ReflectorException In case we can't retrieve the proper method.
     */
    public Method getMethod(Class targetClass, String methodName, Class[] params) throws ReflectorException {
        Method method = _getMethod(targetClass, methodName, params);
        if (method == null) {
            throw new ReflectorException("Method: \'" + methodName + "\' not found in class: \'" + targetClass + "\'");
        }
        return method;
    }

    private Method _getMethod(Class targetClass, String methodName, Class[] params) throws ReflectorException {
        Map&lt;String, Method&gt; methodMap = (Map&lt;String, Method&gt;) getMethodMap(targetClass, methodName);
        StringBuilder key = new StringBuilder(200);
        key.append("(");
        for (Class param : params) {
            key.append(param.getName());
            key.append(",");
        }
        key.append(")");
        Method method;
        String paramKey = key.toString();
        synchronized (paramKey.intern()) {
            method = (Method) methodMap.get(paramKey);
            if (method == null) {
                Method[] cands = targetClass.getMethods();
                for (Method cand : cands) {
                    String name = cand.getName();
                    if (!methodName.equals(name)) {
                        continue;
                    }
                    Class[] types = cand.getParameterTypes();
                    if (params.length != types.length) {
                        continue;
                    }
                    for (int j = 0, len2 = params.length; j &lt; len2; j++) {
                        if (!types[j].isAssignableFrom(params[j])) {
                            continue;
                        }
                    }
                    // we got it, so store it!
                    method = cand;
                    methodMap.put(paramKey, method);
                }
            }
        }
        return method;
    }

    /**
     * Retrieve the cache of constructors for the specified class.
     *
     * @param theClass the class to lookup.
     * @return The cache of constructors.
     * @throws ReflectorException in case of a lookup error.
     */
    private &lt;T&gt; Map&lt;String, Constructor&lt;T&gt;&gt; getConstructorMap(Class&lt;T&gt; theClass) throws ReflectorException {
        return (Map&lt;String, Constructor&lt;T&gt;&gt;) getMethodMap(theClass, CONSTRUCTOR_METHOD_NAME);
    }

    /**
     * Retrieve the cache of methods for the specified class and method name.
     *
     * @param theClass the class to lookup.
     * @param methodName The name of the method to lookup.
     * @return The cache of constructors.
     * @throws ReflectorException in case of a lookup error.
     */
    private Map&lt;String, ?&gt; getMethodMap(Class theClass, String methodName) throws ReflectorException {
        Map&lt;String, Method&gt; methodMap;
        if (theClass == null) {
            return null;
        }
        String className = theClass.getName();
        synchronized (className.intern()) {
            Map&lt;String, Map&lt;String, Method&gt;&gt; classMethods = classMaps.get(className);
            if (classMethods == null) {
                classMethods = new HashMap&lt;String, Map&lt;String, Method&gt;&gt;();
                methodMap = new HashMap&lt;String, Method&gt;();
                classMethods.put(methodName, methodMap);
                classMaps.put(className, classMethods);
            } else {
                String key = className + "::" + methodName;
                synchronized (key.intern()) {
                    methodMap = classMethods.get(methodName);
                    if (methodMap == null) {
                        methodMap = new HashMap&lt;String, Method&gt;();
                        classMethods.put(methodName, methodMap);
                    }
                }
            }
        }
        return methodMap;
    }
}</data><data key="type">ClassOrInterfaceDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="37"><data key="reference">java.lang.Object</data><data key="identifier">Reflector</data><data key="text">Reflector</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="38"><data key="reference"></data><data key="modifier">private,static,final</data><data key="text">private static final String CONSTRUCTOR_METHOD_NAME = "$$CONSTRUCTOR$$";</data><data key="type">FieldDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="39"><data key="reference"></data><data key="text">CONSTRUCTOR_METHOD_NAME = "$$CONSTRUCTOR$$"</data><data key="type">VariableDeclarator</data><data key="parentType">FieldDeclaration</data></node><node id="380"><data key="reference"></data><data key="text">@SuppressWarnings({ "UnusedDeclaration" })</data><data key="type">SingleMemberAnnotationExpr</data><data key="parentType">MethodDeclaration</data></node><node id="381"><data key="reference"></data><data key="identifier">SuppressWarnings</data><data key="text">SuppressWarnings</data><data key="type">Name</data><data key="parentType">SingleMemberAnnotationExpr</data></node><node id="382"><data key="reference"></data><data key="text">{ "UnusedDeclaration" }</data><data key="type">ArrayInitializerExpr</data><data key="parentType">SingleMemberAnnotationExpr</data></node><node id="383"><data key="reference"></data><data key="identifier">UnusedDeclaration</data><data key="text">"UnusedDeclaration"</data><data key="type">StringLiteralExpr</data><data key="parentType">ArrayInitializerExpr</data></node><node id="384"><data key="reference">userDefinedMethodName</data><data key="identifier">invoke</data><data key="text">invoke</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="385"><data key="reference"></data><data key="modifier"></data><data key="text">Object target</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="386"><data key="reference"></data><data key="text">Object</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="387"><data key="reference">nonQualifiedClassName</data><data key="identifier">Object</data><data key="text">Object</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="388"><data key="reference">java.lang.Object</data><data key="identifier">target</data><data key="text">target</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="389"><data key="reference"></data><data key="modifier"></data><data key="text">String methodName</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="40"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="41"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="42"><data key="reference">java.lang.String</data><data key="identifier">CONSTRUCTOR_METHOD_NAME</data><data key="text">CONSTRUCTOR_METHOD_NAME</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="43"><data key="reference"></data><data key="identifier">$$CONSTRUCTOR$$</data><data key="text">"$$CONSTRUCTOR$$"</data><data key="type">StringLiteralExpr</data><data key="parentType">VariableDeclarator</data></node><node id="44"><data key="reference"></data><data key="modifier">private,static,final</data><data key="text">private static final String GET_INSTANCE_METHOD_NAME = "getInstance";</data><data key="type">FieldDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="45"><data key="reference"></data><data key="text">GET_INSTANCE_METHOD_NAME = "getInstance"</data><data key="type">VariableDeclarator</data><data key="parentType">FieldDeclaration</data></node><node id="46"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="47"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="48"><data key="reference">java.lang.String</data><data key="identifier">GET_INSTANCE_METHOD_NAME</data><data key="text">GET_INSTANCE_METHOD_NAME</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="49"><data key="reference"></data><data key="identifier">getInstance</data><data key="text">"getInstance"</data><data key="type">StringLiteralExpr</data><data key="parentType">VariableDeclarator</data></node><node id="390"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="391"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="392"><data key="reference">java.lang.String</data><data key="identifier">methodName</data><data key="text">methodName</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="393"><data key="reference"></data><data key="modifier"></data><data key="text">Object[] params</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="394"><data key="reference"></data><data key="text">Object[]</data><data key="type">ArrayType</data><data key="parentType">Parameter</data></node><node id="395"><data key="reference"></data><data key="text">Object</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayType</data></node><node id="396"><data key="reference">nonQualifiedClassName</data><data key="identifier">Object</data><data key="text">Object</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="397"><data key="reference">java.lang.Object[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="398"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="399"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="50"><data key="reference"></data><data key="modifier">private</data><data key="text">private Map&lt;String, Map&lt;String, Map&lt;String, Method&gt;&gt;&gt; classMaps = new HashMap&lt;String, Map&lt;String, Map&lt;String, Method&gt;&gt;&gt;();</data><data key="type">FieldDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="51"><data key="reference"></data><data key="text">classMaps = new HashMap&lt;String, Map&lt;String, Map&lt;String, Method&gt;&gt;&gt;()</data><data key="type">VariableDeclarator</data><data key="parentType">FieldDeclaration</data></node><node id="52"><data key="reference"></data><data key="text">Map&lt;String, Map&lt;String, Map&lt;String, Method&gt;&gt;&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="53"><data key="reference">nonQualifiedClassName</data><data key="identifier">Map</data><data key="text">Map</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="54"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="55"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="56"><data key="reference"></data><data key="text">Map&lt;String, Map&lt;String, Method&gt;&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="57"><data key="reference">nonQualifiedClassName</data><data key="identifier">Map</data><data key="text">Map</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="58"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="59"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="60"><data key="reference"></data><data key="text">Map&lt;String, Method&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="61"><data key="reference">nonQualifiedClassName</data><data key="identifier">Map</data><data key="text">Map</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="62"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="63"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="64"><data key="reference"></data><data key="text">Method</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="65"><data key="reference">nonQualifiedClassName</data><data key="identifier">Method</data><data key="text">Method</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="66"><data key="reference">java.util.Map</data><data key="identifier">classMaps</data><data key="text">classMaps</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="67"><data key="reference"></data><data key="text">new HashMap&lt;String, Map&lt;String, Map&lt;String, Method&gt;&gt;&gt;()</data><data key="type">ObjectCreationExpr</data><data key="parentType">VariableDeclarator</data></node><node id="68"><data key="reference"></data><data key="text">HashMap&lt;String, Map&lt;String, Map&lt;String, Method&gt;&gt;&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="69"><data key="reference">nonQualifiedClassName</data><data key="identifier">HashMap</data><data key="text">HashMap</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="70"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="71"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="72"><data key="reference"></data><data key="text">Map&lt;String, Map&lt;String, Method&gt;&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="73"><data key="reference">nonQualifiedClassName</data><data key="identifier">Map</data><data key="text">Map</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="74"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="75"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="76"><data key="reference"></data><data key="text">Map&lt;String, Method&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="77"><data key="reference">nonQualifiedClassName</data><data key="identifier">Map</data><data key="text">Map</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="78"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="79"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1602"><data key="reference"></data><data key="text">for (Method cand : cands) {
    String name = cand.getName();
    if (!methodName.equals(name)) {
        continue;
    }
    Class[] types = cand.getParameterTypes();
    if (params.length != types.length) {
        continue;
    }
    for (int j = 0, len2 = params.length; j &lt; len2; j++) {
        if (!types[j].isAssignableFrom(params[j])) {
            continue;
        }
    }
    // we got it, so store it!
    method = cand;
    methodMap.put(paramKey, method);
}</data><data key="type">ForeachStmt</data><data key="parentType">BlockStmt</data></node><node id="1601"><data key="reference">otherMethodCall</data><data key="identifier">getMethods</data><data key="text">getMethods</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1600"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="80"><data key="reference"></data><data key="text">Method</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="81"><data key="reference">nonQualifiedClassName</data><data key="identifier">Method</data><data key="text">Method</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1609"><data key="reference"></data><data key="text">{
    String name = cand.getName();
    if (!methodName.equals(name)) {
        continue;
    }
    Class[] types = cand.getParameterTypes();
    if (params.length != types.length) {
        continue;
    }
    for (int j = 0, len2 = params.length; j &lt; len2; j++) {
        if (!types[j].isAssignableFrom(params[j])) {
            continue;
        }
    }
    // we got it, so store it!
    method = cand;
    methodMap.put(paramKey, method);
}</data><data key="type">BlockStmt</data><data key="parentType">ForeachStmt</data></node><node id="82"><data key="reference"></data><data key="modifier">public</data><data key="text">/**
 * Ensure no instances of Reflector are created...this is a utility.
 */
public Reflector() {
}</data><data key="type">ConstructorDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="1608"><data key="reference">java.lang.reflect.Method[]</data><data key="identifier">cands</data><data key="text">cands</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="83"><data key="reference">userDefinedMethodName</data><data key="identifier">Reflector</data><data key="text">Reflector</data><data key="type">SimpleName</data><data key="parentType">ConstructorDeclaration</data></node><node id="1607"><data key="reference">java.lang.reflect.Method</data><data key="identifier">cand</data><data key="text">cand</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="84"><data key="reference"></data><data key="text">{
}</data><data key="type">BlockStmt</data><data key="parentType">ConstructorDeclaration</data></node><node id="1606"><data key="reference">nonQualifiedClassName</data><data key="identifier">Method</data><data key="text">Method</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="85"><data key="reference"></data><data key="modifier">public</data><data key="text">/**
 * Create a new instance of a class, given the array of parameters... Uses constructor caching to find a constructor
 * that matches the parameter types, either specifically (first choice) or abstractly...
 *
 * @param theClass The class to instantiate
 * @param params The parameters to pass to the constructor
 * @return The instantiated object
 * @throws ReflectorException In case anything goes wrong here...
 */
@SuppressWarnings({ "UnusedDeclaration" })
public &lt;T&gt; T newInstance(Class&lt;T&gt; theClass, Object[] params) throws ReflectorException {
    if (params == null) {
        params = new Object[0];
    }
    Class[] paramTypes = new Class[params.length];
    for (int i = 0, len = params.length; i &lt; len; i++) {
        paramTypes[i] = params[i].getClass();
    }
    try {
        Constructor&lt;T&gt; con = getConstructor(theClass, paramTypes);
        if (con == null) {
            StringBuilder buffer = new StringBuilder();
            buffer.append("Constructor not found for class: ");
            buffer.append(theClass.getName());
            buffer.append(" with specified or ancestor parameter classes: ");
            for (Class paramType : paramTypes) {
                buffer.append(paramType.getName());
                buffer.append(',');
            }
            buffer.setLength(buffer.length() - 1);
            throw new ReflectorException(buffer.toString());
        }
        return con.newInstance(params);
    } catch (InstantiationException ex) {
        throw new ReflectorException(ex);
    } catch (InvocationTargetException ex) {
        throw new ReflectorException(ex);
    } catch (IllegalAccessException ex) {
        throw new ReflectorException(ex);
    }
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="1605"><data key="reference"></data><data key="text">Method</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="86"><data key="reference"></data><data key="text">@SuppressWarnings({ "UnusedDeclaration" })</data><data key="type">SingleMemberAnnotationExpr</data><data key="parentType">MethodDeclaration</data></node><node id="1604"><data key="reference"></data><data key="text">cand</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="87"><data key="reference"></data><data key="identifier">SuppressWarnings</data><data key="text">SuppressWarnings</data><data key="type">Name</data><data key="parentType">SingleMemberAnnotationExpr</data></node><node id="1603"><data key="reference"></data><data key="modifier"></data><data key="text">Method cand</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForeachStmt</data></node><node id="88"><data key="reference"></data><data key="text">{ "UnusedDeclaration" }</data><data key="type">ArrayInitializerExpr</data><data key="parentType">SingleMemberAnnotationExpr</data></node><node id="89"><data key="reference"></data><data key="identifier">UnusedDeclaration</data><data key="text">"UnusedDeclaration"</data><data key="type">StringLiteralExpr</data><data key="parentType">ArrayInitializerExpr</data></node><node id="1613"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1612"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1611"><data key="reference"></data><data key="text">name = cand.getName()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1610"><data key="reference"></data><data key="modifier"></data><data key="text">String name = cand.getName()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="90"><data key="reference"></data><data key="text">T</data><data key="type">TypeParameter</data><data key="parentType">MethodDeclaration</data></node><node id="91"><data key="reference">runtimeGenericType</data><data key="identifier">T</data><data key="text">T</data><data key="type">SimpleName</data><data key="parentType">TypeParameter</data></node><node id="92"><data key="reference">userDefinedMethodName</data><data key="identifier">newInstance</data><data key="text">newInstance</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="93"><data key="reference"></data><data key="modifier"></data><data key="text">Class&lt;T&gt; theClass</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="1619"><data key="reference"></data><data key="text">!methodName.equals(name)</data><data key="type">UnaryExpr</data><data key="parentType">IfStmt</data></node><node id="94"><data key="reference"></data><data key="text">Class&lt;T&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1618"><data key="reference"></data><data key="text">if (!methodName.equals(name)) {
    continue;
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="95"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1617"><data key="reference">otherMethodCall</data><data key="identifier">getName</data><data key="text">getName</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="96"><data key="reference"></data><data key="text">T</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1616"><data key="reference">java.lang.reflect.Method</data><data key="identifier">cand</data><data key="text">cand</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="97"><data key="reference">nonQualifiedClassName</data><data key="identifier">T</data><data key="text">T</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1615"><data key="reference"></data><data key="text">cand.getName()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="98"><data key="reference">java.lang.Class</data><data key="identifier">theClass</data><data key="text">theClass</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1614"><data key="reference">java.lang.String</data><data key="identifier">name</data><data key="text">name</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="99"><data key="reference"></data><data key="modifier"></data><data key="text">Object[] params</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="1624"><data key="reference"></data><data key="text">{
    continue;
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1623"><data key="reference">java.lang.String</data><data key="identifier">name</data><data key="text">name</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1622"><data key="reference">otherMethodCall</data><data key="identifier">equals</data><data key="text">equals</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1621"><data key="reference">java.lang.String</data><data key="identifier">methodName</data><data key="text">methodName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1620"><data key="reference"></data><data key="text">methodName.equals(name)</data><data key="type">MethodCallExpr</data><data key="parentType">UnaryExpr</data></node><node id="1629"><data key="reference"></data><data key="text">Class</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayType</data></node><node id="1628"><data key="reference"></data><data key="text">Class[]</data><data key="type">ArrayType</data><data key="parentType">VariableDeclarator</data></node><node id="1627"><data key="reference"></data><data key="text">types = cand.getParameterTypes()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1626"><data key="reference"></data><data key="modifier"></data><data key="text">Class[] types = cand.getParameterTypes()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1625"><data key="reference"></data><data key="text">continue;</data><data key="type">ContinueStmt</data><data key="parentType">BlockStmt</data></node><node id="1635"><data key="reference"></data><data key="text">if (params.length != types.length) {
    continue;
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1634"><data key="reference">otherMethodCall</data><data key="identifier">getParameterTypes</data><data key="text">getParameterTypes</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1633"><data key="reference">java.lang.reflect.Method</data><data key="identifier">cand</data><data key="text">cand</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1632"><data key="reference"></data><data key="text">cand.getParameterTypes()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1631"><data key="reference">java.lang.Class[]</data><data key="identifier">types</data><data key="text">types</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1630"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1639"><data key="reference">int</data><data key="identifier">length</data><data key="text">length</data><data key="type">SimpleName</data><data key="parentType">FieldAccessExpr</data></node><node id="1638"><data key="reference">java.lang.Class[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1637"><data key="reference"></data><data key="text">params.length</data><data key="type">FieldAccessExpr</data><data key="parentType">BinaryExpr</data></node><node id="1636"><data key="reference"></data><data key="text">params.length != types.length</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="1646"><data key="reference"></data><data key="modifier"></data><data key="text">int j = 0, len2 = params.length</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForStmt</data></node><node id="1645"><data key="reference"></data><data key="text">for (int j = 0, len2 = params.length; j &lt; len2; j++) {
    if (!types[j].isAssignableFrom(params[j])) {
        continue;
    }
}</data><data key="type">ForStmt</data><data key="parentType">BlockStmt</data></node><node id="1644"><data key="reference"></data><data key="text">continue;</data><data key="type">ContinueStmt</data><data key="parentType">BlockStmt</data></node><node id="1643"><data key="reference"></data><data key="text">{
    continue;
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1642"><data key="reference">int</data><data key="identifier">length</data><data key="text">length</data><data key="type">SimpleName</data><data key="parentType">FieldAccessExpr</data></node><node id="1641"><data key="reference">java.lang.Class[]</data><data key="identifier">types</data><data key="text">types</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1640"><data key="reference"></data><data key="text">types.length</data><data key="type">FieldAccessExpr</data><data key="parentType">BinaryExpr</data></node><node id="1649"><data key="reference">int</data><data key="identifier">j</data><data key="text">j</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1648"><data key="reference"></data><data key="identifier">int</data><data key="text">int</data><data key="type">PrimitiveType</data><data key="parentType">VariableDeclarator</data></node><node id="1647"><data key="reference"></data><data key="text">j = 0</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1660"><data key="reference"></data><data key="text">j++</data><data key="type">UnaryExpr</data><data key="parentType">ForStmt</data></node><node id="1657"><data key="reference"></data><data key="text">j &lt; len2</data><data key="type">BinaryExpr</data><data key="parentType">ForStmt</data></node><node id="1656"><data key="reference">int</data><data key="identifier">length</data><data key="text">length</data><data key="type">SimpleName</data><data key="parentType">FieldAccessExpr</data></node><node id="1655"><data key="reference">java.lang.Class[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1654"><data key="reference"></data><data key="text">params.length</data><data key="type">FieldAccessExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1653"><data key="reference">int</data><data key="identifier">len2</data><data key="text">len2</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1652"><data key="reference"></data><data key="identifier">int</data><data key="text">int</data><data key="type">PrimitiveType</data><data key="parentType">VariableDeclarator</data></node><node id="1651"><data key="reference"></data><data key="text">len2 = params.length</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1650"><data key="reference"></data><data key="identifier">0</data><data key="text">0</data><data key="type">IntegerLiteralExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1659"><data key="reference">int</data><data key="identifier">len2</data><data key="text">len2</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1658"><data key="reference">int</data><data key="identifier">j</data><data key="text">j</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1671"><data key="reference">java.lang.Class[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1670"><data key="reference"></data><data key="text">params[j]</data><data key="type">ArrayAccessExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1668"><data key="reference">int</data><data key="identifier">j</data><data key="text">j</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1667"><data key="reference">java.lang.Class[]</data><data key="identifier">types</data><data key="text">types</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1666"><data key="reference"></data><data key="text">types[j]</data><data key="type">ArrayAccessExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1665"><data key="reference"></data><data key="text">types[j].isAssignableFrom(params[j])</data><data key="type">MethodCallExpr</data><data key="parentType">UnaryExpr</data></node><node id="1664"><data key="reference"></data><data key="text">!types[j].isAssignableFrom(params[j])</data><data key="type">UnaryExpr</data><data key="parentType">IfStmt</data></node><node id="1663"><data key="reference"></data><data key="text">if (!types[j].isAssignableFrom(params[j])) {
    continue;
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1662"><data key="reference"></data><data key="text">{
    if (!types[j].isAssignableFrom(params[j])) {
        continue;
    }
}</data><data key="type">BlockStmt</data><data key="parentType">ForStmt</data></node><node id="1661"><data key="reference">int</data><data key="identifier">j</data><data key="text">j</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1669"><data key="reference">otherMethodCall</data><data key="identifier">isAssignableFrom</data><data key="text">isAssignableFrom</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1682"><data key="reference">java.lang.reflect.Method</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1681"><data key="reference">java.lang.String</data><data key="identifier">paramKey</data><data key="text">paramKey</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1680"><data key="reference">otherMethodCall</data><data key="identifier">put</data><data key="text">put</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1679"><data key="reference">java.util.Map</data><data key="identifier">methodMap</data><data key="text">methodMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1678"><data key="reference"></data><data key="text">methodMap.put(paramKey, method)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1677"><data key="reference">java.lang.reflect.Method</data><data key="identifier">cand</data><data key="text">cand</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1676"><data key="reference">java.lang.reflect.Method</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1675"><data key="reference"></data><data key="identifier">=</data><data key="text">method = cand</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1674"><data key="reference"></data><data key="text">continue;</data><data key="type">ContinueStmt</data><data key="parentType">BlockStmt</data></node><node id="1673"><data key="reference"></data><data key="text">{
    continue;
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1672"><data key="reference">int</data><data key="identifier">j</data><data key="text">j</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1693"><data key="reference">nonQualifiedClassName</data><data key="identifier">T</data><data key="text">T</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1692"><data key="reference"></data><data key="text">T</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1691"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1690"><data key="reference"></data><data key="text">Class&lt;T&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1206"><data key="reference">java.lang.String</data><data key="identifier">propertyName</data><data key="text">propertyName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1205"><data key="reference"></data><data key="text">propertyName.trim()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1689"><data key="reference"></data><data key="modifier"></data><data key="text">Class&lt;T&gt; theClass</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="1204"><data key="reference"></data><data key="text">propertyName.trim().length()</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="1688"><data key="reference">userDefinedMethodName</data><data key="identifier">getConstructorMap</data><data key="text">getConstructorMap</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="1203"><data key="reference"></data><data key="text">propertyName.trim().length() &lt; 1</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="1687"><data key="reference">runtimeGenericType</data><data key="identifier">T</data><data key="text">T</data><data key="type">SimpleName</data><data key="parentType">TypeParameter</data></node><node id="1202"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1686"><data key="reference"></data><data key="text">T</data><data key="type">TypeParameter</data><data key="parentType">MethodDeclaration</data></node><node id="1201"><data key="reference">java.lang.String</data><data key="identifier">propertyName</data><data key="text">propertyName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1685"><data key="reference"></data><data key="modifier">private</data><data key="text">/**
 * Retrieve the cache of constructors for the specified class.
 *
 * @param theClass the class to lookup.
 * @return The cache of constructors.
 * @throws ReflectorException in case of a lookup error.
 */
private &lt;T&gt; Map&lt;String, Constructor&lt;T&gt;&gt; getConstructorMap(Class&lt;T&gt; theClass) throws ReflectorException {
    return (Map&lt;String, Constructor&lt;T&gt;&gt;) getMethodMap(theClass, CONSTRUCTOR_METHOD_NAME);
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="1200"><data key="reference"></data><data key="text">propertyName == null</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="1684"><data key="reference">java.lang.reflect.Method</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1683"><data key="reference"></data><data key="text">return method;</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="1209"><data key="reference"></data><data key="identifier">1</data><data key="text">1</data><data key="type">IntegerLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1208"><data key="reference">otherMethodCall</data><data key="identifier">length</data><data key="text">length</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1207"><data key="reference">otherMethodCall</data><data key="identifier">trim</data><data key="text">trim</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1220"><data key="reference">java.lang.String</data><data key="identifier">beanAccessor</data><data key="text">beanAccessor</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1217"><data key="reference"></data><data key="text">beanAccessor = "get" + Character.toUpperCase(propertyName.charAt(0))</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1216"><data key="reference"></data><data key="modifier"></data><data key="text">String beanAccessor = "get" + Character.toUpperCase(propertyName.charAt(0))</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1215"><data key="reference"></data><data key="identifier">Cannot retrieve value for empty property.</data><data key="text">"Cannot retrieve value for empty property."</data><data key="type">StringLiteralExpr</data><data key="parentType">ObjectCreationExpr</data></node><node id="1699"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1214"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1698"><data key="reference">nonQualifiedClassName</data><data key="identifier">Map</data><data key="text">Map</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1213"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="1697"><data key="reference"></data><data key="text">Map&lt;String, Constructor&lt;T&gt;&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="1212"><data key="reference"></data><data key="text">new ReflectorException("Cannot retrieve value for empty property.")</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="1696"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1211"><data key="reference"></data><data key="text">throw new ReflectorException("Cannot retrieve value for empty property.");</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="1695"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="1210"><data key="reference"></data><data key="text">{
    throw new ReflectorException("Cannot retrieve value for empty property.");
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1694"><data key="reference">java.lang.Class</data><data key="identifier">theClass</data><data key="text">theClass</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1219"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1218"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1231"><data key="reference"></data><data key="text">propertyName.trim().length() &gt; 1</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="1230"><data key="reference"></data><data key="text">if (propertyName.trim().length() &gt; 1) {
    beanAccessor += propertyName.substring(1).trim();
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1228"><data key="reference">otherMethodCall</data><data key="identifier">charAt</data><data key="text">charAt</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1227"><data key="reference">java.lang.String</data><data key="identifier">propertyName</data><data key="text">propertyName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1226"><data key="reference"></data><data key="text">propertyName.charAt(0)</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1225"><data key="reference">otherMethodCall</data><data key="identifier">toUpperCase</data><data key="text">toUpperCase</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1224"><data key="reference">UnknownType</data><data key="identifier">Character</data><data key="text">Character</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1223"><data key="reference"></data><data key="text">Character.toUpperCase(propertyName.charAt(0))</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="1222"><data key="reference"></data><data key="identifier">get</data><data key="text">"get"</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1221"><data key="reference"></data><data key="text">"get" + Character.toUpperCase(propertyName.charAt(0))</data><data key="type">BinaryExpr</data><data key="parentType">VariableDeclarator</data></node><node id="800"><data key="reference">nonQualifiedClassName</data><data key="identifier">Object</data><data key="text">Object</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="801"><data key="reference">java.lang.Object[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="802"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="803"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="804"><data key="reference"></data><data key="text">Object</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="805"><data key="reference">nonQualifiedClassName</data><data key="identifier">Object</data><data key="text">Object</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="806"><data key="reference"></data><data key="text">{
    if (params == null) {
        params = new Object[0];
    }
    Class[] paramTypes = new Class[params.length];
    for (int i = 0, len = params.length; i &lt; len; i++) {
        paramTypes[i] = params[i].getClass();
    }
    try {
        Method method = getMethod(targetClass, methodName, paramTypes);
        if (method == null) {
            StringBuilder buffer = new StringBuilder();
            buffer.append("Singleton-producing method named \'").append(methodName).append("\' not found with specified parameter classes: ");
            for (Class paramType : paramTypes) {
                buffer.append(paramType.getName());
                buffer.append(',');
            }
            buffer.setLength(buffer.length() - 1);
            throw new ReflectorException(buffer.toString());
        }
        return method.invoke(null, params);
    } catch (InvocationTargetException ex) {
        throw new ReflectorException(ex);
    } catch (IllegalAccessException ex) {
        throw new ReflectorException(ex);
    }
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="807"><data key="reference"></data><data key="text">if (params == null) {
    params = new Object[0];
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1229"><data key="reference"></data><data key="identifier">0</data><data key="text">0</data><data key="type">IntegerLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="808"><data key="reference"></data><data key="text">params == null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="809"><data key="reference">java.lang.Object[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1242"><data key="reference"></data><data key="text">propertyName.substring(1)</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1241"><data key="reference"></data><data key="text">propertyName.substring(1).trim()</data><data key="type">MethodCallExpr</data><data key="parentType">AssignExpr</data></node><node id="1240"><data key="reference">java.lang.String</data><data key="identifier">beanAccessor</data><data key="text">beanAccessor</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1239"><data key="reference"></data><data key="identifier">+=</data><data key="text">beanAccessor += propertyName.substring(1).trim()</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1238"><data key="reference"></data><data key="text">{
    beanAccessor += propertyName.substring(1).trim();
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1237"><data key="reference"></data><data key="identifier">1</data><data key="text">1</data><data key="type">IntegerLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1236"><data key="reference">otherMethodCall</data><data key="identifier">length</data><data key="text">length</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1235"><data key="reference">otherMethodCall</data><data key="identifier">trim</data><data key="text">trim</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1234"><data key="reference">java.lang.String</data><data key="identifier">propertyName</data><data key="text">propertyName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1233"><data key="reference"></data><data key="text">propertyName.trim()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="810"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1232"><data key="reference"></data><data key="text">propertyName.trim().length()</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="811"><data key="reference"></data><data key="text">{
    params = new Object[0];
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="812"><data key="reference"></data><data key="identifier">=</data><data key="text">params = new Object[0]</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="813"><data key="reference">java.lang.Object[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="814"><data key="reference"></data><data key="text">new Object[0]</data><data key="type">ArrayCreationExpr</data><data key="parentType">AssignExpr</data></node><node id="815"><data key="reference"></data><data key="text">Object</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayCreationExpr</data></node><node id="816"><data key="reference">nonQualifiedClassName</data><data key="identifier">Object</data><data key="text">Object</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="817"><data key="reference"></data><data key="text">[0]</data><data key="type">ArrayCreationLevel</data><data key="parentType">ArrayCreationExpr</data></node><node id="818"><data key="reference"></data><data key="identifier">0</data><data key="text">0</data><data key="type">IntegerLiteralExpr</data><data key="parentType">ArrayCreationLevel</data></node><node id="819"><data key="reference"></data><data key="modifier"></data><data key="text">Class[] paramTypes = new Class[params.length]</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1253"><data key="reference">java.lang.Object</data><data key="identifier">target</data><data key="text">target</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1252"><data key="reference"></data><data key="text">target.getClass()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1251"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1250"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1249"><data key="reference"></data><data key="text">Class</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1248"><data key="reference"></data><data key="text">targetClass = target.getClass()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1247"><data key="reference"></data><data key="modifier"></data><data key="text">Class targetClass = target.getClass()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1246"><data key="reference">otherMethodCall</data><data key="identifier">trim</data><data key="text">trim</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1245"><data key="reference"></data><data key="identifier">1</data><data key="text">1</data><data key="type">IntegerLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="820"><data key="reference"></data><data key="text">paramTypes = new Class[params.length]</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1244"><data key="reference">otherMethodCall</data><data key="identifier">substring</data><data key="text">substring</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="821"><data key="reference"></data><data key="text">Class[]</data><data key="type">ArrayType</data><data key="parentType">VariableDeclarator</data></node><node id="1243"><data key="reference">java.lang.String</data><data key="identifier">propertyName</data><data key="text">propertyName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="822"><data key="reference"></data><data key="text">Class</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayType</data></node><node id="823"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="824"><data key="reference">java.lang.Class[]</data><data key="identifier">paramTypes</data><data key="text">paramTypes</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="825"><data key="reference"></data><data key="text">new Class[params.length]</data><data key="type">ArrayCreationExpr</data><data key="parentType">VariableDeclarator</data></node><node id="826"><data key="reference"></data><data key="text">Class</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayCreationExpr</data></node><node id="827"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="828"><data key="reference"></data><data key="text">[params.length]</data><data key="type">ArrayCreationLevel</data><data key="parentType">ArrayCreationExpr</data></node><node id="829"><data key="reference"></data><data key="text">params.length</data><data key="type">FieldAccessExpr</data><data key="parentType">ArrayCreationLevel</data></node><node id="1264"><data key="reference"></data><data key="text">Method</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1263"><data key="reference"></data><data key="text">method = _getMethod(targetClass, beanAccessor, emptyParams)</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1262"><data key="reference"></data><data key="modifier"></data><data key="text">Method method = _getMethod(targetClass, beanAccessor, emptyParams)</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1261"><data key="reference"></data><data key="text">{}</data><data key="type">ArrayInitializerExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1260"><data key="reference">java.lang.Class[]</data><data key="identifier">emptyParams</data><data key="text">emptyParams</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1259"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1258"><data key="reference"></data><data key="text">Class</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayType</data></node><node id="1257"><data key="reference"></data><data key="text">Class[]</data><data key="type">ArrayType</data><data key="parentType">VariableDeclarator</data></node><node id="830"><data key="reference">java.lang.Object[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1256"><data key="reference"></data><data key="text">emptyParams = {}</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="831"><data key="reference">int</data><data key="identifier">length</data><data key="text">length</data><data key="type">SimpleName</data><data key="parentType">FieldAccessExpr</data></node><node id="1255"><data key="reference"></data><data key="modifier"></data><data key="text">Class[] emptyParams = {}</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="832"><data key="reference"></data><data key="text">for (int i = 0, len = params.length; i &lt; len; i++) {
    paramTypes[i] = params[i].getClass();
}</data><data key="type">ForStmt</data><data key="parentType">BlockStmt</data></node><node id="1254"><data key="reference">otherMethodCall</data><data key="identifier">getClass</data><data key="text">getClass</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="833"><data key="reference"></data><data key="modifier"></data><data key="text">int i = 0, len = params.length</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForStmt</data></node><node id="834"><data key="reference"></data><data key="text">i = 0</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="835"><data key="reference"></data><data key="identifier">int</data><data key="text">int</data><data key="type">PrimitiveType</data><data key="parentType">VariableDeclarator</data></node><node id="836"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="837"><data key="reference"></data><data key="identifier">0</data><data key="text">0</data><data key="type">IntegerLiteralExpr</data><data key="parentType">VariableDeclarator</data></node><node id="838"><data key="reference"></data><data key="text">len = params.length</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="839"><data key="reference"></data><data key="identifier">int</data><data key="text">int</data><data key="type">PrimitiveType</data><data key="parentType">VariableDeclarator</data></node><node id="1275"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1274"><data key="reference">java.lang.reflect.Method</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1273"><data key="reference"></data><data key="text">method == null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="1272"><data key="reference"></data><data key="text">if (method == null) {
    method = _getMethod(targetClass, propertyName, emptyParams);
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1271"><data key="reference">java.lang.Class[]</data><data key="identifier">emptyParams</data><data key="text">emptyParams</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1270"><data key="reference">java.lang.String</data><data key="identifier">beanAccessor</data><data key="text">beanAccessor</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1269"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="840"><data key="reference">int</data><data key="identifier">len</data><data key="text">len</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1268"><data key="reference">otherMethodCall</data><data key="identifier">_getMethod</data><data key="text">_getMethod</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="841"><data key="reference"></data><data key="text">params.length</data><data key="type">FieldAccessExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1267"><data key="reference"></data><data key="text">_getMethod(targetClass, beanAccessor, emptyParams)</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="842"><data key="reference">java.lang.Object[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1266"><data key="reference">java.lang.reflect.Method</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="843"><data key="reference">int</data><data key="identifier">length</data><data key="text">length</data><data key="type">SimpleName</data><data key="parentType">FieldAccessExpr</data></node><node id="1265"><data key="reference">nonQualifiedClassName</data><data key="identifier">Method</data><data key="text">Method</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="844"><data key="reference"></data><data key="text">i &lt; len</data><data key="type">BinaryExpr</data><data key="parentType">ForStmt</data></node><node id="845"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="846"><data key="reference">int</data><data key="identifier">len</data><data key="text">len</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="847"><data key="reference"></data><data key="text">i++</data><data key="type">UnaryExpr</data><data key="parentType">ForStmt</data></node><node id="848"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="849"><data key="reference"></data><data key="text">{
    paramTypes[i] = params[i].getClass();
}</data><data key="type">BlockStmt</data><data key="parentType">ForStmt</data></node><node id="1286"><data key="reference">java.lang.reflect.Method</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1285"><data key="reference"></data><data key="text">method != null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="1284"><data key="reference"></data><data key="text">if (method != null) {
    try {
        returnValue = method.invoke(target, new Object[] {});
    } catch (IllegalAccessException e) {
        throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
    } catch (InvocationTargetException e) {
        throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
    }
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1283"><data key="reference">java.lang.Class[]</data><data key="identifier">emptyParams</data><data key="text">emptyParams</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1282"><data key="reference">java.lang.String</data><data key="identifier">propertyName</data><data key="text">propertyName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1281"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1280"><data key="reference">otherMethodCall</data><data key="identifier">_getMethod</data><data key="text">_getMethod</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="850"><data key="reference"></data><data key="identifier">=</data><data key="text">paramTypes[i] = params[i].getClass()</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="851"><data key="reference"></data><data key="text">paramTypes[i]</data><data key="type">ArrayAccessExpr</data><data key="parentType">AssignExpr</data></node><node id="1279"><data key="reference"></data><data key="text">_getMethod(targetClass, propertyName, emptyParams)</data><data key="type">MethodCallExpr</data><data key="parentType">AssignExpr</data></node><node id="852"><data key="reference">java.lang.Class[]</data><data key="identifier">paramTypes</data><data key="text">paramTypes</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1278"><data key="reference">java.lang.reflect.Method</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="853"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1277"><data key="reference"></data><data key="identifier">=</data><data key="text">method = _getMethod(targetClass, propertyName, emptyParams)</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="854"><data key="reference"></data><data key="text">params[i].getClass()</data><data key="type">MethodCallExpr</data><data key="parentType">AssignExpr</data></node><node id="1276"><data key="reference"></data><data key="text">{
    method = _getMethod(targetClass, propertyName, emptyParams);
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="855"><data key="reference"></data><data key="text">params[i]</data><data key="type">ArrayAccessExpr</data><data key="parentType">MethodCallExpr</data></node><node id="856"><data key="reference">java.lang.Object[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="857"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="858"><data key="reference">otherMethodCall</data><data key="identifier">getClass</data><data key="text">getClass</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="859"><data key="reference"></data><data key="text">try {
    Method method = getMethod(targetClass, methodName, paramTypes);
    if (method == null) {
        StringBuilder buffer = new StringBuilder();
        buffer.append("Singleton-producing method named \'").append(methodName).append("\' not found with specified parameter classes: ");
        for (Class paramType : paramTypes) {
            buffer.append(paramType.getName());
            buffer.append(',');
        }
        buffer.setLength(buffer.length() - 1);
        throw new ReflectorException(buffer.toString());
    }
    return method.invoke(null, params);
} catch (InvocationTargetException ex) {
    throw new ReflectorException(ex);
} catch (IllegalAccessException ex) {
    throw new ReflectorException(ex);
}</data><data key="type">TryStmt</data><data key="parentType">BlockStmt</data></node><node id="1297"><data key="reference"></data><data key="text">new Object[] {}</data><data key="type">ArrayCreationExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1296"><data key="reference">java.lang.Object</data><data key="identifier">target</data><data key="text">target</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1295"><data key="reference">otherMethodCall</data><data key="identifier">invoke</data><data key="text">invoke</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1294"><data key="reference">java.lang.reflect.Method</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1293"><data key="reference"></data><data key="text">method.invoke(target, new Object[] {})</data><data key="type">MethodCallExpr</data><data key="parentType">AssignExpr</data></node><node id="1292"><data key="reference">java.lang.Object</data><data key="identifier">returnValue</data><data key="text">returnValue</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1291"><data key="reference"></data><data key="identifier">=</data><data key="text">returnValue = method.invoke(target, new Object[] {})</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1290"><data key="reference"></data><data key="text">{
    returnValue = method.invoke(target, new Object[] {});
}</data><data key="type">BlockStmt</data><data key="parentType">TryStmt</data></node><node id="860"><data key="reference"></data><data key="text">{
    Method method = getMethod(targetClass, methodName, paramTypes);
    if (method == null) {
        StringBuilder buffer = new StringBuilder();
        buffer.append("Singleton-producing method named \'").append(methodName).append("\' not found with specified parameter classes: ");
        for (Class paramType : paramTypes) {
            buffer.append(paramType.getName());
            buffer.append(',');
        }
        buffer.setLength(buffer.length() - 1);
        throw new ReflectorException(buffer.toString());
    }
    return method.invoke(null, params);
}</data><data key="type">BlockStmt</data><data key="parentType">TryStmt</data></node><node id="861"><data key="reference"></data><data key="modifier"></data><data key="text">Method method = getMethod(targetClass, methodName, paramTypes)</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="862"><data key="reference"></data><data key="text">method = getMethod(targetClass, methodName, paramTypes)</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="863"><data key="reference"></data><data key="text">Method</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1289"><data key="reference"></data><data key="text">try {
    returnValue = method.invoke(target, new Object[] {});
} catch (IllegalAccessException e) {
    throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
} catch (InvocationTargetException e) {
    throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
}</data><data key="type">TryStmt</data><data key="parentType">BlockStmt</data></node><node id="864"><data key="reference">nonQualifiedClassName</data><data key="identifier">Method</data><data key="text">Method</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1288"><data key="reference"></data><data key="text">{
    try {
        returnValue = method.invoke(target, new Object[] {});
    } catch (IllegalAccessException e) {
        throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
    } catch (InvocationTargetException e) {
        throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
    }
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="865"><data key="reference">java.lang.reflect.Method</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1287"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="866"><data key="reference"></data><data key="text">getMethod(targetClass, methodName, paramTypes)</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="867"><data key="reference">otherMethodCall</data><data key="identifier">getMethod</data><data key="text">getMethod</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="868"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="869"><data key="reference">java.lang.String</data><data key="identifier">methodName</data><data key="text">methodName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="870"><data key="reference">java.lang.Class[]</data><data key="identifier">paramTypes</data><data key="text">paramTypes</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="871"><data key="reference"></data><data key="text">if (method == null) {
    StringBuilder buffer = new StringBuilder();
    buffer.append("Singleton-producing method named \'").append(methodName).append("\' not found with specified parameter classes: ");
    for (Class paramType : paramTypes) {
        buffer.append(paramType.getName());
        buffer.append(',');
    }
    buffer.setLength(buffer.length() - 1);
    throw new ReflectorException(buffer.toString());
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="872"><data key="reference"></data><data key="text">method == null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="873"><data key="reference">java.lang.reflect.Method</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="874"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="875"><data key="reference"></data><data key="text">{
    StringBuilder buffer = new StringBuilder();
    buffer.append("Singleton-producing method named \'").append(methodName).append("\' not found with specified parameter classes: ");
    for (Class paramType : paramTypes) {
        buffer.append(paramType.getName());
        buffer.append(',');
    }
    buffer.setLength(buffer.length() - 1);
    throw new ReflectorException(buffer.toString());
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1299"><data key="reference">nonQualifiedClassName</data><data key="identifier">Object</data><data key="text">Object</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="876"><data key="reference"></data><data key="modifier"></data><data key="text">StringBuilder buffer = new StringBuilder()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1298"><data key="reference"></data><data key="text">Object</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayCreationExpr</data></node><node id="877"><data key="reference"></data><data key="text">buffer = new StringBuilder()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="878"><data key="reference"></data><data key="text">StringBuilder</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="879"><data key="reference">nonQualifiedClassName</data><data key="identifier">StringBuilder</data><data key="text">StringBuilder</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="880"><data key="reference">java.lang.StringBuilder</data><data key="identifier">buffer</data><data key="text">buffer</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="881"><data key="reference"></data><data key="text">new StringBuilder()</data><data key="type">ObjectCreationExpr</data><data key="parentType">VariableDeclarator</data></node><node id="882"><data key="reference"></data><data key="text">StringBuilder</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="883"><data key="reference">nonQualifiedClassName</data><data key="identifier">StringBuilder</data><data key="text">StringBuilder</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="400"><data key="reference"></data><data key="text">Object</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="884"><data key="reference"></data><data key="text">buffer.append("Singleton-producing method named \'").append(methodName).append("\' not found with specified parameter classes: ")</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="401"><data key="reference">nonQualifiedClassName</data><data key="identifier">Object</data><data key="text">Object</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="885"><data key="reference"></data><data key="text">buffer.append("Singleton-producing method named \'").append(methodName)</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="402"><data key="reference"></data><data key="text">{
    if (params == null) {
        params = new Object[0];
    }
    Class[] paramTypes = new Class[params.length];
    for (int i = 0, len = params.length; i &lt; len; i++) {
        paramTypes[i] = params[i].getClass();
    }
    try {
        Method method = getMethod(target.getClass(), methodName, paramTypes);
        if (method == null) {
            StringBuilder buffer = new StringBuilder();
            buffer.append("Singleton-producing method named '").append(methodName).append("' not found with specified parameter classes: ");
            for (Class paramType : paramTypes) {
                buffer.append(paramType.getName());
                buffer.append(',');
            }
            buffer.setLength(buffer.length() - 1);
            throw new ReflectorException(buffer.toString());
        }
        return method.invoke(target, params);
    } catch (InvocationTargetException ex) {
        throw new ReflectorException(ex);
    } catch (IllegalAccessException ex) {
        throw new ReflectorException(ex);
    }
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="886"><data key="reference"></data><data key="text">buffer.append("Singleton-producing method named \'")</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="403"><data key="reference"></data><data key="text">if (params == null) {
    params = new Object[0];
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="887"><data key="reference">java.lang.StringBuilder</data><data key="identifier">buffer</data><data key="text">buffer</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="404"><data key="reference"></data><data key="text">params == null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="888"><data key="reference">otherMethodCall</data><data key="identifier">append</data><data key="text">append</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="405"><data key="reference">java.lang.Object[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="889"><data key="reference"></data><data key="identifier">Singleton-producing method named \'</data><data key="text">"Singleton-producing method named \'"</data><data key="type">StringLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="406"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="407"><data key="reference"></data><data key="text">{
    params = new Object[0];
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="408"><data key="reference"></data><data key="identifier">=</data><data key="text">params = new Object[0]</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="409"><data key="reference">java.lang.Object[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="890"><data key="reference">otherMethodCall</data><data key="identifier">append</data><data key="text">append</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="891"><data key="reference">java.lang.String</data><data key="identifier">methodName</data><data key="text">methodName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="892"><data key="reference">otherMethodCall</data><data key="identifier">append</data><data key="text">append</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="893"><data key="reference"></data><data key="identifier">\' not found with specified parameter classes: </data><data key="text">"\' not found with specified parameter classes: "</data><data key="type">StringLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="410"><data key="reference"></data><data key="text">new Object[0]</data><data key="type">ArrayCreationExpr</data><data key="parentType">AssignExpr</data></node><node id="894"><data key="reference"></data><data key="text">for (Class paramType : paramTypes) {
    buffer.append(paramType.getName());
    buffer.append(',');
}</data><data key="type">ForeachStmt</data><data key="parentType">BlockStmt</data></node><node id="411"><data key="reference"></data><data key="text">Object</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayCreationExpr</data></node><node id="895"><data key="reference"></data><data key="modifier"></data><data key="text">Class paramType</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForeachStmt</data></node><node id="412"><data key="reference">nonQualifiedClassName</data><data key="identifier">Object</data><data key="text">Object</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="896"><data key="reference"></data><data key="text">paramType</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="413"><data key="reference"></data><data key="text">[0]</data><data key="type">ArrayCreationLevel</data><data key="parentType">ArrayCreationExpr</data></node><node id="897"><data key="reference"></data><data key="text">Class</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="414"><data key="reference"></data><data key="identifier">0</data><data key="text">0</data><data key="type">IntegerLiteralExpr</data><data key="parentType">ArrayCreationLevel</data></node><node id="898"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="415"><data key="reference"></data><data key="modifier"></data><data key="text">Class[] paramTypes = new Class[params.length]</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="899"><data key="reference">java.lang.Class</data><data key="identifier">paramType</data><data key="text">paramType</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="416"><data key="reference"></data><data key="text">paramTypes = new Class[params.length]</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="417"><data key="reference"></data><data key="text">Class[]</data><data key="type">ArrayType</data><data key="parentType">VariableDeclarator</data></node><node id="418"><data key="reference"></data><data key="text">Class</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayType</data></node><node id="419"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="420"><data key="reference">java.lang.Class[]</data><data key="identifier">paramTypes</data><data key="text">paramTypes</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="421"><data key="reference"></data><data key="text">new Class[params.length]</data><data key="type">ArrayCreationExpr</data><data key="parentType">VariableDeclarator</data></node><node id="422"><data key="reference"></data><data key="text">Class</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayCreationExpr</data></node><node id="423"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="424"><data key="reference"></data><data key="text">[params.length]</data><data key="type">ArrayCreationLevel</data><data key="parentType">ArrayCreationExpr</data></node><node id="425"><data key="reference"></data><data key="text">params.length</data><data key="type">FieldAccessExpr</data><data key="parentType">ArrayCreationLevel</data></node><node id="426"><data key="reference">java.lang.Object[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="427"><data key="reference">int</data><data key="identifier">length</data><data key="text">length</data><data key="type">SimpleName</data><data key="parentType">FieldAccessExpr</data></node><node id="428"><data key="reference"></data><data key="text">for (int i = 0, len = params.length; i &lt; len; i++) {
    paramTypes[i] = params[i].getClass();
}</data><data key="type">ForStmt</data><data key="parentType">BlockStmt</data></node><node id="429"><data key="reference"></data><data key="modifier"></data><data key="text">int i = 0, len = params.length</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForStmt</data></node><node id="430"><data key="reference"></data><data key="text">i = 0</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="431"><data key="reference"></data><data key="identifier">int</data><data key="text">int</data><data key="type">PrimitiveType</data><data key="parentType">VariableDeclarator</data></node><node id="432"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="433"><data key="reference"></data><data key="identifier">0</data><data key="text">0</data><data key="type">IntegerLiteralExpr</data><data key="parentType">VariableDeclarator</data></node><node id="434"><data key="reference"></data><data key="text">len = params.length</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="435"><data key="reference"></data><data key="identifier">int</data><data key="text">int</data><data key="type">PrimitiveType</data><data key="parentType">VariableDeclarator</data></node><node id="436"><data key="reference">int</data><data key="identifier">len</data><data key="text">len</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="437"><data key="reference"></data><data key="text">params.length</data><data key="type">FieldAccessExpr</data><data key="parentType">VariableDeclarator</data></node><node id="438"><data key="reference">java.lang.Object[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="439"><data key="reference">int</data><data key="identifier">length</data><data key="text">length</data><data key="type">SimpleName</data><data key="parentType">FieldAccessExpr</data></node><node id="440"><data key="reference"></data><data key="text">i &lt; len</data><data key="type">BinaryExpr</data><data key="parentType">ForStmt</data></node><node id="441"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="442"><data key="reference">int</data><data key="identifier">len</data><data key="text">len</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="443"><data key="reference"></data><data key="text">i++</data><data key="type">UnaryExpr</data><data key="parentType">ForStmt</data></node><node id="444"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="445"><data key="reference"></data><data key="text">{
    paramTypes[i] = params[i].getClass();
}</data><data key="type">BlockStmt</data><data key="parentType">ForStmt</data></node><node id="446"><data key="reference"></data><data key="identifier">=</data><data key="text">paramTypes[i] = params[i].getClass()</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="447"><data key="reference"></data><data key="text">paramTypes[i]</data><data key="type">ArrayAccessExpr</data><data key="parentType">AssignExpr</data></node><node id="448"><data key="reference">java.lang.Class[]</data><data key="identifier">paramTypes</data><data key="text">paramTypes</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="449"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="450"><data key="reference"></data><data key="text">params[i].getClass()</data><data key="type">MethodCallExpr</data><data key="parentType">AssignExpr</data></node><node id="451"><data key="reference"></data><data key="text">params[i]</data><data key="type">ArrayAccessExpr</data><data key="parentType">MethodCallExpr</data></node><node id="452"><data key="reference">java.lang.Object[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="453"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="454"><data key="reference">otherMethodCall</data><data key="identifier">getClass</data><data key="text">getClass</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="455"><data key="reference"></data><data key="text">try {
    Method method = getMethod(target.getClass(), methodName, paramTypes);
    if (method == null) {
        StringBuilder buffer = new StringBuilder();
        buffer.append("Singleton-producing method named '").append(methodName).append("' not found with specified parameter classes: ");
        for (Class paramType : paramTypes) {
            buffer.append(paramType.getName());
            buffer.append(',');
        }
        buffer.setLength(buffer.length() - 1);
        throw new ReflectorException(buffer.toString());
    }
    return method.invoke(target, params);
} catch (InvocationTargetException ex) {
    throw new ReflectorException(ex);
} catch (IllegalAccessException ex) {
    throw new ReflectorException(ex);
}</data><data key="type">TryStmt</data><data key="parentType">BlockStmt</data></node><node id="456"><data key="reference"></data><data key="text">{
    Method method = getMethod(target.getClass(), methodName, paramTypes);
    if (method == null) {
        StringBuilder buffer = new StringBuilder();
        buffer.append("Singleton-producing method named '").append(methodName).append("' not found with specified parameter classes: ");
        for (Class paramType : paramTypes) {
            buffer.append(paramType.getName());
            buffer.append(',');
        }
        buffer.setLength(buffer.length() - 1);
        throw new ReflectorException(buffer.toString());
    }
    return method.invoke(target, params);
}</data><data key="type">BlockStmt</data><data key="parentType">TryStmt</data></node><node id="457"><data key="reference"></data><data key="modifier"></data><data key="text">Method method = getMethod(target.getClass(), methodName, paramTypes)</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="458"><data key="reference"></data><data key="text">method = getMethod(target.getClass(), methodName, paramTypes)</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="459"><data key="reference"></data><data key="text">Method</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="460"><data key="reference">nonQualifiedClassName</data><data key="identifier">Method</data><data key="text">Method</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="461"><data key="reference">java.lang.reflect.Method</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="462"><data key="reference"></data><data key="text">getMethod(target.getClass(), methodName, paramTypes)</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="463"><data key="reference">otherMethodCall</data><data key="identifier">getMethod</data><data key="text">getMethod</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="464"><data key="reference"></data><data key="text">target.getClass()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="465"><data key="reference">java.lang.Object</data><data key="identifier">target</data><data key="text">target</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="466"><data key="reference">otherMethodCall</data><data key="identifier">getClass</data><data key="text">getClass</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="467"><data key="reference">java.lang.String</data><data key="identifier">methodName</data><data key="text">methodName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="468"><data key="reference">java.lang.Class[]</data><data key="identifier">paramTypes</data><data key="text">paramTypes</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="469"><data key="reference"></data><data key="text">if (method == null) {
    StringBuilder buffer = new StringBuilder();
    buffer.append("Singleton-producing method named '").append(methodName).append("' not found with specified parameter classes: ");
    for (Class paramType : paramTypes) {
        buffer.append(paramType.getName());
        buffer.append(',');
    }
    buffer.setLength(buffer.length() - 1);
    throw new ReflectorException(buffer.toString());
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="470"><data key="reference"></data><data key="text">method == null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="471"><data key="reference">java.lang.reflect.Method</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="472"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="473"><data key="reference"></data><data key="text">{
    StringBuilder buffer = new StringBuilder();
    buffer.append("Singleton-producing method named '").append(methodName).append("' not found with specified parameter classes: ");
    for (Class paramType : paramTypes) {
        buffer.append(paramType.getName());
        buffer.append(',');
    }
    buffer.setLength(buffer.length() - 1);
    throw new ReflectorException(buffer.toString());
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="474"><data key="reference"></data><data key="modifier"></data><data key="text">StringBuilder buffer = new StringBuilder()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="475"><data key="reference"></data><data key="text">buffer = new StringBuilder()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="476"><data key="reference"></data><data key="text">StringBuilder</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="477"><data key="reference">nonQualifiedClassName</data><data key="identifier">StringBuilder</data><data key="text">StringBuilder</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="478"><data key="reference">java.lang.StringBuilder</data><data key="identifier">buffer</data><data key="text">buffer</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="479"><data key="reference"></data><data key="text">new StringBuilder()</data><data key="type">ObjectCreationExpr</data><data key="parentType">VariableDeclarator</data></node><node id="480"><data key="reference"></data><data key="text">StringBuilder</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="481"><data key="reference">nonQualifiedClassName</data><data key="identifier">StringBuilder</data><data key="text">StringBuilder</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="482"><data key="reference"></data><data key="text">buffer.append("Singleton-producing method named '").append(methodName).append("' not found with specified parameter classes: ")</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="483"><data key="reference"></data><data key="text">buffer.append("Singleton-producing method named '").append(methodName)</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="484"><data key="reference"></data><data key="text">buffer.append("Singleton-producing method named '")</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="485"><data key="reference">java.lang.StringBuilder</data><data key="identifier">buffer</data><data key="text">buffer</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="486"><data key="reference">otherMethodCall</data><data key="identifier">append</data><data key="text">append</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="487"><data key="reference"></data><data key="identifier">Singleton-producing method named '</data><data key="text">"Singleton-producing method named '"</data><data key="type">StringLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="488"><data key="reference">otherMethodCall</data><data key="identifier">append</data><data key="text">append</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="489"><data key="reference">java.lang.String</data><data key="identifier">methodName</data><data key="text">methodName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="490"><data key="reference">otherMethodCall</data><data key="identifier">append</data><data key="text">append</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="491"><data key="reference"></data><data key="identifier">' not found with specified parameter classes: </data><data key="text">"' not found with specified parameter classes: "</data><data key="type">StringLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="492"><data key="reference"></data><data key="text">for (Class paramType : paramTypes) {
    buffer.append(paramType.getName());
    buffer.append(',');
}</data><data key="type">ForeachStmt</data><data key="parentType">BlockStmt</data></node><node id="493"><data key="reference"></data><data key="modifier"></data><data key="text">Class paramType</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForeachStmt</data></node><node id="494"><data key="reference"></data><data key="text">paramType</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="495"><data key="reference"></data><data key="text">Class</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="496"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="497"><data key="reference">java.lang.Class</data><data key="identifier">paramType</data><data key="text">paramType</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="498"><data key="reference">java.lang.Class[]</data><data key="identifier">paramTypes</data><data key="text">paramTypes</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="499"><data key="reference"></data><data key="text">{
    buffer.append(paramType.getName());
    buffer.append(',');
}</data><data key="type">BlockStmt</data><data key="parentType">ForeachStmt</data></node><node id="1701"><data key="reference"></data><data key="text">Constructor&lt;T&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1700"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1709"><data key="reference">nonQualifiedClassName</data><data key="identifier">Map</data><data key="text">Map</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1708"><data key="reference"></data><data key="text">Map&lt;String, Constructor&lt;T&gt;&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="1707"><data key="reference"></data><data key="text">(Map&lt;String, Constructor&lt;T&gt;&gt;) getMethodMap(theClass, CONSTRUCTOR_METHOD_NAME)</data><data key="type">CastExpr</data><data key="parentType">ReturnStmt</data></node><node id="1706"><data key="reference"></data><data key="text">return (Map&lt;String, Constructor&lt;T&gt;&gt;) getMethodMap(theClass, CONSTRUCTOR_METHOD_NAME);</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="1705"><data key="reference"></data><data key="text">{
    return (Map&lt;String, Constructor&lt;T&gt;&gt;) getMethodMap(theClass, CONSTRUCTOR_METHOD_NAME);
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="1704"><data key="reference">nonQualifiedClassName</data><data key="identifier">T</data><data key="text">T</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1703"><data key="reference"></data><data key="text">T</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1702"><data key="reference">nonQualifiedClassName</data><data key="identifier">Constructor</data><data key="text">Constructor</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1712"><data key="reference"></data><data key="text">Constructor&lt;T&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1711"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1710"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1719"><data key="reference">java.lang.String</data><data key="identifier">CONSTRUCTOR_METHOD_NAME</data><data key="text">CONSTRUCTOR_METHOD_NAME</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1718"><data key="reference">java.lang.Class</data><data key="identifier">theClass</data><data key="text">theClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1717"><data key="reference">otherMethodCall</data><data key="identifier">getMethodMap</data><data key="text">getMethodMap</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1716"><data key="reference"></data><data key="text">getMethodMap(theClass, CONSTRUCTOR_METHOD_NAME)</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="1715"><data key="reference">nonQualifiedClassName</data><data key="identifier">T</data><data key="text">T</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1714"><data key="reference"></data><data key="text">T</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1713"><data key="reference">nonQualifiedClassName</data><data key="identifier">Constructor</data><data key="text">Constructor</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1723"><data key="reference"></data><data key="text">Class</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1722"><data key="reference"></data><data key="modifier"></data><data key="text">Class theClass</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="1721"><data key="reference">userDefinedMethodName</data><data key="identifier">getMethodMap</data><data key="text">getMethodMap</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="1720"><data key="reference"></data><data key="modifier">private</data><data key="text">/**
 * Retrieve the cache of methods for the specified class and method name.
 *
 * @param theClass the class to lookup.
 * @param methodName The name of the method to lookup.
 * @return The cache of constructors.
 * @throws ReflectorException in case of a lookup error.
 */
private Map&lt;String, ?&gt; getMethodMap(Class theClass, String methodName) throws ReflectorException {
    Map&lt;String, Method&gt; methodMap;
    if (theClass == null) {
        return null;
    }
    String className = theClass.getName();
    synchronized (className.intern()) {
        Map&lt;String, Map&lt;String, Method&gt;&gt; classMethods = classMaps.get(className);
        if (classMethods == null) {
            classMethods = new HashMap&lt;String, Map&lt;String, Method&gt;&gt;();
            methodMap = new HashMap&lt;String, Method&gt;();
            classMethods.put(methodName, methodMap);
            classMaps.put(className, classMethods);
        } else {
            String key = className + "::" + methodName;
            synchronized (key.intern()) {
                methodMap = classMethods.get(methodName);
                if (methodMap == null) {
                    methodMap = new HashMap&lt;String, Method&gt;();
                    classMethods.put(methodName, methodMap);
                }
            }
        }
    }
    return methodMap;
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="1729"><data key="reference">java.lang.String</data><data key="identifier">methodName</data><data key="text">methodName</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1728"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1727"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1726"><data key="reference"></data><data key="modifier"></data><data key="text">String methodName</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="1725"><data key="reference">java.lang.Class</data><data key="identifier">theClass</data><data key="text">theClass</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1724"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1734"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1733"><data key="reference">nonQualifiedClassName</data><data key="identifier">Map</data><data key="text">Map</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1732"><data key="reference"></data><data key="text">Map&lt;String, ?&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="1731"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1730"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="1739"><data key="reference"></data><data key="text">methodMap</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1738"><data key="reference"></data><data key="modifier"></data><data key="text">Map&lt;String, Method&gt; methodMap</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1737"><data key="reference"></data><data key="text">{
    Map&lt;String, Method&gt; methodMap;
    if (theClass == null) {
        return null;
    }
    String className = theClass.getName();
    synchronized (className.intern()) {
        Map&lt;String, Map&lt;String, Method&gt;&gt; classMethods = classMaps.get(className);
        if (classMethods == null) {
            classMethods = new HashMap&lt;String, Map&lt;String, Method&gt;&gt;();
            methodMap = new HashMap&lt;String, Method&gt;();
            classMethods.put(methodName, methodMap);
            classMaps.put(className, classMethods);
        } else {
            String key = className + "::" + methodName;
            synchronized (key.intern()) {
                methodMap = classMethods.get(methodName);
                if (methodMap == null) {
                    methodMap = new HashMap&lt;String, Method&gt;();
                    classMethods.put(methodName, methodMap);
                }
            }
        }
    }
    return methodMap;
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="1736"><data key="reference"></data><data key="text">?</data><data key="type">WildcardType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1735"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1745"><data key="reference">nonQualifiedClassName</data><data key="identifier">Method</data><data key="text">Method</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1744"><data key="reference"></data><data key="text">Method</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1743"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1742"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1741"><data key="reference">nonQualifiedClassName</data><data key="identifier">Map</data><data key="text">Map</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1740"><data key="reference"></data><data key="text">Map&lt;String, Method&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1749"><data key="reference">java.lang.Class</data><data key="identifier">theClass</data><data key="text">theClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1748"><data key="reference"></data><data key="text">theClass == null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="1747"><data key="reference"></data><data key="text">if (theClass == null) {
    return null;
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1746"><data key="reference">java.util.Map</data><data key="identifier">methodMap</data><data key="text">methodMap</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1756"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1755"><data key="reference"></data><data key="text">className = theClass.getName()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1754"><data key="reference"></data><data key="modifier"></data><data key="text">String className = theClass.getName()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1753"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">ReturnStmt</data></node><node id="1752"><data key="reference"></data><data key="text">return null;</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="1751"><data key="reference"></data><data key="text">{
    return null;
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1750"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1759"><data key="reference"></data><data key="text">theClass.getName()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1758"><data key="reference">java.lang.String</data><data key="identifier">className</data><data key="text">className</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1757"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1770"><data key="reference">nonQualifiedClassName</data><data key="identifier">Map</data><data key="text">Map</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1767"><data key="reference"></data><data key="modifier"></data><data key="text">Map&lt;String, Map&lt;String, Method&gt;&gt; classMethods = classMaps.get(className)</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1766"><data key="reference"></data><data key="text">{
    Map&lt;String, Map&lt;String, Method&gt;&gt; classMethods = classMaps.get(className);
    if (classMethods == null) {
        classMethods = new HashMap&lt;String, Map&lt;String, Method&gt;&gt;();
        methodMap = new HashMap&lt;String, Method&gt;();
        classMethods.put(methodName, methodMap);
        classMaps.put(className, classMethods);
    } else {
        String key = className + "::" + methodName;
        synchronized (key.intern()) {
            methodMap = classMethods.get(methodName);
            if (methodMap == null) {
                methodMap = new HashMap&lt;String, Method&gt;();
                classMethods.put(methodName, methodMap);
            }
        }
    }
}</data><data key="type">BlockStmt</data><data key="parentType">SynchronizedStmt</data></node><node id="1765"><data key="reference">otherMethodCall</data><data key="identifier">intern</data><data key="text">intern</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1764"><data key="reference">java.lang.String</data><data key="identifier">className</data><data key="text">className</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1763"><data key="reference"></data><data key="text">className.intern()</data><data key="type">MethodCallExpr</data><data key="parentType">SynchronizedStmt</data></node><node id="1762"><data key="reference"></data><data key="text">synchronized (className.intern()) {
    Map&lt;String, Map&lt;String, Method&gt;&gt; classMethods = classMaps.get(className);
    if (classMethods == null) {
        classMethods = new HashMap&lt;String, Map&lt;String, Method&gt;&gt;();
        methodMap = new HashMap&lt;String, Method&gt;();
        classMethods.put(methodName, methodMap);
        classMaps.put(className, classMethods);
    } else {
        String key = className + "::" + methodName;
        synchronized (key.intern()) {
            methodMap = classMethods.get(methodName);
            if (methodMap == null) {
                methodMap = new HashMap&lt;String, Method&gt;();
                classMethods.put(methodName, methodMap);
            }
        }
    }
}</data><data key="type">SynchronizedStmt</data><data key="parentType">BlockStmt</data></node><node id="1761"><data key="reference">otherMethodCall</data><data key="identifier">getName</data><data key="text">getName</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1760"><data key="reference">java.lang.Class</data><data key="identifier">theClass</data><data key="text">theClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1769"><data key="reference"></data><data key="text">Map&lt;String, Map&lt;String, Method&gt;&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1768"><data key="reference"></data><data key="text">classMethods = classMaps.get(className)</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="1781"><data key="reference">java.util.Map</data><data key="identifier">classMaps</data><data key="text">classMaps</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1780"><data key="reference"></data><data key="text">classMaps.get(className)</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1778"><data key="reference">nonQualifiedClassName</data><data key="identifier">Method</data><data key="text">Method</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1777"><data key="reference"></data><data key="text">Method</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1776"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1775"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1774"><data key="reference">nonQualifiedClassName</data><data key="identifier">Map</data><data key="text">Map</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1773"><data key="reference"></data><data key="text">Map&lt;String, Method&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1772"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1771"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1779"><data key="reference">java.util.Map</data><data key="identifier">classMethods</data><data key="text">classMethods</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1792"><data key="reference"></data><data key="text">HashMap&lt;String, Map&lt;String, Method&gt;&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="1791"><data key="reference"></data><data key="text">new HashMap&lt;String, Map&lt;String, Method&gt;&gt;()</data><data key="type">ObjectCreationExpr</data><data key="parentType">AssignExpr</data></node><node id="1790"><data key="reference">java.util.Map</data><data key="identifier">classMethods</data><data key="text">classMethods</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1305"><data key="reference">nonQualifiedClassName</data><data key="identifier">IllegalAccessException</data><data key="text">IllegalAccessException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1789"><data key="reference"></data><data key="identifier">=</data><data key="text">classMethods = new HashMap&lt;String, Map&lt;String, Method&gt;&gt;()</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1304"><data key="reference"></data><data key="text">IllegalAccessException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1788"><data key="reference"></data><data key="text">{
    classMethods = new HashMap&lt;String, Map&lt;String, Method&gt;&gt;();
    methodMap = new HashMap&lt;String, Method&gt;();
    classMethods.put(methodName, methodMap);
    classMaps.put(className, classMethods);
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1303"><data key="reference"></data><data key="modifier"></data><data key="text">IllegalAccessException e</data><data key="type">Parameter</data><data key="parentType">CatchClause</data></node><node id="1787"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1302"><data key="reference"></data><data key="text"> catch (IllegalAccessException e) {
    throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
}</data><data key="type">CatchClause</data><data key="parentType">TryStmt</data></node><node id="1786"><data key="reference">java.util.Map</data><data key="identifier">classMethods</data><data key="text">classMethods</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1301"><data key="reference"></data><data key="text">{}</data><data key="type">ArrayInitializerExpr</data><data key="parentType">ArrayCreationExpr</data></node><node id="1785"><data key="reference"></data><data key="text">classMethods == null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="1300"><data key="reference"></data><data key="text">[]</data><data key="type">ArrayCreationLevel</data><data key="parentType">ArrayCreationExpr</data></node><node id="1784"><data key="reference"></data><data key="text">if (classMethods == null) {
    classMethods = new HashMap&lt;String, Map&lt;String, Method&gt;&gt;();
    methodMap = new HashMap&lt;String, Method&gt;();
    classMethods.put(methodName, methodMap);
    classMaps.put(className, classMethods);
} else {
    String key = className + "::" + methodName;
    synchronized (key.intern()) {
        methodMap = classMethods.get(methodName);
        if (methodMap == null) {
            methodMap = new HashMap&lt;String, Method&gt;();
            classMethods.put(methodName, methodMap);
        }
    }
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1783"><data key="reference">java.lang.String</data><data key="identifier">className</data><data key="text">className</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1782"><data key="reference">otherMethodCall</data><data key="identifier">get</data><data key="text">get</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1309"><data key="reference"></data><data key="text">new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e)</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="1308"><data key="reference"></data><data key="text">throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="1307"><data key="reference"></data><data key="text">{
    throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
}</data><data key="type">BlockStmt</data><data key="parentType">CatchClause</data></node><node id="1306"><data key="reference">java.lang.IllegalAccessException</data><data key="identifier">e</data><data key="text">e</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1316"><data key="reference"></data><data key="identifier">Error retrieving property \'</data><data key="text">"Error retrieving property \'"</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1315"><data key="reference"></data><data key="text">"Error retrieving property \'" + propertyName</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="1799"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1314"><data key="reference"></data><data key="text">"Error retrieving property \'" + propertyName + "\' from \'"</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="1798"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1313"><data key="reference"></data><data key="text">"Error retrieving property \'" + propertyName + "\' from \'" + targetClass</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="1797"><data key="reference">nonQualifiedClassName</data><data key="identifier">Map</data><data key="text">Map</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1312"><data key="reference"></data><data key="text">"Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'"</data><data key="type">BinaryExpr</data><data key="parentType">ObjectCreationExpr</data></node><node id="1796"><data key="reference"></data><data key="text">Map&lt;String, Method&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1311"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1795"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1310"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="1794"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1793"><data key="reference">nonQualifiedClassName</data><data key="identifier">HashMap</data><data key="text">HashMap</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1319"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1318"><data key="reference"></data><data key="identifier">\' from \'</data><data key="text">"\' from \'"</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1317"><data key="reference">java.lang.String</data><data key="identifier">propertyName</data><data key="text">propertyName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1330"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="1327"><data key="reference"></data><data key="text">{
    throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
}</data><data key="type">BlockStmt</data><data key="parentType">CatchClause</data></node><node id="1326"><data key="reference">java.lang.reflect.InvocationTargetException</data><data key="identifier">e</data><data key="text">e</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1325"><data key="reference">nonQualifiedClassName</data><data key="identifier">InvocationTargetException</data><data key="text">InvocationTargetException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1324"><data key="reference"></data><data key="text">InvocationTargetException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1323"><data key="reference"></data><data key="modifier"></data><data key="text">InvocationTargetException e</data><data key="type">Parameter</data><data key="parentType">CatchClause</data></node><node id="1322"><data key="reference"></data><data key="text"> catch (InvocationTargetException e) {
    throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
}</data><data key="type">CatchClause</data><data key="parentType">TryStmt</data></node><node id="1321"><data key="reference">java.lang.IllegalAccessException</data><data key="identifier">e</data><data key="text">e</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1320"><data key="reference"></data><data key="identifier">\'</data><data key="text">"\'"</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="900"><data key="reference">java.lang.Class[]</data><data key="identifier">paramTypes</data><data key="text">paramTypes</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="901"><data key="reference"></data><data key="text">{
    buffer.append(paramType.getName());
    buffer.append(',');
}</data><data key="type">BlockStmt</data><data key="parentType">ForeachStmt</data></node><node id="902"><data key="reference"></data><data key="text">buffer.append(paramType.getName())</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="903"><data key="reference">java.lang.StringBuilder</data><data key="identifier">buffer</data><data key="text">buffer</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="904"><data key="reference">otherMethodCall</data><data key="identifier">append</data><data key="text">append</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="905"><data key="reference"></data><data key="text">paramType.getName()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1329"><data key="reference"></data><data key="text">new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e)</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="906"><data key="reference">java.lang.Class</data><data key="identifier">paramType</data><data key="text">paramType</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1328"><data key="reference"></data><data key="text">throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="907"><data key="reference">otherMethodCall</data><data key="identifier">getName</data><data key="text">getName</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="908"><data key="reference"></data><data key="text">buffer.append(',')</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="909"><data key="reference">java.lang.StringBuilder</data><data key="identifier">buffer</data><data key="text">buffer</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1341"><data key="reference">java.lang.reflect.InvocationTargetException</data><data key="identifier">e</data><data key="text">e</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1340"><data key="reference"></data><data key="identifier">\'</data><data key="text">"\'"</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1338"><data key="reference"></data><data key="identifier">\' from \'</data><data key="text">"\' from \'"</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1337"><data key="reference">java.lang.String</data><data key="identifier">propertyName</data><data key="text">propertyName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1336"><data key="reference"></data><data key="identifier">Error retrieving property \'</data><data key="text">"Error retrieving property \'"</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1335"><data key="reference"></data><data key="text">"Error retrieving property \'" + propertyName</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="1334"><data key="reference"></data><data key="text">"Error retrieving property \'" + propertyName + "\' from \'"</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="1333"><data key="reference"></data><data key="text">"Error retrieving property \'" + propertyName + "\' from \'" + targetClass</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="1332"><data key="reference"></data><data key="text">"Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'"</data><data key="type">BinaryExpr</data><data key="parentType">ObjectCreationExpr</data></node><node id="1331"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="910"><data key="reference">otherMethodCall</data><data key="identifier">append</data><data key="text">append</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="911"><data key="reference"></data><data key="identifier">,</data><data key="text">','</data><data key="type">CharLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="912"><data key="reference"></data><data key="text">buffer.setLength(buffer.length() - 1)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="913"><data key="reference">java.lang.StringBuilder</data><data key="identifier">buffer</data><data key="text">buffer</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="914"><data key="reference">otherMethodCall</data><data key="identifier">setLength</data><data key="text">setLength</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="915"><data key="reference"></data><data key="text">buffer.length() - 1</data><data key="type">BinaryExpr</data><data key="parentType">MethodCallExpr</data></node><node id="916"><data key="reference"></data><data key="text">buffer.length()</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="917"><data key="reference">java.lang.StringBuilder</data><data key="identifier">buffer</data><data key="text">buffer</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1339"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="918"><data key="reference">otherMethodCall</data><data key="identifier">length</data><data key="text">length</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="919"><data key="reference"></data><data key="identifier">1</data><data key="text">1</data><data key="type">IntegerLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1352"><data key="reference">java.lang.reflect.Method</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1351"><data key="reference"></data><data key="text">method.invoke(target, new Object[] {})</data><data key="type">MethodCallExpr</data><data key="parentType">AssignExpr</data></node><node id="1350"><data key="reference">java.lang.Object</data><data key="identifier">returnValue</data><data key="text">returnValue</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1349"><data key="reference"></data><data key="identifier">=</data><data key="text">returnValue = method.invoke(target, new Object[] {})</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1348"><data key="reference"></data><data key="text">{
    returnValue = method.invoke(target, new Object[] {});
}</data><data key="type">BlockStmt</data><data key="parentType">TryStmt</data></node><node id="1347"><data key="reference"></data><data key="text">try {
    returnValue = method.invoke(target, new Object[] {});
} catch (IllegalAccessException e) {
    throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
} catch (InvocationTargetException e) {
    throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
}</data><data key="type">TryStmt</data><data key="parentType">BlockStmt</data></node><node id="1346"><data key="reference"></data><data key="text">{
    try {
        returnValue = method.invoke(target, new Object[] {});
    } catch (IllegalAccessException e) {
        throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
    } catch (InvocationTargetException e) {
        throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
    }
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1345"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1344"><data key="reference">java.lang.reflect.Method</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1343"><data key="reference"></data><data key="text">method != null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="920"><data key="reference"></data><data key="text">throw new ReflectorException(buffer.toString());</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="1342"><data key="reference"></data><data key="text">if (method != null) {
    try {
        returnValue = method.invoke(target, new Object[] {});
    } catch (IllegalAccessException e) {
        throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
    } catch (InvocationTargetException e) {
        throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
    }
} else {
    returnValue = getField(target, propertyName, true);
    if (returnValue == null) {
        // TODO: Check if exception is the right action! Field exists, but contains null
        throw new ReflectorException("Neither method: \'" + propertyName + "\' nor bean accessor: \'" + beanAccessor + "\' can be found for class: \'" + targetClass + "\', and retrieval of field: \'" + propertyName + "\' returned null as value.");
    }
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="921"><data key="reference"></data><data key="text">new ReflectorException(buffer.toString())</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="922"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="923"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="924"><data key="reference"></data><data key="text">buffer.toString()</data><data key="type">MethodCallExpr</data><data key="parentType">ObjectCreationExpr</data></node><node id="925"><data key="reference">java.lang.StringBuilder</data><data key="identifier">buffer</data><data key="text">buffer</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="926"><data key="reference">otherMethodCall</data><data key="identifier">toString</data><data key="text">toString</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="927"><data key="reference"></data><data key="text">return method.invoke(null, params);</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="928"><data key="reference"></data><data key="text">method.invoke(null, params)</data><data key="type">MethodCallExpr</data><data key="parentType">ReturnStmt</data></node><node id="929"><data key="reference">java.lang.reflect.Method</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1363"><data key="reference">nonQualifiedClassName</data><data key="identifier">IllegalAccessException</data><data key="text">IllegalAccessException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1362"><data key="reference"></data><data key="text">IllegalAccessException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1361"><data key="reference"></data><data key="modifier"></data><data key="text">IllegalAccessException e</data><data key="type">Parameter</data><data key="parentType">CatchClause</data></node><node id="1360"><data key="reference"></data><data key="text"> catch (IllegalAccessException e) {
    throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
}</data><data key="type">CatchClause</data><data key="parentType">TryStmt</data></node><node id="1359"><data key="reference"></data><data key="text">{}</data><data key="type">ArrayInitializerExpr</data><data key="parentType">ArrayCreationExpr</data></node><node id="1358"><data key="reference"></data><data key="text">[]</data><data key="type">ArrayCreationLevel</data><data key="parentType">ArrayCreationExpr</data></node><node id="1357"><data key="reference">nonQualifiedClassName</data><data key="identifier">Object</data><data key="text">Object</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1356"><data key="reference"></data><data key="text">Object</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayCreationExpr</data></node><node id="1355"><data key="reference"></data><data key="text">new Object[] {}</data><data key="type">ArrayCreationExpr</data><data key="parentType">MethodCallExpr</data></node><node id="930"><data key="reference">otherMethodCall</data><data key="identifier">invoke</data><data key="text">invoke</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1354"><data key="reference">java.lang.Object</data><data key="identifier">target</data><data key="text">target</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="931"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1353"><data key="reference">otherMethodCall</data><data key="identifier">invoke</data><data key="text">invoke</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="932"><data key="reference">java.lang.Object[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="933"><data key="reference"></data><data key="text"> catch (InvocationTargetException ex) {
    throw new ReflectorException(ex);
}</data><data key="type">CatchClause</data><data key="parentType">TryStmt</data></node><node id="934"><data key="reference"></data><data key="modifier"></data><data key="text">InvocationTargetException ex</data><data key="type">Parameter</data><data key="parentType">CatchClause</data></node><node id="935"><data key="reference"></data><data key="text">InvocationTargetException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="936"><data key="reference">nonQualifiedClassName</data><data key="identifier">InvocationTargetException</data><data key="text">InvocationTargetException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="937"><data key="reference">java.lang.reflect.InvocationTargetException</data><data key="identifier">ex</data><data key="text">ex</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="938"><data key="reference"></data><data key="text">{
    throw new ReflectorException(ex);
}</data><data key="type">BlockStmt</data><data key="parentType">CatchClause</data></node><node id="939"><data key="reference"></data><data key="text">throw new ReflectorException(ex);</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="1374"><data key="reference"></data><data key="identifier">Error retrieving property \'</data><data key="text">"Error retrieving property \'"</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1373"><data key="reference"></data><data key="text">"Error retrieving property \'" + propertyName</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="1372"><data key="reference"></data><data key="text">"Error retrieving property \'" + propertyName + "\' from \'"</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="1371"><data key="reference"></data><data key="text">"Error retrieving property \'" + propertyName + "\' from \'" + targetClass</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="1370"><data key="reference"></data><data key="text">"Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'"</data><data key="type">BinaryExpr</data><data key="parentType">ObjectCreationExpr</data></node><node id="1369"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1368"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="1367"><data key="reference"></data><data key="text">new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e)</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="940"><data key="reference"></data><data key="text">new ReflectorException(ex)</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="1366"><data key="reference"></data><data key="text">throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="941"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="1365"><data key="reference"></data><data key="text">{
    throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
}</data><data key="type">BlockStmt</data><data key="parentType">CatchClause</data></node><node id="942"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1364"><data key="reference">java.lang.IllegalAccessException</data><data key="identifier">e</data><data key="text">e</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="943"><data key="reference">java.lang.reflect.InvocationTargetException</data><data key="identifier">ex</data><data key="text">ex</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="944"><data key="reference"></data><data key="text"> catch (IllegalAccessException ex) {
    throw new ReflectorException(ex);
}</data><data key="type">CatchClause</data><data key="parentType">TryStmt</data></node><node id="945"><data key="reference"></data><data key="modifier"></data><data key="text">IllegalAccessException ex</data><data key="type">Parameter</data><data key="parentType">CatchClause</data></node><node id="946"><data key="reference"></data><data key="text">IllegalAccessException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="947"><data key="reference">nonQualifiedClassName</data><data key="identifier">IllegalAccessException</data><data key="text">IllegalAccessException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="948"><data key="reference">java.lang.IllegalAccessException</data><data key="identifier">ex</data><data key="text">ex</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="949"><data key="reference"></data><data key="text">{
    throw new ReflectorException(ex);
}</data><data key="type">BlockStmt</data><data key="parentType">CatchClause</data></node><node id="1385"><data key="reference"></data><data key="text">{
    throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
}</data><data key="type">BlockStmt</data><data key="parentType">CatchClause</data></node><node id="1384"><data key="reference">java.lang.reflect.InvocationTargetException</data><data key="identifier">e</data><data key="text">e</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1383"><data key="reference">nonQualifiedClassName</data><data key="identifier">InvocationTargetException</data><data key="text">InvocationTargetException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1382"><data key="reference"></data><data key="text">InvocationTargetException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1381"><data key="reference"></data><data key="modifier"></data><data key="text">InvocationTargetException e</data><data key="type">Parameter</data><data key="parentType">CatchClause</data></node><node id="1380"><data key="reference"></data><data key="text"> catch (InvocationTargetException e) {
    throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);
}</data><data key="type">CatchClause</data><data key="parentType">TryStmt</data></node><node id="1379"><data key="reference">java.lang.IllegalAccessException</data><data key="identifier">e</data><data key="text">e</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="950"><data key="reference"></data><data key="text">throw new ReflectorException(ex);</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="1378"><data key="reference"></data><data key="identifier">\'</data><data key="text">"\'"</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="951"><data key="reference"></data><data key="text">new ReflectorException(ex)</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="1377"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="952"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="1376"><data key="reference"></data><data key="identifier">\' from \'</data><data key="text">"\' from \'"</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="953"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1375"><data key="reference">java.lang.String</data><data key="identifier">propertyName</data><data key="text">propertyName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="954"><data key="reference">java.lang.IllegalAccessException</data><data key="identifier">ex</data><data key="text">ex</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="955"><data key="reference"></data><data key="modifier">public</data><data key="text">/**
 * Return the constructor, checking the cache first and storing in cache if not already there..
 *
 * @param targetClass The class to get the constructor from
 * @param params The classes of the parameters which the constructor should match.
 * @return the Constructor object that matches.
 * @throws ReflectorException In case we can't retrieve the proper constructor.
 */
public &lt;T&gt; Constructor&lt;T&gt; getConstructor(Class&lt;T&gt; targetClass, Class[] params) throws ReflectorException {
    Map&lt;String, Constructor&lt;T&gt;&gt; constructorMap = getConstructorMap(targetClass);
    StringBuilder key = new StringBuilder(200);
    key.append("(");
    for (Class param : params) {
        key.append(param.getName());
        key.append(",");
    }
    if (params.length &gt; 0) {
        key.setLength(key.length() - 1);
    }
    key.append(")");
    Constructor&lt;T&gt; constructor;
    String paramKey = key.toString();
    synchronized (paramKey.intern()) {
        constructor = constructorMap.get(paramKey);
        if (constructor == null) {
            @SuppressWarnings({ "unchecked" }) Constructor&lt;T&gt;[] cands = (Constructor&lt;T&gt;[]) targetClass.getConstructors();
            for (Constructor&lt;T&gt; cand : cands) {
                Class[] types = cand.getParameterTypes();
                if (params.length != types.length) {
                    continue;
                }
                for (int j = 0, len2 = params.length; j &lt; len2; j++) {
                    if (!types[j].isAssignableFrom(params[j])) {
                        continue;
                    }
                }
                // we got it, so store it!
                constructor = cand;
                constructorMap.put(paramKey, constructor);
            }
        }
    }
    if (constructor == null) {
        throw new ReflectorException("Error retrieving constructor object for: " + targetClass.getName() + paramKey);
    }
    return constructor;
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="956"><data key="reference"></data><data key="text">T</data><data key="type">TypeParameter</data><data key="parentType">MethodDeclaration</data></node><node id="957"><data key="reference">runtimeGenericType</data><data key="identifier">T</data><data key="text">T</data><data key="type">SimpleName</data><data key="parentType">TypeParameter</data></node><node id="958"><data key="reference">userDefinedMethodName</data><data key="identifier">getConstructor</data><data key="text">getConstructor</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="959"><data key="reference"></data><data key="modifier"></data><data key="text">Class&lt;T&gt; targetClass</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="1396"><data key="reference"></data><data key="identifier">\' from \'</data><data key="text">"\' from \'"</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1395"><data key="reference">java.lang.String</data><data key="identifier">propertyName</data><data key="text">propertyName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1394"><data key="reference"></data><data key="identifier">Error retrieving property \'</data><data key="text">"Error retrieving property \'"</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1393"><data key="reference"></data><data key="text">"Error retrieving property \'" + propertyName</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="1392"><data key="reference"></data><data key="text">"Error retrieving property \'" + propertyName + "\' from \'"</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="1391"><data key="reference"></data><data key="text">"Error retrieving property \'" + propertyName + "\' from \'" + targetClass</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="1390"><data key="reference"></data><data key="text">"Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'"</data><data key="type">BinaryExpr</data><data key="parentType">ObjectCreationExpr</data></node><node id="960"><data key="reference"></data><data key="text">Class&lt;T&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="961"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1389"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="962"><data key="reference"></data><data key="text">T</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1388"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="963"><data key="reference">nonQualifiedClassName</data><data key="identifier">T</data><data key="text">T</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1387"><data key="reference"></data><data key="text">new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e)</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="964"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1386"><data key="reference"></data><data key="text">throw new ReflectorException("Error retrieving property \'" + propertyName + "\' from \'" + targetClass + "\'", e);</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="965"><data key="reference"></data><data key="modifier"></data><data key="text">Class[] params</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="966"><data key="reference"></data><data key="text">Class[]</data><data key="type">ArrayType</data><data key="parentType">Parameter</data></node><node id="967"><data key="reference"></data><data key="text">Class</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayType</data></node><node id="968"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="969"><data key="reference">java.lang.Class[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="970"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="971"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="972"><data key="reference"></data><data key="text">Constructor&lt;T&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="973"><data key="reference">nonQualifiedClassName</data><data key="identifier">Constructor</data><data key="text">Constructor</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1399"><data key="reference">java.lang.reflect.InvocationTargetException</data><data key="identifier">e</data><data key="text">e</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="974"><data key="reference"></data><data key="text">T</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1398"><data key="reference"></data><data key="identifier">\'</data><data key="text">"\'"</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="975"><data key="reference">nonQualifiedClassName</data><data key="identifier">T</data><data key="text">T</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1397"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="976"><data key="reference"></data><data key="text">{
    Map&lt;String, Constructor&lt;T&gt;&gt; constructorMap = getConstructorMap(targetClass);
    StringBuilder key = new StringBuilder(200);
    key.append("(");
    for (Class param : params) {
        key.append(param.getName());
        key.append(",");
    }
    if (params.length &gt; 0) {
        key.setLength(key.length() - 1);
    }
    key.append(")");
    Constructor&lt;T&gt; constructor;
    String paramKey = key.toString();
    synchronized (paramKey.intern()) {
        constructor = constructorMap.get(paramKey);
        if (constructor == null) {
            @SuppressWarnings({ "unchecked" }) Constructor&lt;T&gt;[] cands = (Constructor&lt;T&gt;[]) targetClass.getConstructors();
            for (Constructor&lt;T&gt; cand : cands) {
                Class[] types = cand.getParameterTypes();
                if (params.length != types.length) {
                    continue;
                }
                for (int j = 0, len2 = params.length; j &lt; len2; j++) {
                    if (!types[j].isAssignableFrom(params[j])) {
                        continue;
                    }
                }
                // we got it, so store it!
                constructor = cand;
                constructorMap.put(paramKey, constructor);
            }
        }
    }
    if (constructor == null) {
        throw new ReflectorException("Error retrieving constructor object for: " + targetClass.getName() + paramKey);
    }
    return constructor;
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="977"><data key="reference"></data><data key="modifier"></data><data key="text">Map&lt;String, Constructor&lt;T&gt;&gt; constructorMap = getConstructorMap(targetClass)</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="978"><data key="reference"></data><data key="text">constructorMap = getConstructorMap(targetClass)</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="979"><data key="reference"></data><data key="text">Map&lt;String, Constructor&lt;T&gt;&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="980"><data key="reference">nonQualifiedClassName</data><data key="identifier">Map</data><data key="text">Map</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="981"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="982"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="983"><data key="reference"></data><data key="text">Constructor&lt;T&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="500"><data key="reference"></data><data key="text">buffer.append(paramType.getName())</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="984"><data key="reference">nonQualifiedClassName</data><data key="identifier">Constructor</data><data key="text">Constructor</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="501"><data key="reference">java.lang.StringBuilder</data><data key="identifier">buffer</data><data key="text">buffer</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="985"><data key="reference"></data><data key="text">T</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="502"><data key="reference">otherMethodCall</data><data key="identifier">append</data><data key="text">append</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="986"><data key="reference">nonQualifiedClassName</data><data key="identifier">T</data><data key="text">T</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="503"><data key="reference"></data><data key="text">paramType.getName()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="987"><data key="reference">java.util.Map</data><data key="identifier">constructorMap</data><data key="text">constructorMap</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="504"><data key="reference">java.lang.Class</data><data key="identifier">paramType</data><data key="text">paramType</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="988"><data key="reference"></data><data key="text">getConstructorMap(targetClass)</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="505"><data key="reference">otherMethodCall</data><data key="identifier">getName</data><data key="text">getName</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="989"><data key="reference">otherMethodCall</data><data key="identifier">getConstructorMap</data><data key="text">getConstructorMap</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="506"><data key="reference"></data><data key="text">buffer.append(',')</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="507"><data key="reference">java.lang.StringBuilder</data><data key="identifier">buffer</data><data key="text">buffer</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="508"><data key="reference">otherMethodCall</data><data key="identifier">append</data><data key="text">append</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="509"><data key="reference"></data><data key="identifier">,</data><data key="text">','</data><data key="type">CharLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="990"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="991"><data key="reference"></data><data key="modifier"></data><data key="text">StringBuilder key = new StringBuilder(200)</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="992"><data key="reference"></data><data key="text">key = new StringBuilder(200)</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="993"><data key="reference"></data><data key="text">StringBuilder</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="510"><data key="reference"></data><data key="text">buffer.setLength(buffer.length() - 1)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="994"><data key="reference">nonQualifiedClassName</data><data key="identifier">StringBuilder</data><data key="text">StringBuilder</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="511"><data key="reference">java.lang.StringBuilder</data><data key="identifier">buffer</data><data key="text">buffer</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="995"><data key="reference">java.lang.StringBuilder</data><data key="identifier">key</data><data key="text">key</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="512"><data key="reference">otherMethodCall</data><data key="identifier">setLength</data><data key="text">setLength</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="996"><data key="reference"></data><data key="text">new StringBuilder(200)</data><data key="type">ObjectCreationExpr</data><data key="parentType">VariableDeclarator</data></node><node id="513"><data key="reference"></data><data key="text">buffer.length() - 1</data><data key="type">BinaryExpr</data><data key="parentType">MethodCallExpr</data></node><node id="997"><data key="reference"></data><data key="text">StringBuilder</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="514"><data key="reference"></data><data key="text">buffer.length()</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="998"><data key="reference">nonQualifiedClassName</data><data key="identifier">StringBuilder</data><data key="text">StringBuilder</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="515"><data key="reference">java.lang.StringBuilder</data><data key="identifier">buffer</data><data key="text">buffer</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="999"><data key="reference"></data><data key="identifier">200</data><data key="text">200</data><data key="type">IntegerLiteralExpr</data><data key="parentType">ObjectCreationExpr</data></node><node id="516"><data key="reference">otherMethodCall</data><data key="identifier">length</data><data key="text">length</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="517"><data key="reference"></data><data key="identifier">1</data><data key="text">1</data><data key="type">IntegerLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="518"><data key="reference"></data><data key="text">throw new ReflectorException(buffer.toString());</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="519"><data key="reference"></data><data key="text">new ReflectorException(buffer.toString())</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="520"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="521"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="522"><data key="reference"></data><data key="text">buffer.toString()</data><data key="type">MethodCallExpr</data><data key="parentType">ObjectCreationExpr</data></node><node id="523"><data key="reference">java.lang.StringBuilder</data><data key="identifier">buffer</data><data key="text">buffer</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="524"><data key="reference">otherMethodCall</data><data key="identifier">toString</data><data key="text">toString</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="525"><data key="reference"></data><data key="text">return method.invoke(target, params);</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="526"><data key="reference"></data><data key="text">method.invoke(target, params)</data><data key="type">MethodCallExpr</data><data key="parentType">ReturnStmt</data></node><node id="527"><data key="reference">java.lang.reflect.Method</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="528"><data key="reference">otherMethodCall</data><data key="identifier">invoke</data><data key="text">invoke</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="529"><data key="reference">java.lang.Object</data><data key="identifier">target</data><data key="text">target</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="530"><data key="reference">java.lang.Object[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="531"><data key="reference"></data><data key="text"> catch (InvocationTargetException ex) {
    throw new ReflectorException(ex);
}</data><data key="type">CatchClause</data><data key="parentType">TryStmt</data></node><node id="532"><data key="reference"></data><data key="modifier"></data><data key="text">InvocationTargetException ex</data><data key="type">Parameter</data><data key="parentType">CatchClause</data></node><node id="533"><data key="reference"></data><data key="text">InvocationTargetException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="534"><data key="reference">nonQualifiedClassName</data><data key="identifier">InvocationTargetException</data><data key="text">InvocationTargetException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="535"><data key="reference">java.lang.reflect.InvocationTargetException</data><data key="identifier">ex</data><data key="text">ex</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="536"><data key="reference"></data><data key="text">{
    throw new ReflectorException(ex);
}</data><data key="type">BlockStmt</data><data key="parentType">CatchClause</data></node><node id="537"><data key="reference"></data><data key="text">throw new ReflectorException(ex);</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="538"><data key="reference"></data><data key="text">new ReflectorException(ex)</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="539"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="540"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="541"><data key="reference">java.lang.reflect.InvocationTargetException</data><data key="identifier">ex</data><data key="text">ex</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="542"><data key="reference"></data><data key="text"> catch (IllegalAccessException ex) {
    throw new ReflectorException(ex);
}</data><data key="type">CatchClause</data><data key="parentType">TryStmt</data></node><node id="543"><data key="reference"></data><data key="modifier"></data><data key="text">IllegalAccessException ex</data><data key="type">Parameter</data><data key="parentType">CatchClause</data></node><node id="544"><data key="reference"></data><data key="text">IllegalAccessException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="545"><data key="reference">nonQualifiedClassName</data><data key="identifier">IllegalAccessException</data><data key="text">IllegalAccessException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="546"><data key="reference">java.lang.IllegalAccessException</data><data key="identifier">ex</data><data key="text">ex</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="547"><data key="reference"></data><data key="text">{
    throw new ReflectorException(ex);
}</data><data key="type">BlockStmt</data><data key="parentType">CatchClause</data></node><node id="548"><data key="reference"></data><data key="text">throw new ReflectorException(ex);</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="549"><data key="reference"></data><data key="text">new ReflectorException(ex)</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="550"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="551"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="552"><data key="reference">java.lang.IllegalAccessException</data><data key="identifier">ex</data><data key="text">ex</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="553"><data key="reference"></data><data key="modifier">public</data><data key="text">@SuppressWarnings({ "UnusedDeclaration" })
public Object getStaticField(Class targetClass, String fieldName) throws ReflectorException {
    try {
        Field field = targetClass.getField(fieldName);
        return field.get(null);
    } catch (SecurityException e) {
        throw new ReflectorException(e);
    } catch (NoSuchFieldException e) {
        throw new ReflectorException(e);
    } catch (IllegalArgumentException e) {
        throw new ReflectorException(e);
    } catch (IllegalAccessException e) {
        throw new ReflectorException(e);
    }
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="554"><data key="reference"></data><data key="text">@SuppressWarnings({ "UnusedDeclaration" })</data><data key="type">SingleMemberAnnotationExpr</data><data key="parentType">MethodDeclaration</data></node><node id="555"><data key="reference"></data><data key="identifier">SuppressWarnings</data><data key="text">SuppressWarnings</data><data key="type">Name</data><data key="parentType">SingleMemberAnnotationExpr</data></node><node id="556"><data key="reference"></data><data key="text">{ "UnusedDeclaration" }</data><data key="type">ArrayInitializerExpr</data><data key="parentType">SingleMemberAnnotationExpr</data></node><node id="557"><data key="reference"></data><data key="identifier">UnusedDeclaration</data><data key="text">"UnusedDeclaration"</data><data key="type">StringLiteralExpr</data><data key="parentType">ArrayInitializerExpr</data></node><node id="558"><data key="reference">userDefinedMethodName</data><data key="identifier">getStaticField</data><data key="text">getStaticField</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="559"><data key="reference"></data><data key="modifier"></data><data key="text">Class targetClass</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="560"><data key="reference"></data><data key="text">Class</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="561"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="562"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="563"><data key="reference"></data><data key="modifier"></data><data key="text">String fieldName</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="564"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="565"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="566"><data key="reference">java.lang.String</data><data key="identifier">fieldName</data><data key="text">fieldName</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="567"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="568"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="569"><data key="reference"></data><data key="text">Object</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="570"><data key="reference">nonQualifiedClassName</data><data key="identifier">Object</data><data key="text">Object</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="571"><data key="reference"></data><data key="text">{
    try {
        Field field = targetClass.getField(fieldName);
        return field.get(null);
    } catch (SecurityException e) {
        throw new ReflectorException(e);
    } catch (NoSuchFieldException e) {
        throw new ReflectorException(e);
    } catch (IllegalArgumentException e) {
        throw new ReflectorException(e);
    } catch (IllegalAccessException e) {
        throw new ReflectorException(e);
    }
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="572"><data key="reference"></data><data key="text">try {
    Field field = targetClass.getField(fieldName);
    return field.get(null);
} catch (SecurityException e) {
    throw new ReflectorException(e);
} catch (NoSuchFieldException e) {
    throw new ReflectorException(e);
} catch (IllegalArgumentException e) {
    throw new ReflectorException(e);
} catch (IllegalAccessException e) {
    throw new ReflectorException(e);
}</data><data key="type">TryStmt</data><data key="parentType">BlockStmt</data></node><node id="573"><data key="reference"></data><data key="text">{
    Field field = targetClass.getField(fieldName);
    return field.get(null);
}</data><data key="type">BlockStmt</data><data key="parentType">TryStmt</data></node><node id="574"><data key="reference"></data><data key="modifier"></data><data key="text">Field field = targetClass.getField(fieldName)</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="575"><data key="reference"></data><data key="text">field = targetClass.getField(fieldName)</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="576"><data key="reference"></data><data key="text">Field</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="577"><data key="reference">nonQualifiedClassName</data><data key="identifier">Field</data><data key="text">Field</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="578"><data key="reference">java.lang.reflect.Field</data><data key="identifier">field</data><data key="text">field</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="579"><data key="reference"></data><data key="text">targetClass.getField(fieldName)</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="580"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="581"><data key="reference">otherMethodCall</data><data key="identifier">getField</data><data key="text">getField</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="582"><data key="reference">java.lang.String</data><data key="identifier">fieldName</data><data key="text">fieldName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="583"><data key="reference"></data><data key="text">return field.get(null);</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="100"><data key="reference"></data><data key="text">Object[]</data><data key="type">ArrayType</data><data key="parentType">Parameter</data></node><node id="584"><data key="reference"></data><data key="text">field.get(null)</data><data key="type">MethodCallExpr</data><data key="parentType">ReturnStmt</data></node><node id="101"><data key="reference"></data><data key="text">Object</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayType</data></node><node id="585"><data key="reference">java.lang.reflect.Field</data><data key="identifier">field</data><data key="text">field</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="102"><data key="reference">nonQualifiedClassName</data><data key="identifier">Object</data><data key="text">Object</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="586"><data key="reference">otherMethodCall</data><data key="identifier">get</data><data key="text">get</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="103"><data key="reference">java.lang.Object[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="587"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="104"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="588"><data key="reference"></data><data key="text"> catch (SecurityException e) {
    throw new ReflectorException(e);
}</data><data key="type">CatchClause</data><data key="parentType">TryStmt</data></node><node id="105"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="589"><data key="reference"></data><data key="modifier"></data><data key="text">SecurityException e</data><data key="type">Parameter</data><data key="parentType">CatchClause</data></node><node id="106"><data key="reference"></data><data key="text">T</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="107"><data key="reference">nonQualifiedClassName</data><data key="identifier">T</data><data key="text">T</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="108"><data key="reference"></data><data key="text">{
    if (params == null) {
        params = new Object[0];
    }
    Class[] paramTypes = new Class[params.length];
    for (int i = 0, len = params.length; i &lt; len; i++) {
        paramTypes[i] = params[i].getClass();
    }
    try {
        Constructor&lt;T&gt; con = getConstructor(theClass, paramTypes);
        if (con == null) {
            StringBuilder buffer = new StringBuilder();
            buffer.append("Constructor not found for class: ");
            buffer.append(theClass.getName());
            buffer.append(" with specified or ancestor parameter classes: ");
            for (Class paramType : paramTypes) {
                buffer.append(paramType.getName());
                buffer.append(',');
            }
            buffer.setLength(buffer.length() - 1);
            throw new ReflectorException(buffer.toString());
        }
        return con.newInstance(params);
    } catch (InstantiationException ex) {
        throw new ReflectorException(ex);
    } catch (InvocationTargetException ex) {
        throw new ReflectorException(ex);
    } catch (IllegalAccessException ex) {
        throw new ReflectorException(ex);
    }
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="109"><data key="reference"></data><data key="text">if (params == null) {
    params = new Object[0];
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="590"><data key="reference"></data><data key="text">SecurityException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="591"><data key="reference">nonQualifiedClassName</data><data key="identifier">SecurityException</data><data key="text">SecurityException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="592"><data key="reference">java.lang.SecurityException</data><data key="identifier">e</data><data key="text">e</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="593"><data key="reference"></data><data key="text">{
    throw new ReflectorException(e);
}</data><data key="type">BlockStmt</data><data key="parentType">CatchClause</data></node><node id="110"><data key="reference"></data><data key="text">params == null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="594"><data key="reference"></data><data key="text">throw new ReflectorException(e);</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="111"><data key="reference">java.lang.Object[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="595"><data key="reference"></data><data key="text">new ReflectorException(e)</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="112"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="596"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="113"><data key="reference"></data><data key="text">{
    params = new Object[0];
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="597"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="114"><data key="reference"></data><data key="identifier">=</data><data key="text">params = new Object[0]</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="598"><data key="reference">java.lang.SecurityException</data><data key="identifier">e</data><data key="text">e</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="115"><data key="reference">java.lang.Object[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="599"><data key="reference"></data><data key="text"> catch (NoSuchFieldException e) {
    throw new ReflectorException(e);
}</data><data key="type">CatchClause</data><data key="parentType">TryStmt</data></node><node id="116"><data key="reference"></data><data key="text">new Object[0]</data><data key="type">ArrayCreationExpr</data><data key="parentType">AssignExpr</data></node><node id="117"><data key="reference"></data><data key="text">Object</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayCreationExpr</data></node><node id="118"><data key="reference">nonQualifiedClassName</data><data key="identifier">Object</data><data key="text">Object</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="119"><data key="reference"></data><data key="text">[0]</data><data key="type">ArrayCreationLevel</data><data key="parentType">ArrayCreationExpr</data></node><node id="120"><data key="reference"></data><data key="identifier">0</data><data key="text">0</data><data key="type">IntegerLiteralExpr</data><data key="parentType">ArrayCreationLevel</data></node><node id="121"><data key="reference"></data><data key="modifier"></data><data key="text">Class[] paramTypes = new Class[params.length]</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="122"><data key="reference"></data><data key="text">paramTypes = new Class[params.length]</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="123"><data key="reference"></data><data key="text">Class[]</data><data key="type">ArrayType</data><data key="parentType">VariableDeclarator</data></node><node id="124"><data key="reference"></data><data key="text">Class</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayType</data></node><node id="125"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="126"><data key="reference">java.lang.Class[]</data><data key="identifier">paramTypes</data><data key="text">paramTypes</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="127"><data key="reference"></data><data key="text">new Class[params.length]</data><data key="type">ArrayCreationExpr</data><data key="parentType">VariableDeclarator</data></node><node id="128"><data key="reference"></data><data key="text">Class</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayCreationExpr</data></node><node id="129"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="130"><data key="reference"></data><data key="text">[params.length]</data><data key="type">ArrayCreationLevel</data><data key="parentType">ArrayCreationExpr</data></node><node id="131"><data key="reference"></data><data key="text">params.length</data><data key="type">FieldAccessExpr</data><data key="parentType">ArrayCreationLevel</data></node><node id="132"><data key="reference">java.lang.Object[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="133"><data key="reference">int</data><data key="identifier">length</data><data key="text">length</data><data key="type">SimpleName</data><data key="parentType">FieldAccessExpr</data></node><node id="134"><data key="reference"></data><data key="text">for (int i = 0, len = params.length; i &lt; len; i++) {
    paramTypes[i] = params[i].getClass();
}</data><data key="type">ForStmt</data><data key="parentType">BlockStmt</data></node><node id="135"><data key="reference"></data><data key="modifier"></data><data key="text">int i = 0, len = params.length</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForStmt</data></node><node id="136"><data key="reference"></data><data key="text">i = 0</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="137"><data key="reference"></data><data key="identifier">int</data><data key="text">int</data><data key="type">PrimitiveType</data><data key="parentType">VariableDeclarator</data></node><node id="138"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="139"><data key="reference"></data><data key="identifier">0</data><data key="text">0</data><data key="type">IntegerLiteralExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1809"><data key="reference"></data><data key="text">Method</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="140"><data key="reference"></data><data key="text">len = params.length</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="141"><data key="reference"></data><data key="identifier">int</data><data key="text">int</data><data key="type">PrimitiveType</data><data key="parentType">VariableDeclarator</data></node><node id="142"><data key="reference">int</data><data key="identifier">len</data><data key="text">len</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="143"><data key="reference"></data><data key="text">params.length</data><data key="type">FieldAccessExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1800"><data key="reference"></data><data key="text">Method</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="144"><data key="reference">java.lang.Object[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="145"><data key="reference">int</data><data key="identifier">length</data><data key="text">length</data><data key="type">SimpleName</data><data key="parentType">FieldAccessExpr</data></node><node id="146"><data key="reference"></data><data key="text">i &lt; len</data><data key="type">BinaryExpr</data><data key="parentType">ForStmt</data></node><node id="147"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="148"><data key="reference">int</data><data key="identifier">len</data><data key="text">len</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="149"><data key="reference"></data><data key="text">i++</data><data key="type">UnaryExpr</data><data key="parentType">ForStmt</data></node><node id="1808"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1807"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1806"><data key="reference">nonQualifiedClassName</data><data key="identifier">HashMap</data><data key="text">HashMap</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1805"><data key="reference"></data><data key="text">HashMap&lt;String, Method&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="1804"><data key="reference"></data><data key="text">new HashMap&lt;String, Method&gt;()</data><data key="type">ObjectCreationExpr</data><data key="parentType">AssignExpr</data></node><node id="1803"><data key="reference">java.util.Map</data><data key="identifier">methodMap</data><data key="text">methodMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1802"><data key="reference"></data><data key="identifier">=</data><data key="text">methodMap = new HashMap&lt;String, Method&gt;()</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1801"><data key="reference">nonQualifiedClassName</data><data key="identifier">Method</data><data key="text">Method</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="150"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="151"><data key="reference"></data><data key="text">{
    paramTypes[i] = params[i].getClass();
}</data><data key="type">BlockStmt</data><data key="parentType">ForStmt</data></node><node id="152"><data key="reference"></data><data key="identifier">=</data><data key="text">paramTypes[i] = params[i].getClass()</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="153"><data key="reference"></data><data key="text">paramTypes[i]</data><data key="type">ArrayAccessExpr</data><data key="parentType">AssignExpr</data></node><node id="154"><data key="reference">java.lang.Class[]</data><data key="identifier">paramTypes</data><data key="text">paramTypes</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1811"><data key="reference"></data><data key="text">classMethods.put(methodName, methodMap)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="155"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1810"><data key="reference">nonQualifiedClassName</data><data key="identifier">Method</data><data key="text">Method</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="156"><data key="reference"></data><data key="text">params[i].getClass()</data><data key="type">MethodCallExpr</data><data key="parentType">AssignExpr</data></node><node id="157"><data key="reference"></data><data key="text">params[i]</data><data key="type">ArrayAccessExpr</data><data key="parentType">MethodCallExpr</data></node><node id="158"><data key="reference">java.lang.Object[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="159"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1819"><data key="reference">java.lang.String</data><data key="identifier">className</data><data key="text">className</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1818"><data key="reference">otherMethodCall</data><data key="identifier">put</data><data key="text">put</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1817"><data key="reference">java.util.Map</data><data key="identifier">classMaps</data><data key="text">classMaps</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1816"><data key="reference"></data><data key="text">classMaps.put(className, classMethods)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1815"><data key="reference">java.util.Map</data><data key="identifier">methodMap</data><data key="text">methodMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1814"><data key="reference">java.lang.String</data><data key="identifier">methodName</data><data key="text">methodName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1813"><data key="reference">otherMethodCall</data><data key="identifier">put</data><data key="text">put</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1812"><data key="reference">java.util.Map</data><data key="identifier">classMethods</data><data key="text">classMethods</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="160"><data key="reference">otherMethodCall</data><data key="identifier">getClass</data><data key="text">getClass</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="161"><data key="reference"></data><data key="text">try {
    Constructor&lt;T&gt; con = getConstructor(theClass, paramTypes);
    if (con == null) {
        StringBuilder buffer = new StringBuilder();
        buffer.append("Constructor not found for class: ");
        buffer.append(theClass.getName());
        buffer.append(" with specified or ancestor parameter classes: ");
        for (Class paramType : paramTypes) {
            buffer.append(paramType.getName());
            buffer.append(',');
        }
        buffer.setLength(buffer.length() - 1);
        throw new ReflectorException(buffer.toString());
    }
    return con.newInstance(params);
} catch (InstantiationException ex) {
    throw new ReflectorException(ex);
} catch (InvocationTargetException ex) {
    throw new ReflectorException(ex);
} catch (IllegalAccessException ex) {
    throw new ReflectorException(ex);
}</data><data key="type">TryStmt</data><data key="parentType">BlockStmt</data></node><node id="162"><data key="reference"></data><data key="text">{
    Constructor&lt;T&gt; con = getConstructor(theClass, paramTypes);
    if (con == null) {
        StringBuilder buffer = new StringBuilder();
        buffer.append("Constructor not found for class: ");
        buffer.append(theClass.getName());
        buffer.append(" with specified or ancestor parameter classes: ");
        for (Class paramType : paramTypes) {
            buffer.append(paramType.getName());
            buffer.append(',');
        }
        buffer.setLength(buffer.length() - 1);
        throw new ReflectorException(buffer.toString());
    }
    return con.newInstance(params);
}</data><data key="type">BlockStmt</data><data key="parentType">TryStmt</data></node><node id="163"><data key="reference"></data><data key="modifier"></data><data key="text">Constructor&lt;T&gt; con = getConstructor(theClass, paramTypes)</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="164"><data key="reference"></data><data key="text">con = getConstructor(theClass, paramTypes)</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="165"><data key="reference"></data><data key="text">Constructor&lt;T&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1822"><data key="reference"></data><data key="modifier"></data><data key="text">String key = className + "::" + methodName</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="166"><data key="reference">nonQualifiedClassName</data><data key="identifier">Constructor</data><data key="text">Constructor</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1821"><data key="reference"></data><data key="text">{
    String key = className + "::" + methodName;
    synchronized (key.intern()) {
        methodMap = classMethods.get(methodName);
        if (methodMap == null) {
            methodMap = new HashMap&lt;String, Method&gt;();
            classMethods.put(methodName, methodMap);
        }
    }
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="167"><data key="reference"></data><data key="text">T</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1820"><data key="reference">java.util.Map</data><data key="identifier">classMethods</data><data key="text">classMethods</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="168"><data key="reference">nonQualifiedClassName</data><data key="identifier">T</data><data key="text">T</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="169"><data key="reference">java.lang.reflect.Constructor</data><data key="identifier">con</data><data key="text">con</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1829"><data key="reference">java.lang.String</data><data key="identifier">className</data><data key="text">className</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1828"><data key="reference"></data><data key="text">className + "::"</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="1827"><data key="reference"></data><data key="text">className + "::" + methodName</data><data key="type">BinaryExpr</data><data key="parentType">VariableDeclarator</data></node><node id="1826"><data key="reference">java.lang.String</data><data key="identifier">key</data><data key="text">key</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="1825"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1824"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="1823"><data key="reference"></data><data key="text">key = className + "::" + methodName</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="170"><data key="reference"></data><data key="text">getConstructor(theClass, paramTypes)</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="171"><data key="reference">otherMethodCall</data><data key="identifier">getConstructor</data><data key="text">getConstructor</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="172"><data key="reference">java.lang.Class</data><data key="identifier">theClass</data><data key="text">theClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="173"><data key="reference">java.lang.Class[]</data><data key="identifier">paramTypes</data><data key="text">paramTypes</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="174"><data key="reference"></data><data key="text">if (con == null) {
    StringBuilder buffer = new StringBuilder();
    buffer.append("Constructor not found for class: ");
    buffer.append(theClass.getName());
    buffer.append(" with specified or ancestor parameter classes: ");
    for (Class paramType : paramTypes) {
        buffer.append(paramType.getName());
        buffer.append(',');
    }
    buffer.setLength(buffer.length() - 1);
    throw new ReflectorException(buffer.toString());
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="175"><data key="reference"></data><data key="text">con == null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="176"><data key="reference">java.lang.reflect.Constructor</data><data key="identifier">con</data><data key="text">con</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1833"><data key="reference"></data><data key="text">key.intern()</data><data key="type">MethodCallExpr</data><data key="parentType">SynchronizedStmt</data></node><node id="177"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1832"><data key="reference"></data><data key="text">synchronized (key.intern()) {
    methodMap = classMethods.get(methodName);
    if (methodMap == null) {
        methodMap = new HashMap&lt;String, Method&gt;();
        classMethods.put(methodName, methodMap);
    }
}</data><data key="type">SynchronizedStmt</data><data key="parentType">BlockStmt</data></node><node id="178"><data key="reference"></data><data key="text">{
    StringBuilder buffer = new StringBuilder();
    buffer.append("Constructor not found for class: ");
    buffer.append(theClass.getName());
    buffer.append(" with specified or ancestor parameter classes: ");
    for (Class paramType : paramTypes) {
        buffer.append(paramType.getName());
        buffer.append(',');
    }
    buffer.setLength(buffer.length() - 1);
    throw new ReflectorException(buffer.toString());
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1831"><data key="reference">java.lang.String</data><data key="identifier">methodName</data><data key="text">methodName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="179"><data key="reference"></data><data key="modifier"></data><data key="text">StringBuilder buffer = new StringBuilder()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1830"><data key="reference"></data><data key="identifier">::</data><data key="text">"::"</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1839"><data key="reference"></data><data key="text">classMethods.get(methodName)</data><data key="type">MethodCallExpr</data><data key="parentType">AssignExpr</data></node><node id="1838"><data key="reference">java.util.Map</data><data key="identifier">methodMap</data><data key="text">methodMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1837"><data key="reference"></data><data key="identifier">=</data><data key="text">methodMap = classMethods.get(methodName)</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1836"><data key="reference"></data><data key="text">{
    methodMap = classMethods.get(methodName);
    if (methodMap == null) {
        methodMap = new HashMap&lt;String, Method&gt;();
        classMethods.put(methodName, methodMap);
    }
}</data><data key="type">BlockStmt</data><data key="parentType">SynchronizedStmt</data></node><node id="1835"><data key="reference">otherMethodCall</data><data key="identifier">intern</data><data key="text">intern</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1834"><data key="reference">java.lang.String</data><data key="identifier">key</data><data key="text">key</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="180"><data key="reference"></data><data key="text">buffer = new StringBuilder()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="181"><data key="reference"></data><data key="text">StringBuilder</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="182"><data key="reference">nonQualifiedClassName</data><data key="identifier">StringBuilder</data><data key="text">StringBuilder</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="183"><data key="reference">java.lang.StringBuilder</data><data key="identifier">buffer</data><data key="text">buffer</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="184"><data key="reference"></data><data key="text">new StringBuilder()</data><data key="type">ObjectCreationExpr</data><data key="parentType">VariableDeclarator</data></node><node id="185"><data key="reference"></data><data key="text">StringBuilder</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="186"><data key="reference">nonQualifiedClassName</data><data key="identifier">StringBuilder</data><data key="text">StringBuilder</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="187"><data key="reference"></data><data key="text">buffer.append("Constructor not found for class: ")</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1844"><data key="reference"></data><data key="text">methodMap == null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="188"><data key="reference">java.lang.StringBuilder</data><data key="identifier">buffer</data><data key="text">buffer</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1843"><data key="reference"></data><data key="text">if (methodMap == null) {
    methodMap = new HashMap&lt;String, Method&gt;();
    classMethods.put(methodName, methodMap);
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="189"><data key="reference">otherMethodCall</data><data key="identifier">append</data><data key="text">append</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1842"><data key="reference">java.lang.String</data><data key="identifier">methodName</data><data key="text">methodName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1841"><data key="reference">otherMethodCall</data><data key="identifier">get</data><data key="text">get</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1840"><data key="reference">java.util.Map</data><data key="identifier">classMethods</data><data key="text">classMethods</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1849"><data key="reference">java.util.Map</data><data key="identifier">methodMap</data><data key="text">methodMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1848"><data key="reference"></data><data key="identifier">=</data><data key="text">methodMap = new HashMap&lt;String, Method&gt;()</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1847"><data key="reference"></data><data key="text">{
    methodMap = new HashMap&lt;String, Method&gt;();
    classMethods.put(methodName, methodMap);
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1846"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1845"><data key="reference">java.util.Map</data><data key="identifier">methodMap</data><data key="text">methodMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="190"><data key="reference"></data><data key="identifier">Constructor not found for class: </data><data key="text">"Constructor not found for class: "</data><data key="type">StringLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="191"><data key="reference"></data><data key="text">buffer.append(theClass.getName())</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="192"><data key="reference">java.lang.StringBuilder</data><data key="identifier">buffer</data><data key="text">buffer</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="193"><data key="reference">otherMethodCall</data><data key="identifier">append</data><data key="text">append</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="194"><data key="reference"></data><data key="text">theClass.getName()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="195"><data key="reference">java.lang.Class</data><data key="identifier">theClass</data><data key="text">theClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="196"><data key="reference">otherMethodCall</data><data key="identifier">getName</data><data key="text">getName</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="197"><data key="reference"></data><data key="text">buffer.append(" with specified or ancestor parameter classes: ")</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="198"><data key="reference">java.lang.StringBuilder</data><data key="identifier">buffer</data><data key="text">buffer</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1855"><data key="reference"></data><data key="text">Method</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="199"><data key="reference">otherMethodCall</data><data key="identifier">append</data><data key="text">append</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1854"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1853"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1852"><data key="reference">nonQualifiedClassName</data><data key="identifier">HashMap</data><data key="text">HashMap</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1851"><data key="reference"></data><data key="text">HashMap&lt;String, Method&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="1850"><data key="reference"></data><data key="text">new HashMap&lt;String, Method&gt;()</data><data key="type">ObjectCreationExpr</data><data key="parentType">AssignExpr</data></node><node id="1859"><data key="reference">otherMethodCall</data><data key="identifier">put</data><data key="text">put</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1858"><data key="reference">java.util.Map</data><data key="identifier">classMethods</data><data key="text">classMethods</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1857"><data key="reference"></data><data key="text">classMethods.put(methodName, methodMap)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1856"><data key="reference">nonQualifiedClassName</data><data key="identifier">Method</data><data key="text">Method</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1863"><data key="reference">java.util.Map</data><data key="identifier">methodMap</data><data key="text">methodMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1862"><data key="reference"></data><data key="text">return methodMap;</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="1861"><data key="reference">java.util.Map</data><data key="identifier">methodMap</data><data key="text">methodMap</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1860"><data key="reference">java.lang.String</data><data key="identifier">methodName</data><data key="text">methodName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1404"><data key="reference">otherMethodCall</data><data key="identifier">getField</data><data key="text">getField</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="1403"><data key="reference"></data><data key="text">getField(target, propertyName, true)</data><data key="type">MethodCallExpr</data><data key="parentType">AssignExpr</data></node><node id="1402"><data key="reference">java.lang.Object</data><data key="identifier">returnValue</data><data key="text">returnValue</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1401"><data key="reference"></data><data key="identifier">=</data><data key="text">returnValue = getField(target, propertyName, true)</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="1400"><data key="reference"></data><data key="text">{
    returnValue = getField(target, propertyName, true);
    if (returnValue == null) {
        // TODO: Check if exception is the right action! Field exists, but contains null
        throw new ReflectorException("Neither method: \'" + propertyName + "\' nor bean accessor: \'" + beanAccessor + "\' can be found for class: \'" + targetClass + "\', and retrieval of field: \'" + propertyName + "\' returned null as value.");
    }
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1409"><data key="reference"></data><data key="text">returnValue == null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="1408"><data key="reference"></data><data key="text">if (returnValue == null) {
    // TODO: Check if exception is the right action! Field exists, but contains null
    throw new ReflectorException("Neither method: \'" + propertyName + "\' nor bean accessor: \'" + beanAccessor + "\' can be found for class: \'" + targetClass + "\', and retrieval of field: \'" + propertyName + "\' returned null as value.");
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="1407"><data key="reference"></data><data key="identifier">true</data><data key="text">true</data><data key="type">BooleanLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="1406"><data key="reference">java.lang.String</data><data key="identifier">propertyName</data><data key="text">propertyName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1405"><data key="reference">java.lang.Object</data><data key="identifier">target</data><data key="text">target</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1415"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="1414"><data key="reference"></data><data key="text">new ReflectorException("Neither method: \'" + propertyName + "\' nor bean accessor: \'" + beanAccessor + "\' can be found for class: \'" + targetClass + "\', and retrieval of field: \'" + propertyName + "\' returned null as value.")</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="1413"><data key="reference"></data><data key="text">// TODO: Check if exception is the right action! Field exists, but contains null
throw new ReflectorException("Neither method: \'" + propertyName + "\' nor bean accessor: \'" + beanAccessor + "\' can be found for class: \'" + targetClass + "\', and retrieval of field: \'" + propertyName + "\' returned null as value.");</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="1412"><data key="reference"></data><data key="text">{
    // TODO: Check if exception is the right action! Field exists, but contains null
    throw new ReflectorException("Neither method: \'" + propertyName + "\' nor bean accessor: \'" + beanAccessor + "\' can be found for class: \'" + targetClass + "\', and retrieval of field: \'" + propertyName + "\' returned null as value.");
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="1411"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1410"><data key="reference">java.lang.Object</data><data key="identifier">returnValue</data><data key="text">returnValue</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1419"><data key="reference"></data><data key="text">"Neither method: \'" + propertyName + "\' nor bean accessor: \'" + beanAccessor + "\' can be found for class: \'" + targetClass + "\', and retrieval of field: \'"</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="1418"><data key="reference"></data><data key="text">"Neither method: \'" + propertyName + "\' nor bean accessor: \'" + beanAccessor + "\' can be found for class: \'" + targetClass + "\', and retrieval of field: \'" + propertyName</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="1417"><data key="reference"></data><data key="text">"Neither method: \'" + propertyName + "\' nor bean accessor: \'" + beanAccessor + "\' can be found for class: \'" + targetClass + "\', and retrieval of field: \'" + propertyName + "\' returned null as value."</data><data key="type">BinaryExpr</data><data key="parentType">ObjectCreationExpr</data></node><node id="1416"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectorException</data><data key="text">ReflectorException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1426"><data key="reference">java.lang.String</data><data key="identifier">propertyName</data><data key="text">propertyName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1425"><data key="reference"></data><data key="identifier">Neither method: \'</data><data key="text">"Neither method: \'"</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1424"><data key="reference"></data><data key="text">"Neither method: \'" + propertyName</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="1423"><data key="reference"></data><data key="text">"Neither method: \'" + propertyName + "\' nor bean accessor: \'"</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="1422"><data key="reference"></data><data key="text">"Neither method: \'" + propertyName + "\' nor bean accessor: \'" + beanAccessor</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="1421"><data key="reference"></data><data key="text">"Neither method: \'" + propertyName + "\' nor bean accessor: \'" + beanAccessor + "\' can be found for class: \'"</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="1420"><data key="reference"></data><data key="text">"Neither method: \'" + propertyName + "\' nor bean accessor: \'" + beanAccessor + "\' can be found for class: \'" + targetClass</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="1429"><data key="reference"></data><data key="identifier">\' can be found for class: \'</data><data key="text">"\' can be found for class: \'"</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1428"><data key="reference">java.lang.String</data><data key="identifier">beanAccessor</data><data key="text">beanAccessor</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1427"><data key="reference"></data><data key="identifier">\' nor bean accessor: \'</data><data key="text">"\' nor bean accessor: \'"</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1440"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1437"><data key="reference">userDefinedMethodName</data><data key="identifier">getMethod</data><data key="text">getMethod</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="1436"><data key="reference"></data><data key="modifier">public</data><data key="text">/**
 * Return the method, checking the cache first and storing in cache if not already there..
 *
 * @param targetClass The class to get the method from
 * @param params The classes of the parameters which the method should match.
 * @return the Method object that matches.
 * @throws ReflectorException In case we can't retrieve the proper method.
 */
public Method getMethod(Class targetClass, String methodName, Class[] params) throws ReflectorException {
    Method method = _getMethod(targetClass, methodName, params);
    if (method == null) {
        throw new ReflectorException("Method: \'" + methodName + "\' not found in class: \'" + targetClass + "\'");
    }
    return method;
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="1435"><data key="reference">java.lang.Object</data><data key="identifier">returnValue</data><data key="text">returnValue</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1434"><data key="reference"></data><data key="text">return returnValue;</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="1433"><data key="reference"></data><data key="identifier">\' returned null as value.</data><data key="text">"\' returned null as value."</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1432"><data key="reference">java.lang.String</data><data key="identifier">propertyName</data><data key="text">propertyName</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1431"><data key="reference"></data><data key="identifier">\', and retrieval of field: \'</data><data key="text">"\', and retrieval of field: \'"</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="1430"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="1439"><data key="reference"></data><data key="text">Class</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1438"><data key="reference"></data><data key="modifier"></data><data key="text">Class targetClass</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="1451"><data key="reference"></data><data key="text">ReflectorException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="1450"><data key="reference">java.lang.Class[]</data><data key="identifier">params</data><data key="text">params</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1448"><data key="reference"></data><data key="text">Class</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayType</data></node><node id="1447"><data key="reference"></data><data key="text">Class[]</data><data key="type">ArrayType</data><data key="parentType">Parameter</data></node><node id="1446"><data key="reference"></data><data key="modifier"></data><data key="text">Class[] params</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="1445"><data key="reference">java.lang.String</data><data key="identifier">methodName</data><data key="text">methodName</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1444"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="1443"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="1442"><data key="reference"></data><data key="modifier"></data><data key="text">String methodName</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="1441"><data key="reference">java.lang.Class</data><data key="identifier">targetClass</data><data key="text">targetClass</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="1449"><data key="reference">nonQualifiedClassName</data><data key="identifier">Class</data><data key="text">Class</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><edge id="2891" source="1462" target="1463" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2897" source="1461" target="1464" label="AST"><data key="type">AST</data></edge><edge id="2892" source="1461" target="1463" label="AST"><data key="type">AST</data></edge><edge id="2890" source="1461" target="1462" label="AST"><data key="type">AST</data></edge><edge id="2902" source="1461" target="1465" label="AST"><data key="type">AST</data></edge><edge id="2888" source="1460" target="1461" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2886" source="1458" target="1459" label="AST"><data key="type">AST</data></edge><edge id="2885" source="1458" target="1460" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2889" source="1457" target="1461" label="AST"><data key="type">AST</data></edge><edge id="2887" source="1457" target="1460" label="AST"><data key="type">AST</data></edge><edge id="2884" source="1457" target="1458" label="AST"><data key="type">AST</data></edge><edge id="2883" source="1456" target="1457" label="AST"><data key="type">AST</data></edge><edge id="2882" source="1456" target="1466" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2941" source="1455" target="1484" label="AST"><data key="type">AST</data></edge><edge id="2881" source="1455" target="1456" label="AST"><data key="type">AST</data></edge><edge id="2906" source="1455" target="1466" label="AST"><data key="type">AST</data></edge><edge id="2879" source="1453" target="1454" label="AST"><data key="type">AST</data></edge><edge id="2878" source="1453" target="1455" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2921" source="1473" target="1474" label="AST"><data key="type">AST</data></edge><edge id="2920" source="1473" target="1475" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2922" source="1472" target="1475" label="AST"><data key="type">AST</data></edge><edge id="2919" source="1472" target="1473" label="AST"><data key="type">AST</data></edge><edge id="2918" source="1471" target="1472" label="AST"><data key="type">AST</data></edge><edge id="2917" source="1470" target="1471" label="AST"><data key="type">AST</data></edge><edge id="0" source="1" target="2" label="AST"><data key="type">AST</data></edge><edge id="13" source="1" target="13" label="AST"><data key="type">AST</data></edge><edge id="25" source="1" target="23" label="AST"><data key="type">AST</data></edge><edge id="36" source="1" target="32" label="AST"><data key="type">AST</data></edge><edge id="7" source="1" target="8" label="AST"><data key="type">AST</data></edge><edge id="19" source="1" target="18" label="AST"><data key="type">AST</data></edge><edge id="41" source="1" target="36" label="AST"><data key="type">AST</data></edge><edge id="31" source="1" target="28" label="AST"><data key="type">AST</data></edge><edge id="2" source="2" target="3" label="AST"><data key="type">AST</data></edge><edge id="1" source="2" target="8" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2911" source="1468" target="1460" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2914" source="1468" target="1460" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2913" source="1468" target="1460" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2912" source="1468" target="1469" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3" source="3" target="4" label="AST"><data key="type">AST</data></edge><edge id="2910" source="1467" target="1468" label="AST"><data key="type">AST</data></edge><edge id="2915" source="1467" target="1469" label="AST"><data key="type">AST</data></edge><edge id="2909" source="1467" target="1470" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="4" source="4" target="5" label="AST"><data key="type">AST</data></edge><edge id="2908" source="1466" target="1467" label="AST"><data key="type">AST</data></edge><edge id="2916" source="1466" target="1470" label="AST"><data key="type">AST</data></edge><edge id="2907" source="1466" target="1484" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="5" source="5" target="6" label="AST"><data key="type">AST</data></edge><edge id="2903" source="1465" target="1450" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2905" source="1465" target="1450" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2904" source="1465" target="1450" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="6" source="6" target="7" label="AST"><data key="type">AST</data></edge><edge id="2898" source="1464" target="1445" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2901" source="1464" target="1445" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2900" source="1464" target="1445" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2899" source="1464" target="1465" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2893" source="1463" target="1441" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2896" source="1463" target="1441" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2895" source="1463" target="1441" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2894" source="1463" target="1464" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="9" source="8" target="9" label="AST"><data key="type">AST</data></edge><edge id="8" source="8" target="13" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="10" source="9" target="10" label="AST"><data key="type">AST</data></edge><edge id="1908" source="1000" target="1001" label="AST"><data key="type">AST</data></edge><edge id="1915" source="1000" target="1003" label="AST"><data key="type">AST</data></edge><edge id="1913" source="1000" target="1002" label="AST"><data key="type">AST</data></edge><edge id="1907" source="1000" target="1004" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2942" source="1484" target="1485" label="AST"><data key="type">AST</data></edge><edge id="2946" source="1484" target="1436" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="2937" source="1482" target="1441" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2939" source="1482" target="1463" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2938" source="1482" target="1463" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2932" source="1480" target="1445" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2934" source="1480" target="1464" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2933" source="1480" target="1464" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2930" source="1479" target="1480" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2931" source="1478" target="1480" label="AST"><data key="type">AST</data></edge><edge id="2929" source="1478" target="1479" label="AST"><data key="type">AST</data></edge><edge id="2928" source="1478" target="1481" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2927" source="1477" target="1478" label="AST"><data key="type">AST</data></edge><edge id="2935" source="1477" target="1481" label="AST"><data key="type">AST</data></edge><edge id="2926" source="1477" target="1482" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2925" source="1476" target="1477" label="AST"><data key="type">AST</data></edge><edge id="2936" source="1476" target="1482" label="AST"><data key="type">AST</data></edge><edge id="2924" source="1476" target="1483" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2940" source="1475" target="1483" label="AST"><data key="type">AST</data></edge><edge id="2923" source="1475" target="1476" label="AST"><data key="type">AST</data></edge><edge id="1931" source="1011" target="1012" label="AST"><data key="type">AST</data></edge><edge id="1947" source="1011" target="1018" label="AST"><data key="type">AST</data></edge><edge id="1926" source="1010" target="969" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1929" source="1010" target="969" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1928" source="1010" target="969" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1927" source="1010" target="1011" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2961" source="1493" target="1494" label="AST"><data key="type">AST</data></edge><edge id="2960" source="1493" target="1495" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2962" source="1492" target="1495" label="AST"><data key="type">AST</data></edge><edge id="2959" source="1492" target="1493" label="AST"><data key="type">AST</data></edge><edge id="2958" source="1492" target="1496" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1923" source="1007" target="1008" label="AST"><data key="type">AST</data></edge><edge id="1922" source="1007" target="1009" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1921" source="1006" target="1007" label="AST"><data key="type">AST</data></edge><edge id="1924" source="1006" target="1009" label="AST"><data key="type">AST</data></edge><edge id="1920" source="1005" target="1006" label="AST"><data key="type">AST</data></edge><edge id="1919" source="1005" target="1010" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2955" source="1489" target="1490" label="AST"><data key="type">AST</data></edge><edge id="2954" source="1489" target="1491" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1930" source="1004" target="1011" label="AST"><data key="type">AST</data></edge><edge id="1918" source="1004" target="1005" label="AST"><data key="type">AST</data></edge><edge id="1925" source="1004" target="1010" label="AST"><data key="type">AST</data></edge><edge id="1917" source="1004" target="1022" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2953" source="1488" target="1489" label="AST"><data key="type">AST</data></edge><edge id="2956" source="1488" target="1491" label="AST"><data key="type">AST</data></edge><edge id="2952" source="1488" target="1492" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2950" source="1487" target="1488" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1914" source="1002" target="1003" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2976" source="1486" target="1505" label="AST"><data key="type">AST</data></edge><edge id="2963" source="1486" target="1496" label="AST"><data key="type">AST</data></edge><edge id="2951" source="1486" target="1488" label="AST"><data key="type">AST</data></edge><edge id="2973" source="1486" target="1503" label="AST"><data key="type">AST</data></edge><edge id="2970" source="1486" target="1501" label="AST"><data key="type">AST</data></edge><edge id="2949" source="1486" target="1487" label="AST"><data key="type">AST</data></edge><edge id="2957" source="1486" target="1492" label="AST"><data key="type">AST</data></edge><edge id="2948" source="1486" target="1685" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1909" source="1001" target="995" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1912" source="1001" target="995" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1911" source="1001" target="995" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1910" source="1001" target="1002" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2943" source="1485" target="1460" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2945" source="1485" target="1468" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2944" source="1485" target="1468" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1958" source="1022" target="1023" label="AST"><data key="type">AST</data></edge><edge id="1968" source="1022" target="1028" label="AST"><data key="type">AST</data></edge><edge id="1957" source="1022" target="1037" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1954" source="1020" target="1021" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1949" source="1019" target="995" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1952" source="1019" target="1013" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1951" source="1019" target="1013" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1950" source="1019" target="1020" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1953" source="1018" target="1020" label="AST"><data key="type">AST</data></edge><edge id="1948" source="1018" target="1019" label="AST"><data key="type">AST</data></edge><edge id="1955" source="1018" target="1021" label="AST"><data key="type">AST</data></edge><edge id="1942" source="1016" target="1009" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1945" source="1016" target="1009" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1944" source="1016" target="1009" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1943" source="1016" target="1017" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1941" source="1015" target="1016" label="AST"><data key="type">AST</data></edge><edge id="1946" source="1015" target="1017" label="AST"><data key="type">AST</data></edge><edge id="1939" source="1014" target="1015" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2968" source="1498" target="1499" label="AST"><data key="type">AST</data></edge><edge id="1934" source="1013" target="995" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1937" source="1013" target="1001" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1936" source="1013" target="1001" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1935" source="1013" target="1014" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2967" source="1497" target="1498" label="AST"><data key="type">AST</data></edge><edge id="2966" source="1497" target="1500" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1940" source="1012" target="1015" label="AST"><data key="type">AST</data></edge><edge id="1938" source="1012" target="1014" label="AST"><data key="type">AST</data></edge><edge id="1933" source="1012" target="1013" label="AST"><data key="type">AST</data></edge><edge id="1932" source="1012" target="1018" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2965" source="1496" target="1497" label="AST"><data key="type">AST</data></edge><edge id="2969" source="1496" target="1500" label="AST"><data key="type">AST</data></edge><edge id="2964" source="1496" target="1501" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1985" source="1033" target="1035" label="AST"><data key="type">AST</data></edge><edge id="1980" source="1033" target="1034" label="AST"><data key="type">AST</data></edge><edge id="1979" source="1033" target="1036" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1986" source="1032" target="1036" label="AST"><data key="type">AST</data></edge><edge id="1978" source="1032" target="1033" label="AST"><data key="type">AST</data></edge><edge id="1976" source="1031" target="1032" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1971" source="1030" target="995" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1974" source="1030" target="1019" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1973" source="1030" target="1019" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1972" source="1030" target="1031" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1975" source="1029" target="1031" label="AST"><data key="type">AST</data></edge><edge id="1970" source="1029" target="1030" label="AST"><data key="type">AST</data></edge><edge id="1977" source="1029" target="1032" label="AST"><data key="type">AST</data></edge><edge id="1969" source="1028" target="1029" label="AST"><data key="type">AST</data></edge><edge id="1963" source="1025" target="969" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1965" source="1025" target="1010" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1964" source="1025" target="1026" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1149" source="600" target="603" label="AST"><data key="type">AST</data></edge><edge id="1146" source="600" target="601" label="AST"><data key="type">AST</data></edge><edge id="1145" source="600" target="604" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1962" source="1024" target="1025" label="AST"><data key="type">AST</data></edge><edge id="1966" source="1024" target="1026" label="AST"><data key="type">AST</data></edge><edge id="1961" source="1024" target="1027" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1148" source="601" target="602" label="AST"><data key="type">AST</data></edge><edge id="1147" source="601" target="603" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1960" source="1023" target="1024" label="AST"><data key="type">AST</data></edge><edge id="1967" source="1023" target="1027" label="AST"><data key="type">AST</data></edge><edge id="1959" source="1023" target="1028" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1151" source="604" target="605" label="AST"><data key="type">AST</data></edge><edge id="1152" source="605" target="606" label="AST"><data key="type">AST</data></edge><edge id="1156" source="606" target="609" label="AST"><data key="type">AST</data></edge><edge id="1153" source="606" target="607" label="AST"><data key="type">AST</data></edge><edge id="1155" source="607" target="608" label="AST"><data key="type">AST</data></edge><edge id="1154" source="607" target="609" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1157" source="609" target="603" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2004" source="1044" target="1045" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2005" source="1043" target="1045" label="AST"><data key="type">AST</data></edge><edge id="2003" source="1043" target="1044" label="AST"><data key="type">AST</data></edge><edge id="2002" source="1043" target="1047" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2007" source="1042" target="1047" label="AST"><data key="type">AST</data></edge><edge id="2001" source="1042" target="1043" label="AST"><data key="type">AST</data></edge><edge id="2000" source="1041" target="1042" label="AST"><data key="type">AST</data></edge><edge id="1999" source="1041" target="1048" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1996" source="1039" target="1040" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1990" source="1038" target="995" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1994" source="1038" target="1034" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1993" source="1038" target="1034" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1992" source="1038" target="1019" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1991" source="1038" target="1039" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1997" source="1037" target="1040" label="AST"><data key="type">AST</data></edge><edge id="1995" source="1037" target="1039" label="AST"><data key="type">AST</data></edge><edge id="1989" source="1037" target="1038" label="AST"><data key="type">AST</data></edge><edge id="1988" source="1037" target="1041" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1166" source="610" target="615" label="AST"><data key="type">AST</data></edge><edge id="1160" source="610" target="611" label="AST"><data key="type">AST</data></edge><edge id="1159" source="610" target="621" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1165" source="611" target="614" label="AST"><data key="type">AST</data></edge><edge id="1162" source="611" target="612" label="AST"><data key="type">AST</data></edge><edge id="1161" source="611" target="615" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1164" source="612" target="613" label="AST"><data key="type">AST</data></edge><edge id="1163" source="612" target="614" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1981" source="1034" target="995" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1984" source="1034" target="1030" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1983" source="1034" target="1030" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1982" source="1034" target="1035" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1167" source="615" target="616" label="AST"><data key="type">AST</data></edge><edge id="1168" source="616" target="617" label="AST"><data key="type">AST</data></edge><edge id="1169" source="617" target="618" label="AST"><data key="type">AST</data></edge><edge id="1172" source="617" target="620" label="AST"><data key="type">AST</data></edge><edge id="1171" source="618" target="619" label="AST"><data key="type">AST</data></edge><edge id="1170" source="618" target="620" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2018" source="1054" target="995" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2021" source="1054" target="1038" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2020" source="1054" target="1038" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2019" source="1054" target="1055" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2017" source="1053" target="1054" label="AST"><data key="type">AST</data></edge><edge id="2022" source="1053" target="1055" label="AST"><data key="type">AST</data></edge><edge id="2015" source="1052" target="1053" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2013" source="1050" target="1051" label="AST"><data key="type">AST</data></edge><edge id="2012" source="1050" target="1052" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2016" source="1049" target="1053" label="AST"><data key="type">AST</data></edge><edge id="2014" source="1049" target="1052" label="AST"><data key="type">AST</data></edge><edge id="2011" source="1049" target="1050" label="AST"><data key="type">AST</data></edge><edge id="1173" source="620" target="614" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2010" source="1048" target="1049" label="AST"><data key="type">AST</data></edge><edge id="2009" source="1048" target="1056" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1175" source="621" target="622" label="AST"><data key="type">AST</data></edge><edge id="1181" source="621" target="626" label="AST"><data key="type">AST</data></edge><edge id="1177" source="622" target="623" label="AST"><data key="type">AST</data></edge><edge id="1180" source="622" target="625" label="AST"><data key="type">AST</data></edge><edge id="1176" source="622" target="626" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1179" source="623" target="624" label="AST"><data key="type">AST</data></edge><edge id="1178" source="623" target="625" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2006" source="1045" target="1046" label="AST"><data key="type">AST</data></edge><edge id="1182" source="626" target="627" label="AST"><data key="type">AST</data></edge><edge id="1183" source="627" target="628" label="AST"><data key="type">AST</data></edge><edge id="1187" source="628" target="631" label="AST"><data key="type">AST</data></edge><edge id="1184" source="628" target="629" label="AST"><data key="type">AST</data></edge><edge id="1186" source="629" target="630" label="AST"><data key="type">AST</data></edge><edge id="1185" source="629" target="631" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2052" source="1066" target="1052" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2054" source="1066" target="1058" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2053" source="1066" target="1058" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2050" source="1065" target="1066" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2045" source="1064" target="987" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2048" source="1064" target="987" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2047" source="1064" target="987" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2046" source="1064" target="1065" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2049" source="1063" target="1065" label="AST"><data key="type">AST</data></edge><edge id="2044" source="1063" target="1064" label="AST"><data key="type">AST</data></edge><edge id="2051" source="1063" target="1066" label="AST"><data key="type">AST</data></edge><edge id="2037" source="1062" target="1047" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2042" source="1062" target="1047" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2041" source="1062" target="1066" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="2040" source="1062" target="1064" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="2039" source="1062" target="1047" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2038" source="1062" target="1063" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2036" source="1061" target="1062" label="AST"><data key="type">AST</data></edge><edge id="2043" source="1061" target="1063" label="AST"><data key="type">AST</data></edge><edge id="2035" source="1061" target="1067" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2034" source="1060" target="1061" label="AST"><data key="type">AST</data></edge><edge id="2055" source="1060" target="1067" label="AST"><data key="type">AST</data></edge><edge id="1188" source="631" target="625" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1217" source="632" target="650" label="AST"><data key="type">AST</data></edge><edge id="1205" source="632" target="642" label="AST"><data key="type">AST</data></edge><edge id="1214" source="632" target="648" label="AST"><data key="type">AST</data></edge><edge id="1211" source="632" target="646" label="AST"><data key="type">AST</data></edge><edge id="1199" source="632" target="638" label="AST"><data key="type">AST</data></edge><edge id="1197" source="632" target="637" label="AST"><data key="type">AST</data></edge><edge id="1191" source="632" target="633" label="AST"><data key="type">AST</data></edge><edge id="1190" source="632" target="657" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2028" source="1058" target="1052" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2031" source="1058" target="1052" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2030" source="1058" target="1052" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2029" source="1058" target="1059" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1195" source="633" target="635" label="AST"><data key="type">AST</data></edge><edge id="1193" source="633" target="634" label="AST"><data key="type">AST</data></edge><edge id="1192" source="633" target="637" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2027" source="1057" target="1058" label="AST"><data key="type">AST</data></edge><edge id="2032" source="1057" target="1059" label="AST"><data key="type">AST</data></edge><edge id="2026" source="1057" target="1060" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1194" source="634" target="635" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2025" source="1056" target="1057" label="AST"><data key="type">AST</data></edge><edge id="2033" source="1056" target="1060" label="AST"><data key="type">AST</data></edge><edge id="2024" source="1056" target="1160" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1196" source="635" target="636" label="AST"><data key="type">AST</data></edge><edge id="1198" source="637" target="638" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1204" source="638" target="641" label="AST"><data key="type">AST</data></edge><edge id="1201" source="638" target="639" label="AST"><data key="type">AST</data></edge><edge id="1200" source="638" target="642" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1203" source="639" target="640" label="AST"><data key="type">AST</data></edge><edge id="1202" source="639" target="641" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2081" source="1077" target="1083" label="AST"><data key="type">AST</data></edge><edge id="2074" source="1077" target="1078" label="AST"><data key="type">AST</data></edge><edge id="2083" source="1077" target="1084" label="AST"><data key="type">AST</data></edge><edge id="2072" source="1075" target="1076" label="AST"><data key="type">AST</data></edge><edge id="2070" source="1074" target="1075" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2069" source="1073" target="1074" label="AST"><data key="type">AST</data></edge><edge id="2071" source="1073" target="1075" label="AST"><data key="type">AST</data></edge><edge id="2068" source="1073" target="1077" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2067" source="1072" target="1073" label="AST"><data key="type">AST</data></edge><edge id="2073" source="1072" target="1077" label="AST"><data key="type">AST</data></edge><edge id="2066" source="1072" target="1093" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2065" source="1071" target="1072" label="AST"><data key="type">AST</data></edge><edge id="2098" source="1071" target="1093" label="AST"><data key="type">AST</data></edge><edge id="1210" source="642" target="645" label="AST"><data key="type">AST</data></edge><edge id="1207" source="642" target="643" label="AST"><data key="type">AST</data></edge><edge id="1206" source="642" target="646" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1209" source="643" target="644" label="AST"><data key="type">AST</data></edge><edge id="1208" source="643" target="645" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2059" source="1069" target="1062" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2062" source="1069" target="1062" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2061" source="1069" target="1062" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2060" source="1069" target="1070" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2058" source="1068" target="1069" label="AST"><data key="type">AST</data></edge><edge id="2063" source="1068" target="1070" label="AST"><data key="type">AST</data></edge><edge id="2057" source="1068" target="1071" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2056" source="1067" target="1068" label="AST"><data key="type">AST</data></edge><edge id="2064" source="1067" target="1071" label="AST"><data key="type">AST</data></edge><edge id="1213" source="646" target="647" label="AST"><data key="type">AST</data></edge><edge id="1212" source="646" target="648" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1216" source="648" target="649" label="AST"><data key="type">AST</data></edge><edge id="1215" source="648" target="650" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2078" source="1080" target="1081" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2090" source="1088" target="1089" label="AST"><data key="type">AST</data></edge><edge id="2088" source="1087" target="1088" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2089" source="1086" target="1088" label="AST"><data key="type">AST</data></edge><edge id="2087" source="1086" target="1087" label="AST"><data key="type">AST</data></edge><edge id="2086" source="1085" target="1086" label="AST"><data key="type">AST</data></edge><edge id="2085" source="1085" target="1090" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2091" source="1084" target="1090" label="AST"><data key="type">AST</data></edge><edge id="2084" source="1084" target="1085" label="AST"><data key="type">AST</data></edge><edge id="2082" source="1083" target="1084" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2080" source="1081" target="1082" label="AST"><data key="type">AST</data></edge><edge id="1218" source="650" target="651" label="AST"><data key="type">AST</data></edge><edge id="1219" source="651" target="652" label="AST"><data key="type">AST</data></edge><edge id="1233" source="651" target="632" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="1227" source="652" target="655" label="AST"><data key="type">AST</data></edge><edge id="1222" source="652" target="654" label="AST"><data key="type">AST</data></edge><edge id="1232" source="652" target="656" label="AST"><data key="type">AST</data></edge><edge id="1220" source="652" target="653" label="AST"><data key="type">AST</data></edge><edge id="1221" source="653" target="654" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1223" source="654" target="641" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1226" source="654" target="641" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1225" source="654" target="641" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1224" source="654" target="655" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1228" source="655" target="645" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1231" source="655" target="645" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1230" source="655" target="645" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1229" source="655" target="656" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2079" source="1079" target="1081" label="AST"><data key="type">AST</data></edge><edge id="2077" source="1079" target="1080" label="AST"><data key="type">AST</data></edge><edge id="2076" source="1078" target="1079" label="AST"><data key="type">AST</data></edge><edge id="2075" source="1078" target="1083" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1238" source="657" target="659" label="AST"><data key="type">AST</data></edge><edge id="1236" source="657" target="658" label="AST"><data key="type">AST</data></edge><edge id="1258" source="657" target="672" label="AST"><data key="type">AST</data></edge><edge id="1244" source="657" target="663" label="AST"><data key="type">AST</data></edge><edge id="1255" source="657" target="670" label="AST"><data key="type">AST</data></edge><edge id="1250" source="657" target="667" label="AST"><data key="type">AST</data></edge><edge id="1261" source="657" target="674" label="AST"><data key="type">AST</data></edge><edge id="1235" source="657" target="783" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1237" source="658" target="659" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1243" source="659" target="662" label="AST"><data key="type">AST</data></edge><edge id="1240" source="659" target="660" label="AST"><data key="type">AST</data></edge><edge id="1239" source="659" target="663" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2093" source="1091" target="964" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2096" source="1091" target="990" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2095" source="1091" target="990" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2094" source="1091" target="1092" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2092" source="1090" target="1091" label="AST"><data key="type">AST</data></edge><edge id="2097" source="1090" target="1092" label="AST"><data key="type">AST</data></edge><edge id="2107" source="1098" target="1099" label="AST"><data key="type">AST</data></edge><edge id="2105" source="1097" target="1098" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2106" source="1096" target="1098" label="AST"><data key="type">AST</data></edge><edge id="2104" source="1096" target="1097" label="AST"><data key="type">AST</data></edge><edge id="2103" source="1096" target="1100" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2108" source="1095" target="1100" label="AST"><data key="type">AST</data></edge><edge id="2102" source="1095" target="1096" label="AST"><data key="type">AST</data></edge><edge id="2101" source="1094" target="1095" label="AST"><data key="type">AST</data></edge><edge id="2100" source="1094" target="1101" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2114" source="1093" target="1102" label="AST"><data key="type">AST</data></edge><edge id="2099" source="1093" target="1094" label="AST"><data key="type">AST</data></edge><edge id="2109" source="1093" target="1101" label="AST"><data key="type">AST</data></edge><edge id="1242" source="660" target="661" label="AST"><data key="type">AST</data></edge><edge id="1241" source="660" target="662" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1249" source="663" target="666" label="AST"><data key="type">AST</data></edge><edge id="1246" source="663" target="664" label="AST"><data key="type">AST</data></edge><edge id="1245" source="663" target="667" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1248" source="664" target="665" label="AST"><data key="type">AST</data></edge><edge id="1247" source="664" target="666" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1254" source="667" target="669" label="AST"><data key="type">AST</data></edge><edge id="1252" source="667" target="668" label="AST"><data key="type">AST</data></edge><edge id="1251" source="667" target="670" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1253" source="668" target="669" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1257" source="670" target="671" label="AST"><data key="type">AST</data></edge><edge id="1256" source="670" target="672" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1260" source="672" target="673" label="AST"><data key="type">AST</data></edge><edge id="1259" source="672" target="674" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1479" source="674" target="781" label="AST"><data key="type">AST</data></edge><edge id="1277" source="674" target="683" label="AST"><data key="type">AST</data></edge><edge id="1262" source="674" target="675" label="AST"><data key="type">AST</data></edge><edge id="1264" source="675" target="676" label="AST"><data key="type">AST</data></edge><edge id="1263" source="675" target="683" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1268" source="676" target="679" label="AST"><data key="type">AST</data></edge><edge id="1265" source="676" target="677" label="AST"><data key="type">AST</data></edge><edge id="1270" source="676" target="680" label="AST"><data key="type">AST</data></edge><edge id="1267" source="677" target="678" label="AST"><data key="type">AST</data></edge><edge id="1266" source="677" target="679" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1269" source="679" target="680" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1276" source="680" target="682" label="AST"><data key="type">AST</data></edge><edge id="1271" source="680" target="681" label="AST"><data key="type">AST</data></edge><edge id="1272" source="681" target="662" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1275" source="681" target="662" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1274" source="681" target="662" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1273" source="681" target="682" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1279" source="683" target="684" label="AST"><data key="type">AST</data></edge><edge id="1289" source="683" target="687" label="AST"><data key="type">AST</data></edge><edge id="1278" source="683" target="781" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1288" source="684" target="686" label="AST"><data key="type">AST</data></edge><edge id="1281" source="684" target="685" label="AST"><data key="type">AST</data></edge><edge id="1280" source="684" target="687" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="367" source="201" target="207" label="AST"><data key="type">AST</data></edge><edge id="360" source="201" target="202" label="AST"><data key="type">AST</data></edge><edge id="373" source="201" target="208" label="AST"><data key="type">AST</data></edge><edge id="359" source="201" target="219" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1283" source="685" target="766" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1282" source="685" target="679" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1287" source="685" target="679" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1286" source="685" target="766" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1285" source="685" target="679" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1284" source="685" target="686" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="362" source="202" target="203" label="AST"><data key="type">AST</data></edge><edge id="361" source="202" target="207" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="363" source="203" target="204" label="AST"><data key="type">AST</data></edge><edge id="366" source="203" target="206" label="AST"><data key="type">AST</data></edge><edge id="1290" source="687" target="688" label="AST"><data key="type">AST</data></edge><edge id="365" source="204" target="205" label="AST"><data key="type">AST</data></edge><edge id="364" source="204" target="206" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1421" source="688" target="748" label="AST"><data key="type">AST</data></edge><edge id="1464" source="688" target="770" label="AST"><data key="type">AST</data></edge><edge id="1291" source="688" target="689" label="AST"><data key="type">AST</data></edge><edge id="1405" source="688" target="737" label="AST"><data key="type">AST</data></edge><edge id="1314" source="689" target="699" label="AST"><data key="type">AST</data></edge><edge id="1358" source="689" target="719" label="AST"><data key="type">AST</data></edge><edge id="1322" source="689" target="704" label="AST"><data key="type">AST</data></edge><edge id="1399" source="689" target="735" label="AST"><data key="type">AST</data></edge><edge id="1293" source="689" target="690" label="AST"><data key="type">AST</data></edge><edge id="1380" source="689" target="728" label="AST"><data key="type">AST</data></edge><edge id="1292" source="689" target="737" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="368" source="207" target="126" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="369" source="207" target="154" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="372" source="207" target="173" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="371" source="207" target="173" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="370" source="207" target="208" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="374" source="208" target="209" label="AST"><data key="type">AST</data></edge><edge id="390" source="208" target="215" label="AST"><data key="type">AST</data></edge><edge id="376" source="209" target="210" label="AST"><data key="type">AST</data></edge><edge id="381" source="209" target="211" label="AST"><data key="type">AST</data></edge><edge id="383" source="209" target="212" label="AST"><data key="type">AST</data></edge><edge id="375" source="209" target="215" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1295" source="690" target="691" label="AST"><data key="type">AST</data></edge><edge id="1294" source="690" target="699" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1301" source="691" target="695" label="AST"><data key="type">AST</data></edge><edge id="1299" source="691" target="694" label="AST"><data key="type">AST</data></edge><edge id="1296" source="691" target="692" label="AST"><data key="type">AST</data></edge><edge id="1298" source="692" target="693" label="AST"><data key="type">AST</data></edge><edge id="1297" source="692" target="694" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="377" source="210" target="183" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="380" source="210" target="198" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="379" source="210" target="198" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="378" source="210" target="211" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1300" source="694" target="695" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="382" source="211" target="212" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1302" source="695" target="696" label="AST"><data key="type">AST</data></edge><edge id="1309" source="695" target="698" label="AST"><data key="type">AST</data></edge><edge id="1307" source="695" target="697" label="AST"><data key="type">AST</data></edge><edge id="389" source="212" target="214" label="AST"><data key="type">AST</data></edge><edge id="384" source="212" target="213" label="AST"><data key="type">AST</data></edge><edge id="1303" source="696" target="679" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1306" source="696" target="685" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1305" source="696" target="685" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1304" source="696" target="697" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="385" source="213" target="206" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="388" source="213" target="206" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="387" source="213" target="206" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="386" source="213" target="214" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1308" source="697" target="698" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1310" source="698" target="666" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1313" source="698" target="666" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1312" source="698" target="698" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1311" source="698" target="666" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="396" source="215" target="217" label="AST"><data key="type">AST</data></edge><edge id="398" source="215" target="218" label="AST"><data key="type">AST</data></edge><edge id="391" source="215" target="216" label="AST"><data key="type">AST</data></edge><edge id="1316" source="699" target="700" label="AST"><data key="type">AST</data></edge><edge id="1315" source="699" target="704" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="392" source="216" target="183" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="395" source="216" target="210" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="394" source="216" target="210" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="393" source="216" target="217" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="397" source="217" target="218" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="401" source="219" target="220" label="AST"><data key="type">AST</data></edge><edge id="406" source="219" target="221" label="AST"><data key="type">AST</data></edge><edge id="408" source="219" target="222" label="AST"><data key="type">AST</data></edge><edge id="400" source="219" target="227" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="402" source="220" target="183" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="405" source="220" target="216" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="404" source="220" target="216" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="403" source="220" target="221" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="407" source="221" target="222" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="417" source="222" target="226" label="AST"><data key="type">AST</data></edge><edge id="409" source="222" target="223" label="AST"><data key="type">AST</data></edge><edge id="411" source="223" target="224" label="AST"><data key="type">AST</data></edge><edge id="416" source="223" target="225" label="AST"><data key="type">AST</data></edge><edge id="410" source="223" target="226" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="412" source="224" target="183" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="415" source="224" target="220" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="414" source="224" target="220" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="413" source="224" target="225" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="419" source="227" target="228" label="AST"><data key="type">AST</data></edge><edge id="420" source="228" target="229" label="AST"><data key="type">AST</data></edge><edge id="423" source="228" target="231" label="AST"><data key="type">AST</data></edge><edge id="422" source="229" target="230" label="AST"><data key="type">AST</data></edge><edge id="421" source="229" target="231" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="424" source="231" target="232" label="AST"><data key="type">AST</data></edge><edge id="429" source="231" target="233" label="AST"><data key="type">AST</data></edge><edge id="425" source="232" target="183" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="428" source="232" target="224" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="427" source="232" target="224" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="426" source="232" target="233" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="431" source="234" target="235" label="AST"><data key="type">AST</data></edge><edge id="445" source="234" target="85" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="432" source="235" target="236" label="AST"><data key="type">AST</data></edge><edge id="437" source="235" target="237" label="AST"><data key="type">AST</data></edge><edge id="439" source="235" target="238" label="AST"><data key="type">AST</data></edge><edge id="433" source="236" target="169" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="436" source="236" target="176" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="435" source="236" target="176" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="434" source="236" target="237" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="438" source="237" target="238" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="440" source="238" target="103" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="441" source="238" target="115" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="444" source="238" target="158" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="442" source="238" target="144" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="443" source="238" target="158" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="454" source="239" target="244" label="AST"><data key="type">AST</data></edge><edge id="448" source="239" target="240" label="AST"><data key="type">AST</data></edge><edge id="447" source="239" target="250" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="453" source="240" target="243" label="AST"><data key="type">AST</data></edge><edge id="450" source="240" target="241" label="AST"><data key="type">AST</data></edge><edge id="449" source="240" target="244" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="452" source="241" target="242" label="AST"><data key="type">AST</data></edge><edge id="451" source="241" target="243" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="455" source="244" target="245" label="AST"><data key="type">AST</data></edge><edge id="456" source="245" target="246" label="AST"><data key="type">AST</data></edge><edge id="457" source="246" target="247" label="AST"><data key="type">AST</data></edge><edge id="460" source="246" target="249" label="AST"><data key="type">AST</data></edge><edge id="459" source="247" target="248" label="AST"><data key="type">AST</data></edge><edge id="458" source="247" target="249" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="461" source="249" target="243" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="464" source="250" target="251" label="AST"><data key="type">AST</data></edge><edge id="470" source="250" target="255" label="AST"><data key="type">AST</data></edge><edge id="463" source="250" target="261" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="466" source="251" target="252" label="AST"><data key="type">AST</data></edge><edge id="469" source="251" target="254" label="AST"><data key="type">AST</data></edge><edge id="465" source="251" target="255" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="468" source="252" target="253" label="AST"><data key="type">AST</data></edge><edge id="467" source="252" target="254" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="471" source="255" target="256" label="AST"><data key="type">AST</data></edge><edge id="472" source="256" target="257" label="AST"><data key="type">AST</data></edge><edge id="473" source="257" target="258" label="AST"><data key="type">AST</data></edge><edge id="476" source="257" target="260" label="AST"><data key="type">AST</data></edge><edge id="475" source="258" target="259" label="AST"><data key="type">AST</data></edge><edge id="474" source="258" target="260" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="477" source="260" target="254" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="485" source="261" target="266" label="AST"><data key="type">AST</data></edge><edge id="479" source="261" target="262" label="AST"><data key="type">AST</data></edge><edge id="484" source="262" target="265" label="AST"><data key="type">AST</data></edge><edge id="481" source="262" target="263" label="AST"><data key="type">AST</data></edge><edge id="480" source="262" target="266" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="483" source="263" target="264" label="AST"><data key="type">AST</data></edge><edge id="482" source="263" target="265" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="486" source="266" target="267" label="AST"><data key="type">AST</data></edge><edge id="487" source="267" target="268" label="AST"><data key="type">AST</data></edge><edge id="488" source="268" target="269" label="AST"><data key="type">AST</data></edge><edge id="491" source="268" target="271" label="AST"><data key="type">AST</data></edge><edge id="490" source="269" target="270" label="AST"><data key="type">AST</data></edge><edge id="489" source="269" target="271" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="492" source="271" target="265" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="495" source="272" target="273" label="AST"><data key="type">AST</data></edge><edge id="522" source="272" target="291" label="AST"><data key="type">AST</data></edge><edge id="501" source="272" target="277" label="AST"><data key="type">AST</data></edge><edge id="525" source="272" target="293" label="AST"><data key="type">AST</data></edge><edge id="504" source="272" target="279" label="AST"><data key="type">AST</data></edge><edge id="515" source="272" target="286" label="AST"><data key="type">AST</data></edge><edge id="506" source="272" target="280" label="AST"><data key="type">AST</data></edge><edge id="528" source="272" target="295" label="AST"><data key="type">AST</data></edge><edge id="494" source="272" target="379" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="497" source="273" target="274" label="AST"><data key="type">AST</data></edge><edge id="499" source="273" target="275" label="AST"><data key="type">AST</data></edge><edge id="496" source="273" target="277" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="498" source="274" target="275" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="500" source="275" target="276" label="AST"><data key="type">AST</data></edge><edge id="503" source="277" target="278" label="AST"><data key="type">AST</data></edge><edge id="502" source="277" target="279" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="505" source="279" target="280" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="514" source="280" target="285" label="AST"><data key="type">AST</data></edge><edge id="508" source="280" target="281" label="AST"><data key="type">AST</data></edge><edge id="507" source="280" target="286" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="510" source="281" target="282" label="AST"><data key="type">AST</data></edge><edge id="512" source="281" target="283" label="AST"><data key="type">AST</data></edge><edge id="509" source="281" target="285" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="511" source="282" target="283" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="513" source="283" target="284" label="AST"><data key="type">AST</data></edge><edge id="521" source="286" target="290" label="AST"><data key="type">AST</data></edge><edge id="517" source="286" target="287" label="AST"><data key="type">AST</data></edge><edge id="516" source="286" target="291" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="519" source="287" target="288" label="AST"><data key="type">AST</data></edge><edge id="518" source="287" target="290" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="520" source="288" target="289" label="AST"><data key="type">AST</data></edge><edge id="524" source="291" target="292" label="AST"><data key="type">AST</data></edge><edge id="523" source="291" target="293" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="527" source="293" target="294" label="AST"><data key="type">AST</data></edge><edge id="526" source="293" target="295" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="624" source="295" target="336" label="AST"><data key="type">AST</data></edge><edge id="549" source="295" target="309" label="AST"><data key="type">AST</data></edge><edge id="529" source="295" target="296" label="AST"><data key="type">AST</data></edge><edge id="531" source="296" target="297" label="AST"><data key="type">AST</data></edge><edge id="530" source="296" target="309" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="532" source="297" target="298" label="AST"><data key="type">AST</data></edge><edge id="536" source="297" target="301" label="AST"><data key="type">AST</data></edge><edge id="538" source="297" target="302" label="AST"><data key="type">AST</data></edge><edge id="534" source="298" target="299" label="AST"><data key="type">AST</data></edge><edge id="533" source="298" target="301" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="535" source="299" target="300" label="AST"><data key="type">AST</data></edge><edge id="2975" source="1503" target="1504" label="AST"><data key="type">AST</data></edge><edge id="2974" source="1503" target="1505" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2972" source="1501" target="1502" label="AST"><data key="type">AST</data></edge><edge id="2971" source="1501" target="1503" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2983" source="1509" target="1510" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2987" source="1508" target="1512" label="AST"><data key="type">AST</data></edge><edge id="2984" source="1508" target="1510" label="AST"><data key="type">AST</data></edge><edge id="2982" source="1508" target="1509" label="AST"><data key="type">AST</data></edge><edge id="2981" source="1508" target="1514" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2980" source="1507" target="1508" label="AST"><data key="type">AST</data></edge><edge id="2991" source="1507" target="1515" label="AST"><data key="type">AST</data></edge><edge id="2989" source="1507" target="1514" label="AST"><data key="type">AST</data></edge><edge id="2979" source="1506" target="1507" label="AST"><data key="type">AST</data></edge><edge id="2978" source="1506" target="1526" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2977" source="1505" target="1506" label="AST"><data key="type">AST</data></edge><edge id="3093" source="1505" target="1566" label="AST"><data key="type">AST</data></edge><edge id="3108" source="1505" target="1574" label="AST"><data key="type">AST</data></edge><edge id="3359" source="1505" target="1683" label="AST"><data key="type">AST</data></edge><edge id="3026" source="1505" target="1535" label="AST"><data key="type">AST</data></edge><edge id="3036" source="1505" target="1539" label="AST"><data key="type">AST</data></edge><edge id="3013" source="1505" target="1526" label="AST"><data key="type">AST</data></edge><edge id="3076" source="1505" target="1557" label="AST"><data key="type">AST</data></edge><edge id="3086" source="1505" target="1561" label="AST"><data key="type">AST</data></edge><edge id="2990" source="1514" target="1515" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2988" source="1512" target="1513" label="AST"><data key="type">AST</data></edge><edge id="2986" source="1510" target="1511" label="AST"><data key="type">AST</data></edge><edge id="2985" source="1510" target="1512" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2998" source="1518" target="1519" label="AST"><data key="type">AST</data></edge><edge id="2997" source="1518" target="1520" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2995" source="1517" target="1518" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2999" source="1516" target="1520" label="AST"><data key="type">AST</data></edge><edge id="2996" source="1516" target="1518" label="AST"><data key="type">AST</data></edge><edge id="2994" source="1516" target="1517" label="AST"><data key="type">AST</data></edge><edge id="2993" source="1516" target="1522" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2992" source="1515" target="1516" label="AST"><data key="type">AST</data></edge><edge id="3001" source="1515" target="1522" label="AST"><data key="type">AST</data></edge><edge id="3010" source="1525" target="1495" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3012" source="1525" target="1495" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3011" source="1525" target="1495" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3005" source="1524" target="1491" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3008" source="1524" target="1491" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3007" source="1524" target="1491" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3006" source="1524" target="1525" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3003" source="1523" target="1524" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3009" source="1522" target="1525" label="AST"><data key="type">AST</data></edge><edge id="3004" source="1522" target="1524" label="AST"><data key="type">AST</data></edge><edge id="3002" source="1522" target="1523" label="AST"><data key="type">AST</data></edge><edge id="3000" source="1520" target="1521" label="AST"><data key="type">AST</data></edge><edge id="3018" source="1528" target="1529" label="AST"><data key="type">AST</data></edge><edge id="3017" source="1528" target="1530" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3019" source="1527" target="1530" label="AST"><data key="type">AST</data></edge><edge id="3016" source="1527" target="1528" label="AST"><data key="type">AST</data></edge><edge id="3021" source="1527" target="1531" label="AST"><data key="type">AST</data></edge><edge id="3015" source="1526" target="1527" label="AST"><data key="type">AST</data></edge><edge id="3014" source="1526" target="1535" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3029" source="1536" target="1530" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3032" source="1536" target="1530" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3031" source="1536" target="1530" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3030" source="1536" target="1537" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3028" source="1535" target="1536" label="AST"><data key="type">AST</data></edge><edge id="3035" source="1535" target="1538" label="AST"><data key="type">AST</data></edge><edge id="3033" source="1535" target="1537" label="AST"><data key="type">AST</data></edge><edge id="3027" source="1535" target="1539" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3024" source="1532" target="1533" label="AST"><data key="type">AST</data></edge><edge id="3023" source="1532" target="1534" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3025" source="1531" target="1534" label="AST"><data key="type">AST</data></edge><edge id="3022" source="1531" target="1532" label="AST"><data key="type">AST</data></edge><edge id="3020" source="1530" target="1531" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3038" source="1539" target="1540" label="AST"><data key="type">AST</data></edge><edge id="3045" source="1539" target="1545" label="AST"><data key="type">AST</data></edge><edge id="3050" source="1539" target="1546" label="AST"><data key="type">AST</data></edge><edge id="3037" source="1539" target="1557" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3034" source="1537" target="1538" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3066" source="1550" target="1552" label="AST"><data key="type">AST</data></edge><edge id="3061" source="1550" target="1551" label="AST"><data key="type">AST</data></edge><edge id="3060" source="1547" target="1550" label="AST"><data key="type">AST</data></edge><edge id="3058" source="1547" target="1549" label="AST"><data key="type">AST</data></edge><edge id="3053" source="1547" target="1548" label="AST"><data key="type">AST</data></edge><edge id="3052" source="1547" target="1553" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3067" source="1546" target="1553" label="AST"><data key="type">AST</data></edge><edge id="3051" source="1546" target="1547" label="AST"><data key="type">AST</data></edge><edge id="3046" source="1545" target="1500" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3049" source="1545" target="1500" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3048" source="1545" target="1500" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3047" source="1545" target="1546" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3043" source="1542" target="1543" label="AST"><data key="type">AST</data></edge><edge id="3042" source="1542" target="1544" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3044" source="1541" target="1544" label="AST"><data key="type">AST</data></edge><edge id="3041" source="1541" target="1542" label="AST"><data key="type">AST</data></edge><edge id="3040" source="1540" target="1541" label="AST"><data key="type">AST</data></edge><edge id="3039" source="1540" target="1545" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3059" source="1549" target="1550" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3054" source="1548" target="1530" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3057" source="1548" target="1536" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3056" source="1548" target="1536" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3055" source="1548" target="1549" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3088" source="1561" target="1562" label="AST"><data key="type">AST</data></edge><edge id="3087" source="1561" target="1566" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3079" source="1558" target="1530" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3082" source="1558" target="1554" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3081" source="1558" target="1554" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3080" source="1558" target="1559" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3078" source="1557" target="1558" label="AST"><data key="type">AST</data></edge><edge id="3085" source="1557" target="1560" label="AST"><data key="type">AST</data></edge><edge id="3083" source="1557" target="1559" label="AST"><data key="type">AST</data></edge><edge id="3077" source="1557" target="1561" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3074" source="1555" target="1556" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3069" source="1554" target="1530" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3072" source="1554" target="1548" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3071" source="1554" target="1548" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3070" source="1554" target="1555" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3068" source="1553" target="1554" label="AST"><data key="type">AST</data></edge><edge id="3075" source="1553" target="1556" label="AST"><data key="type">AST</data></edge><edge id="3073" source="1553" target="1555" label="AST"><data key="type">AST</data></edge><edge id="3062" source="1551" target="1544" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3065" source="1551" target="1544" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3064" source="1551" target="1544" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3063" source="1551" target="1552" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3084" source="1559" target="1560" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3103" source="1572" target="1530" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3106" source="1572" target="1558" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3105" source="1572" target="1558" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3104" source="1572" target="1573" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3107" source="1571" target="1573" label="AST"><data key="type">AST</data></edge><edge id="3102" source="1571" target="1572" label="AST"><data key="type">AST</data></edge><edge id="3100" source="1570" target="1571" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3098" source="1568" target="1569" label="AST"><data key="type">AST</data></edge><edge id="3097" source="1568" target="1570" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3101" source="1567" target="1571" label="AST"><data key="type">AST</data></edge><edge id="3099" source="1567" target="1570" label="AST"><data key="type">AST</data></edge><edge id="3096" source="1567" target="1568" label="AST"><data key="type">AST</data></edge><edge id="3095" source="1566" target="1567" label="AST"><data key="type">AST</data></edge><edge id="3094" source="1566" target="1574" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3091" source="1563" target="1564" label="AST"><data key="type">AST</data></edge><edge id="3090" source="1563" target="1565" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3092" source="1562" target="1565" label="AST"><data key="type">AST</data></edge><edge id="3089" source="1562" target="1563" label="AST"><data key="type">AST</data></edge><edge id="3131" source="1582" target="1583" label="AST"><data key="type">AST</data></edge><edge id="3130" source="1582" target="1584" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3129" source="1581" target="1582" label="AST"><data key="type">AST</data></edge><edge id="3132" source="1581" target="1584" label="AST"><data key="type">AST</data></edge><edge id="3122" source="1580" target="1565" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3127" source="1580" target="1565" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3126" source="1580" target="1587" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="3125" source="1580" target="1585" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="3124" source="1580" target="1565" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3123" source="1580" target="1581" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3128" source="1579" target="1581" label="AST"><data key="type">AST</data></edge><edge id="3121" source="1579" target="1580" label="AST"><data key="type">AST</data></edge><edge id="3120" source="1579" target="1588" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3119" source="1578" target="1579" label="AST"><data key="type">AST</data></edge><edge id="3144" source="1578" target="1588" label="AST"><data key="type">AST</data></edge><edge id="3113" source="1576" target="1570" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3116" source="1576" target="1570" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3115" source="1576" target="1570" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3114" source="1576" target="1577" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3117" source="1575" target="1577" label="AST"><data key="type">AST</data></edge><edge id="3112" source="1575" target="1576" label="AST"><data key="type">AST</data></edge><edge id="3111" source="1575" target="1578" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3118" source="1574" target="1578" label="AST"><data key="type">AST</data></edge><edge id="3110" source="1574" target="1575" label="AST"><data key="type">AST</data></edge><edge id="3109" source="1574" target="1683" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2126" source="1110" target="1100" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2129" source="1110" target="1100" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2128" source="1110" target="1100" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2127" source="1110" target="1111" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3157" source="1594" target="1595" label="AST"><data key="type">AST</data></edge><edge id="3163" source="1594" target="1599" label="AST"><data key="type">AST</data></edge><edge id="3161" source="1594" target="1598" label="AST"><data key="type">AST</data></edge><edge id="3156" source="1593" target="1594" label="AST"><data key="type">AST</data></edge><edge id="3155" source="1593" target="1602" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3170" source="1592" target="1602" label="AST"><data key="type">AST</data></edge><edge id="3154" source="1592" target="1593" label="AST"><data key="type">AST</data></edge><edge id="3148" source="1590" target="1580" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3151" source="1590" target="1580" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3150" source="1590" target="1580" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3149" source="1590" target="1591" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2121" source="1106" target="1107" label="AST"><data key="type">AST</data></edge><edge id="2120" source="1105" target="1106" label="AST"><data key="type">AST</data></edge><edge id="2119" source="1105" target="1108" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3147" source="1589" target="1590" label="AST"><data key="type">AST</data></edge><edge id="3152" source="1589" target="1591" label="AST"><data key="type">AST</data></edge><edge id="3146" source="1589" target="1592" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2118" source="1104" target="1105" label="AST"><data key="type">AST</data></edge><edge id="2124" source="1104" target="1109" label="AST"><data key="type">AST</data></edge><edge id="2122" source="1104" target="1108" label="AST"><data key="type">AST</data></edge><edge id="3145" source="1588" target="1589" label="AST"><data key="type">AST</data></edge><edge id="3153" source="1588" target="1592" label="AST"><data key="type">AST</data></edge><edge id="2117" source="1103" target="1104" label="AST"><data key="type">AST</data></edge><edge id="2116" source="1103" target="1112" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3141" source="1587" target="1570" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3143" source="1587" target="1576" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3142" source="1587" target="1576" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2229" source="1102" target="1152" label="AST"><data key="type">AST</data></edge><edge id="2115" source="1102" target="1103" label="AST"><data key="type">AST</data></edge><edge id="2131" source="1102" target="1112" label="AST"><data key="type">AST</data></edge><edge id="2241" source="1102" target="1155" label="AST"><data key="type">AST</data></edge><edge id="2151" source="1102" target="1122" label="AST"><data key="type">AST</data></edge><edge id="3139" source="1586" target="1587" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2110" source="1101" target="1083" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2113" source="1101" target="1083" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2112" source="1101" target="1083" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2111" source="1101" target="1102" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3134" source="1585" target="1514" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3137" source="1585" target="1514" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3136" source="1585" target="1514" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3135" source="1585" target="1586" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3138" source="1584" target="1586" label="AST"><data key="type">AST</data></edge><edge id="3133" source="1584" target="1585" label="AST"><data key="type">AST</data></edge><edge id="3140" source="1584" target="1587" label="AST"><data key="type">AST</data></edge><edge id="2125" source="1109" target="1110" label="AST"><data key="type">AST</data></edge><edge id="2130" source="1109" target="1111" label="AST"><data key="type">AST</data></edge><edge id="2123" source="1108" target="1109" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2150" source="1120" target="1121" label="AST"><data key="type">AST</data></edge><edge id="2145" source="1118" target="1108" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2147" source="1118" target="1108" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2146" source="1118" target="1119" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2148" source="1117" target="1119" label="AST"><data key="type">AST</data></edge><edge id="2144" source="1117" target="1118" label="AST"><data key="type">AST</data></edge><edge id="2138" source="1115" target="969" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2140" source="1115" target="1025" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2139" source="1115" target="1116" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3169" source="1599" target="1601" label="AST"><data key="type">AST</data></edge><edge id="3164" source="1599" target="1600" label="AST"><data key="type">AST</data></edge><edge id="2137" source="1114" target="1115" label="AST"><data key="type">AST</data></edge><edge id="2141" source="1114" target="1116" label="AST"><data key="type">AST</data></edge><edge id="2142" source="1114" target="1024" label="LAST_FIELD_LEX"><data key="type">LAST_FIELD_LEX</data></edge><edge id="2136" source="1114" target="1117" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3162" source="1598" target="1599" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2135" source="1113" target="1114" label="AST"><data key="type">AST</data></edge><edge id="2143" source="1113" target="1117" label="AST"><data key="type">AST</data></edge><edge id="2134" source="1113" target="1120" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2149" source="1112" target="1120" label="AST"><data key="type">AST</data></edge><edge id="2133" source="1112" target="1113" label="AST"><data key="type">AST</data></edge><edge id="2132" source="1112" target="1122" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3160" source="1596" target="1597" label="AST"><data key="type">AST</data></edge><edge id="3159" source="1595" target="1596" label="AST"><data key="type">AST</data></edge><edge id="3158" source="1595" target="1598" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2169" source="1132" target="969" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2171" source="1132" target="1115" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2170" source="1132" target="1133" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2168" source="1131" target="1132" label="AST"><data key="type">AST</data></edge><edge id="2172" source="1131" target="1133" label="AST"><data key="type">AST</data></edge><edge id="2173" source="1131" target="1114" label="LAST_FIELD_LEX"><data key="type">LAST_FIELD_LEX</data></edge><edge id="2166" source="1130" target="1131" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2164" source="1129" target="1130" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2167" source="1128" target="1131" label="AST"><data key="type">AST</data></edge><edge id="2165" source="1128" target="1130" label="AST"><data key="type">AST</data></edge><edge id="2163" source="1128" target="1129" label="AST"><data key="type">AST</data></edge><edge id="2160" source="1126" target="1127" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2158" source="1125" target="1126" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2159" source="1124" target="1126" label="AST"><data key="type">AST</data></edge><edge id="2157" source="1124" target="1125" label="AST"><data key="type">AST</data></edge><edge id="2161" source="1124" target="1127" label="AST"><data key="type">AST</data></edge><edge id="2156" source="1124" target="1128" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2155" source="1123" target="1124" label="AST"><data key="type">AST</data></edge><edge id="2162" source="1123" target="1128" label="AST"><data key="type">AST</data></edge><edge id="2154" source="1123" target="1134" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1321" source="700" target="703" label="AST"><data key="type">AST</data></edge><edge id="1319" source="700" target="702" label="AST"><data key="type">AST</data></edge><edge id="1317" source="700" target="701" label="AST"><data key="type">AST</data></edge><edge id="2188" source="1122" target="1137" label="AST"><data key="type">AST</data></edge><edge id="2153" source="1122" target="1123" label="AST"><data key="type">AST</data></edge><edge id="2174" source="1122" target="1134" label="AST"><data key="type">AST</data></edge><edge id="2194" source="1122" target="1139" label="AST"><data key="type">AST</data></edge><edge id="2152" source="1122" target="1152" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1318" source="701" target="702" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1320" source="702" target="703" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1324" source="704" target="705" label="AST"><data key="type">AST</data></edge><edge id="1340" source="704" target="711" label="AST"><data key="type">AST</data></edge><edge id="1323" source="704" target="719" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1326" source="705" target="706" label="AST"><data key="type">AST</data></edge><edge id="1335" source="705" target="710" label="AST"><data key="type">AST</data></edge><edge id="1325" source="705" target="711" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1328" source="706" target="707" label="AST"><data key="type">AST</data></edge><edge id="1327" source="706" target="710" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1334" source="707" target="709" label="AST"><data key="type">AST</data></edge><edge id="1329" source="707" target="708" label="AST"><data key="type">AST</data></edge><edge id="1330" source="708" target="694" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1333" source="708" target="694" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1332" source="708" target="694" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1331" source="708" target="709" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2201" source="1143" target="1144" label="AST"><data key="type">AST</data></edge><edge id="2208" source="1143" target="1145" label="AST"><data key="type">AST</data></edge><edge id="2200" source="1143" target="1146" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2215" source="1142" target="1147" label="AST"><data key="type">AST</data></edge><edge id="2213" source="1142" target="1146" label="AST"><data key="type">AST</data></edge><edge id="2199" source="1142" target="1143" label="AST"><data key="type">AST</data></edge><edge id="2198" source="1141" target="1142" label="AST"><data key="type">AST</data></edge><edge id="2197" source="1141" target="1150" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2227" source="1140" target="1150" label="AST"><data key="type">AST</data></edge><edge id="2196" source="1140" target="1141" label="AST"><data key="type">AST</data></edge><edge id="2195" source="1139" target="1140" label="AST"><data key="type">AST</data></edge><edge id="2191" source="1138" target="1149" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2193" source="1138" target="1135" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2192" source="1138" target="1149" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2190" source="1137" target="1138" label="AST"><data key="type">AST</data></edge><edge id="2189" source="1137" target="1139" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2184" source="1136" target="1130" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2187" source="1136" target="1130" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2186" source="1136" target="1136" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2185" source="1136" target="1130" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2178" source="1135" target="1138" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2177" source="1135" target="1126" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2182" source="1135" target="1126" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2180" source="1135" target="1126" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2181" source="1135" target="1138" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2179" source="1135" target="1136" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1336" source="710" target="669" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1339" source="710" target="669" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1338" source="710" target="710" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1337" source="710" target="669" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2176" source="1134" target="1135" label="AST"><data key="type">AST</data></edge><edge id="2183" source="1134" target="1136" label="AST"><data key="type">AST</data></edge><edge id="2175" source="1134" target="1137" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1341" source="711" target="712" label="AST"><data key="type">AST</data></edge><edge id="1351" source="711" target="716" label="AST"><data key="type">AST</data></edge><edge id="1348" source="712" target="714" label="AST"><data key="type">AST</data></edge><edge id="1343" source="712" target="713" label="AST"><data key="type">AST</data></edge><edge id="1350" source="712" target="715" label="AST"><data key="type">AST</data></edge><edge id="1342" source="712" target="716" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1344" source="713" target="708" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1347" source="713" target="708" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1346" source="713" target="708" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1345" source="713" target="714" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1349" source="714" target="715" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1357" source="716" target="718" label="AST"><data key="type">AST</data></edge><edge id="1352" source="716" target="717" label="AST"><data key="type">AST</data></edge><edge id="1353" source="717" target="702" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1356" source="717" target="702" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1355" source="717" target="702" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1354" source="717" target="718" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1360" source="719" target="720" label="AST"><data key="type">AST</data></edge><edge id="1359" source="719" target="728" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2238" source="1154" target="1100" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2240" source="1154" target="1110" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2239" source="1154" target="1110" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2232" source="1153" target="1062" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2236" source="1153" target="1069" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2235" source="1153" target="1154" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="2234" source="1153" target="1069" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2233" source="1153" target="1154" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2237" source="1152" target="1154" label="AST"><data key="type">AST</data></edge><edge id="2231" source="1152" target="1153" label="AST"><data key="type">AST</data></edge><edge id="2230" source="1152" target="1155" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2228" source="1150" target="1151" label="AST"><data key="type">AST</data></edge><edge id="2224" source="1149" target="1145" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2226" source="1149" target="1145" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2225" source="1149" target="1145" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2218" source="1148" target="1148" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2217" source="1148" target="969" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2222" source="1148" target="1010" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2221" source="1148" target="1148" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2220" source="1148" target="1132" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2219" source="1148" target="1149" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2216" source="1147" target="1148" label="AST"><data key="type">AST</data></edge><edge id="2223" source="1147" target="1149" label="AST"><data key="type">AST</data></edge><edge id="1366" source="720" target="724" label="AST"><data key="type">AST</data></edge><edge id="1364" source="720" target="723" label="AST"><data key="type">AST</data></edge><edge id="1361" source="720" target="721" label="AST"><data key="type">AST</data></edge><edge id="2214" source="1146" target="1147" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1363" source="721" target="722" label="AST"><data key="type">AST</data></edge><edge id="1362" source="721" target="723" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2210" source="1145" target="1138" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2209" source="1145" target="1126" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2212" source="1145" target="1138" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2211" source="1145" target="1135" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2203" source="1144" target="1144" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2202" source="1144" target="1108" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2207" source="1144" target="1108" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2206" source="1144" target="1144" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2205" source="1144" target="1118" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2204" source="1144" target="1145" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1365" source="723" target="724" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1367" source="724" target="725" label="AST"><data key="type">AST</data></edge><edge id="1375" source="724" target="727" label="AST"><data key="type">AST</data></edge><edge id="1373" source="724" target="726" label="AST"><data key="type">AST</data></edge><edge id="1368" source="725" target="708" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1372" source="725" target="713" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1371" source="725" target="713" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1370" source="725" target="708" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1369" source="725" target="726" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1374" source="726" target="727" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1376" source="727" target="662" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1379" source="727" target="681" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1378" source="727" target="727" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1377" source="727" target="681" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1389" source="728" target="730" label="AST"><data key="type">AST</data></edge><edge id="1382" source="728" target="729" label="AST"><data key="type">AST</data></edge><edge id="1381" source="728" target="735" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1384" source="729" target="717" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1383" source="729" target="702" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1388" source="729" target="717" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1387" source="729" target="717" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1386" source="729" target="702" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1385" source="729" target="730" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2272" source="1165" target="1166" label="AST"><data key="type">AST</data></edge><edge id="2271" source="1164" target="1165" label="AST"><data key="type">AST</data></edge><edge id="2264" source="1162" target="1153" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2263" source="1162" target="1062" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2268" source="1162" target="1159" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2267" source="1162" target="1159" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2266" source="1162" target="1069" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2265" source="1162" target="1163" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2269" source="1161" target="1163" label="AST"><data key="type">AST</data></edge><edge id="2262" source="1161" target="1162" label="AST"><data key="type">AST</data></edge><edge id="2261" source="1161" target="1164" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2260" source="1160" target="1161" label="AST"><data key="type">AST</data></edge><edge id="2270" source="1160" target="1164" label="AST"><data key="type">AST</data></edge><edge id="2259" source="1160" target="1176" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2255" source="1159" target="1153" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2257" source="1159" target="1153" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2256" source="1159" target="1153" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1390" source="730" target="731" label="AST"><data key="type">AST</data></edge><edge id="2250" source="1158" target="1052" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2253" source="1158" target="1066" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2252" source="1158" target="1066" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2251" source="1158" target="1159" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1398" source="731" target="734" label="AST"><data key="type">AST</data></edge><edge id="1396" source="731" target="733" label="AST"><data key="type">AST</data></edge><edge id="1391" source="731" target="732" label="AST"><data key="type">AST</data></edge><edge id="2248" source="1157" target="1158" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1392" source="732" target="708" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1395" source="732" target="725" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1394" source="732" target="725" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1393" source="732" target="733" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2243" source="1156" target="987" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2246" source="1156" target="1064" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2245" source="1156" target="1064" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2244" source="1156" target="1157" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1397" source="733" target="734" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2249" source="1155" target="1158" label="AST"><data key="type">AST</data></edge><edge id="2247" source="1155" target="1157" label="AST"><data key="type">AST</data></edge><edge id="2254" source="1155" target="1159" label="AST"><data key="type">AST</data></edge><edge id="2242" source="1155" target="1156" label="AST"><data key="type">AST</data></edge><edge id="1400" source="735" target="736" label="AST"><data key="type">AST</data></edge><edge id="1404" source="735" target="657" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="1401" source="736" target="723" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1403" source="736" target="723" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1402" source="736" target="723" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1413" source="737" target="742" label="AST"><data key="type">AST</data></edge><edge id="1407" source="737" target="738" label="AST"><data key="type">AST</data></edge><edge id="1406" source="737" target="748" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1412" source="738" target="741" label="AST"><data key="type">AST</data></edge><edge id="1409" source="738" target="739" label="AST"><data key="type">AST</data></edge><edge id="1408" source="738" target="742" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1411" source="739" target="740" label="AST"><data key="type">AST</data></edge><edge id="1410" source="739" target="741" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2295" source="1176" target="1177" label="AST"><data key="type">AST</data></edge><edge id="2300" source="1176" target="955" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="2290" source="1175" target="1052" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2293" source="1175" target="1158" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2292" source="1175" target="1158" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2291" source="1175" target="1066" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2283" source="1173" target="964" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2287" source="1173" target="1091" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2286" source="1173" target="1091" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2285" source="1173" target="990" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2284" source="1173" target="1174" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2288" source="1172" target="1174" label="AST"><data key="type">AST</data></edge><edge id="2282" source="1172" target="1173" label="AST"><data key="type">AST</data></edge><edge id="2280" source="1171" target="1172" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2279" source="1170" target="1171" label="AST"><data key="type">AST</data></edge><edge id="2281" source="1170" target="1172" label="AST"><data key="type">AST</data></edge><edge id="2278" source="1170" target="1175" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2289" source="1169" target="1175" label="AST"><data key="type">AST</data></edge><edge id="2277" source="1169" target="1170" label="AST"><data key="type">AST</data></edge><edge id="1414" source="742" target="743" label="AST"><data key="type">AST</data></edge><edge id="1415" source="743" target="744" label="AST"><data key="type">AST</data></edge><edge id="2275" source="1167" target="1168" label="AST"><data key="type">AST</data></edge><edge id="2274" source="1167" target="1169" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1419" source="744" target="747" label="AST"><data key="type">AST</data></edge><edge id="1416" source="744" target="745" label="AST"><data key="type">AST</data></edge><edge id="2276" source="1166" target="1169" label="AST"><data key="type">AST</data></edge><edge id="2273" source="1166" target="1167" label="AST"><data key="type">AST</data></edge><edge id="1418" source="745" target="746" label="AST"><data key="type">AST</data></edge><edge id="1417" source="745" target="747" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1420" source="747" target="741" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1423" source="748" target="749" label="AST"><data key="type">AST</data></edge><edge id="1429" source="748" target="753" label="AST"><data key="type">AST</data></edge><edge id="1422" source="748" target="770" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1425" source="749" target="750" label="AST"><data key="type">AST</data></edge><edge id="1428" source="749" target="752" label="AST"><data key="type">AST</data></edge><edge id="1424" source="749" target="753" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2315" source="1185" target="1186" label="AST"><data key="type">AST</data></edge><edge id="2314" source="1185" target="1187" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2316" source="1184" target="1187" label="AST"><data key="type">AST</data></edge><edge id="2313" source="1184" target="1185" label="AST"><data key="type">AST</data></edge><edge id="2312" source="1184" target="1188" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2309" source="1181" target="1182" label="AST"><data key="type">AST</data></edge><edge id="2308" source="1181" target="1183" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2310" source="1180" target="1183" label="AST"><data key="type">AST</data></edge><edge id="2307" source="1180" target="1181" label="AST"><data key="type">AST</data></edge><edge id="2306" source="1180" target="1184" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1427" source="750" target="751" label="AST"><data key="type">AST</data></edge><edge id="1426" source="750" target="752" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1430" source="753" target="754" label="AST"><data key="type">AST</data></edge><edge id="1449" source="753" target="765" label="AST"><data key="type">AST</data></edge><edge id="2304" source="1179" target="1180" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1432" source="754" target="755" label="AST"><data key="type">AST</data></edge><edge id="1442" source="754" target="760" label="AST"><data key="type">AST</data></edge><edge id="1431" source="754" target="765" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2317" source="1178" target="1188" label="AST"><data key="type">AST</data></edge><edge id="2305" source="1178" target="1180" label="AST"><data key="type">AST</data></edge><edge id="2303" source="1178" target="1179" label="AST"><data key="type">AST</data></edge><edge id="2323" source="1178" target="1192" label="AST"><data key="type">AST</data></edge><edge id="2311" source="1178" target="1184" label="AST"><data key="type">AST</data></edge><edge id="2320" source="1178" target="1190" label="AST"><data key="type">AST</data></edge><edge id="2302" source="1178" target="1436" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1434" source="755" target="756" label="AST"><data key="type">AST</data></edge><edge id="1439" source="755" target="757" label="AST"><data key="type">AST</data></edge><edge id="1433" source="755" target="760" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2297" source="1177" target="1153" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2296" source="1177" target="1062" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2299" source="1177" target="1162" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2298" source="1177" target="1162" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1435" source="756" target="679" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1438" source="756" target="696" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1437" source="756" target="696" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1436" source="756" target="757" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1440" source="757" target="758" label="AST"><data key="type">AST</data></edge><edge id="1441" source="758" target="759" label="AST"><data key="type">AST</data></edge><edge id="2322" source="1190" target="1191" label="AST"><data key="type">AST</data></edge><edge id="2321" source="1190" target="1192" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2356" source="1198" target="1210" label="AST"><data key="type">AST</data></edge><edge id="2333" source="1198" target="1199" label="AST"><data key="type">AST</data></edge><edge id="2332" source="1198" target="1216" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2329" source="1195" target="1196" label="AST"><data key="type">AST</data></edge><edge id="2328" source="1195" target="1197" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2327" source="1194" target="1195" label="AST"><data key="type">AST</data></edge><edge id="2330" source="1194" target="1197" label="AST"><data key="type">AST</data></edge><edge id="2326" source="1193" target="1194" label="AST"><data key="type">AST</data></edge><edge id="2325" source="1193" target="1198" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2449" source="1192" target="1262" label="AST"><data key="type">AST</data></edge><edge id="2514" source="1192" target="1284" label="AST"><data key="type">AST</data></edge><edge id="2843" source="1192" target="1434" label="AST"><data key="type">AST</data></edge><edge id="2424" source="1192" target="1247" label="AST"><data key="type">AST</data></edge><edge id="2633" source="1192" target="1342" label="AST"><data key="type">AST</data></edge><edge id="2324" source="1192" target="1193" label="AST"><data key="type">AST</data></edge><edge id="2388" source="1192" target="1230" label="AST"><data key="type">AST</data></edge><edge id="2476" source="1192" target="1272" label="AST"><data key="type">AST</data></edge><edge id="2331" source="1192" target="1198" label="AST"><data key="type">AST</data></edge><edge id="2363" source="1192" target="1216" label="AST"><data key="type">AST</data></edge><edge id="2439" source="1192" target="1255" label="AST"><data key="type">AST</data></edge><edge id="1443" source="760" target="761" label="AST"><data key="type">AST</data></edge><edge id="1447" source="761" target="764" label="AST"><data key="type">AST</data></edge><edge id="1444" source="761" target="762" label="AST"><data key="type">AST</data></edge><edge id="1446" source="762" target="763" label="AST"><data key="type">AST</data></edge><edge id="1445" source="762" target="764" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1448" source="764" target="752" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1457" source="765" target="767" label="AST"><data key="type">AST</data></edge><edge id="1450" source="765" target="766" label="AST"><data key="type">AST</data></edge><edge id="1452" source="766" target="766" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1451" source="766" target="679" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1456" source="766" target="756" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1455" source="766" target="768" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="1454" source="766" target="768" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1453" source="766" target="767" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2319" source="1188" target="1189" label="AST"><data key="type">AST</data></edge><edge id="2318" source="1188" target="1190" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1458" source="767" target="768" label="AST"><data key="type">AST</data></edge><edge id="1463" source="767" target="769" label="AST"><data key="type">AST</data></edge><edge id="1459" source="768" target="679" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1462" source="768" target="766" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1461" source="768" target="756" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1460" source="768" target="769" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1465" source="770" target="771" label="AST"><data key="type">AST</data></edge><edge id="1471" source="770" target="775" label="AST"><data key="type">AST</data></edge><edge id="1467" source="771" target="772" label="AST"><data key="type">AST</data></edge><edge id="1470" source="771" target="774" label="AST"><data key="type">AST</data></edge><edge id="1466" source="771" target="775" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1469" source="772" target="773" label="AST"><data key="type">AST</data></edge><edge id="1468" source="772" target="774" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1472" source="775" target="776" label="AST"><data key="type">AST</data></edge><edge id="1473" source="776" target="777" label="AST"><data key="type">AST</data></edge><edge id="1477" source="777" target="780" label="AST"><data key="type">AST</data></edge><edge id="1474" source="777" target="778" label="AST"><data key="type">AST</data></edge><edge id="2335" source="1199" target="1200" label="AST"><data key="type">AST</data></edge><edge id="2343" source="1199" target="1203" label="AST"><data key="type">AST</data></edge><edge id="2334" source="1199" target="1210" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1476" source="778" target="779" label="AST"><data key="type">AST</data></edge><edge id="1475" source="778" target="780" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1478" source="780" target="774" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1480" source="781" target="782" label="AST"><data key="type">AST</data></edge><edge id="1481" source="781" target="657" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="1514" source="783" target="804" label="AST"><data key="type">AST</data></edge><edge id="1511" source="783" target="802" label="AST"><data key="type">AST</data></edge><edge id="1498" source="783" target="793" label="AST"><data key="type">AST</data></edge><edge id="1484" source="783" target="784" label="AST"><data key="type">AST</data></edge><edge id="1492" source="783" target="789" label="AST"><data key="type">AST</data></edge><edge id="1490" source="783" target="788" label="AST"><data key="type">AST</data></edge><edge id="1517" source="783" target="806" label="AST"><data key="type">AST</data></edge><edge id="1504" source="783" target="797" label="AST"><data key="type">AST</data></edge><edge id="1483" source="783" target="955" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1488" source="784" target="786" label="AST"><data key="type">AST</data></edge><edge id="1486" source="784" target="785" label="AST"><data key="type">AST</data></edge><edge id="1485" source="784" target="788" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="537" source="301" target="302" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1487" source="785" target="786" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="542" source="302" target="305" label="AST"><data key="type">AST</data></edge><edge id="539" source="302" target="303" label="AST"><data key="type">AST</data></edge><edge id="1489" source="786" target="787" label="AST"><data key="type">AST</data></edge><edge id="541" source="303" target="304" label="AST"><data key="type">AST</data></edge><edge id="540" source="303" target="305" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1491" source="788" target="789" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="543" source="305" target="306" label="AST"><data key="type">AST</data></edge><edge id="1497" source="789" target="792" label="AST"><data key="type">AST</data></edge><edge id="1494" source="789" target="790" label="AST"><data key="type">AST</data></edge><edge id="1493" source="789" target="793" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="544" source="306" target="307" label="AST"><data key="type">AST</data></edge><edge id="548" source="306" target="308" label="AST"><data key="type">AST</data></edge><edge id="545" source="307" target="290" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="547" source="307" target="290" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="546" source="307" target="308" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="572" source="309" target="321" label="AST"><data key="type">AST</data></edge><edge id="551" source="309" target="310" label="AST"><data key="type">AST</data></edge><edge id="586" source="309" target="324" label="AST"><data key="type">AST</data></edge><edge id="592" source="309" target="326" label="AST"><data key="type">AST</data></edge><edge id="550" source="309" target="336" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1496" source="790" target="791" label="AST"><data key="type">AST</data></edge><edge id="1495" source="790" target="792" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1503" source="793" target="796" label="AST"><data key="type">AST</data></edge><edge id="1500" source="793" target="794" label="AST"><data key="type">AST</data></edge><edge id="1499" source="793" target="797" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="553" source="310" target="311" label="AST"><data key="type">AST</data></edge><edge id="560" source="310" target="315" label="AST"><data key="type">AST</data></edge><edge id="552" source="310" target="321" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1502" source="794" target="795" label="AST"><data key="type">AST</data></edge><edge id="1501" source="794" target="796" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="555" source="311" target="312" label="AST"><data key="type">AST</data></edge><edge id="557" source="311" target="313" label="AST"><data key="type">AST</data></edge><edge id="559" source="311" target="314" label="AST"><data key="type">AST</data></edge><edge id="554" source="311" target="315" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="556" source="312" target="313" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="558" source="313" target="314" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1510" source="797" target="801" label="AST"><data key="type">AST</data></edge><edge id="1506" source="797" target="798" label="AST"><data key="type">AST</data></edge><edge id="1505" source="797" target="802" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1508" source="798" target="799" label="AST"><data key="type">AST</data></edge><edge id="1507" source="798" target="801" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="561" source="315" target="316" label="AST"><data key="type">AST</data></edge><edge id="563" source="315" target="317" label="AST"><data key="type">AST</data></edge><edge id="565" source="315" target="318" label="AST"><data key="type">AST</data></edge><edge id="1509" source="799" target="800" label="AST"><data key="type">AST</data></edge><edge id="562" source="316" target="317" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="564" source="317" target="318" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="566" source="318" target="319" label="AST"><data key="type">AST</data></edge><edge id="570" source="318" target="320" label="AST"><data key="type">AST</data></edge><edge id="571" source="318" target="306" label="LAST_FIELD_LEX"><data key="type">LAST_FIELD_LEX</data></edge><edge id="567" source="319" target="290" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="569" source="319" target="307" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="568" source="319" target="320" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="574" source="321" target="322" label="AST"><data key="type">AST</data></edge><edge id="581" source="321" target="323" label="AST"><data key="type">AST</data></edge><edge id="573" source="321" target="324" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="575" source="322" target="313" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="576" source="322" target="325" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="580" source="322" target="313" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="578" source="322" target="313" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="579" source="322" target="325" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="577" source="322" target="323" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="582" source="323" target="317" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="585" source="323" target="317" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="583" source="323" target="317" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="584" source="323" target="323" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="588" source="324" target="325" label="AST"><data key="type">AST</data></edge><edge id="587" source="324" target="326" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="589" source="325" target="330" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="591" source="325" target="322" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="590" source="325" target="330" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="593" source="326" target="327" label="AST"><data key="type">AST</data></edge><edge id="594" source="327" target="328" label="AST"><data key="type">AST</data></edge><edge id="610" source="327" target="331" label="AST"><data key="type">AST</data></edge><edge id="596" source="328" target="329" label="AST"><data key="type">AST</data></edge><edge id="605" source="328" target="330" label="AST"><data key="type">AST</data></edge><edge id="595" source="328" target="331" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="597" source="329" target="301" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="598" source="329" target="329" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="604" source="329" target="301" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="602" source="329" target="333" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="603" source="329" target="334" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="600" source="329" target="301" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="601" source="329" target="329" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="599" source="329" target="330" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="606" source="330" target="313" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="607" source="330" target="325" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="609" source="330" target="325" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="608" source="330" target="334" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="611" source="331" target="332" label="AST"><data key="type">AST</data></edge><edge id="623" source="331" target="335" label="AST"><data key="type">AST</data></edge><edge id="613" source="332" target="333" label="AST"><data key="type">AST</data></edge><edge id="619" source="332" target="334" label="AST"><data key="type">AST</data></edge><edge id="612" source="332" target="335" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="614" source="333" target="290" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="618" source="333" target="290" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="616" source="333" target="319" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="617" source="333" target="333" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="615" source="333" target="334" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="620" source="334" target="313" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="622" source="334" target="330" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="621" source="334" target="322" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="672" source="336" target="357" label="AST"><data key="type">AST</data></edge><edge id="688" source="336" target="368" label="AST"><data key="type">AST</data></edge><edge id="625" source="336" target="337" label="AST"><data key="type">AST</data></edge><edge id="651" source="337" target="348" label="AST"><data key="type">AST</data></edge><edge id="627" source="337" target="338" label="AST"><data key="type">AST</data></edge><edge id="626" source="337" target="357" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="629" source="338" target="339" label="AST"><data key="type">AST</data></edge><edge id="628" source="338" target="348" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="630" source="339" target="340" label="AST"><data key="type">AST</data></edge><edge id="633" source="339" target="342" label="AST"><data key="type">AST</data></edge><edge id="635" source="339" target="343" label="AST"><data key="type">AST</data></edge><edge id="632" source="340" target="341" label="AST"><data key="type">AST</data></edge><edge id="631" source="340" target="342" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="634" source="342" target="343" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="643" source="343" target="346" label="AST"><data key="type">AST</data></edge><edge id="645" source="343" target="347" label="AST"><data key="type">AST</data></edge><edge id="636" source="343" target="344" label="AST"><data key="type">AST</data></edge><edge id="638" source="343" target="345" label="AST"><data key="type">AST</data></edge><edge id="637" source="344" target="345" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="639" source="345" target="285" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="642" source="345" target="285" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="641" source="345" target="285" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="640" source="345" target="346" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="644" source="346" target="347" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="646" source="347" target="301" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="647" source="347" target="329" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="650" source="347" target="329" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="648" source="347" target="301" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="649" source="347" target="329" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="652" source="348" target="349" label="AST"><data key="type">AST</data></edge><edge id="671" source="348" target="272" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="653" source="349" target="350" label="AST"><data key="type">AST</data></edge><edge id="656" source="349" target="352" label="AST"><data key="type">AST</data></edge><edge id="655" source="350" target="351" label="AST"><data key="type">AST</data></edge><edge id="654" source="350" target="352" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="662" source="352" target="354" label="AST"><data key="type">AST</data></edge><edge id="664" source="352" target="355" label="AST"><data key="type">AST</data></edge><edge id="666" source="352" target="356" label="AST"><data key="type">AST</data></edge><edge id="657" source="352" target="353" label="AST"><data key="type">AST</data></edge><edge id="658" source="353" target="342" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="661" source="353" target="342" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="660" source="353" target="342" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="659" source="353" target="354" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="663" source="354" target="355" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="665" source="355" target="356" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="667" source="356" target="290" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="670" source="356" target="333" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="668" source="356" target="319" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="669" source="356" target="333" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="674" source="357" target="358" label="AST"><data key="type">AST</data></edge><edge id="680" source="357" target="362" label="AST"><data key="type">AST</data></edge><edge id="673" source="357" target="368" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="676" source="358" target="359" label="AST"><data key="type">AST</data></edge><edge id="679" source="358" target="361" label="AST"><data key="type">AST</data></edge><edge id="675" source="358" target="362" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="678" source="359" target="360" label="AST"><data key="type">AST</data></edge><edge id="677" source="359" target="361" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="11" source="10" target="11" label="AST"><data key="type">AST</data></edge><edge id="12" source="11" target="12" label="AST"><data key="type">AST</data></edge><edge id="15" source="13" target="14" label="AST"><data key="type">AST</data></edge><edge id="14" source="13" target="18" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="16" source="14" target="15" label="AST"><data key="type">AST</data></edge><edge id="17" source="15" target="16" label="AST"><data key="type">AST</data></edge><edge id="18" source="16" target="17" label="AST"><data key="type">AST</data></edge><edge id="21" source="18" target="19" label="AST"><data key="type">AST</data></edge><edge id="20" source="18" target="23" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="22" source="19" target="20" label="AST"><data key="type">AST</data></edge><edge id="681" source="362" target="363" label="AST"><data key="type">AST</data></edge><edge id="682" source="363" target="364" label="AST"><data key="type">AST</data></edge><edge id="683" source="364" target="365" label="AST"><data key="type">AST</data></edge><edge id="686" source="364" target="367" label="AST"><data key="type">AST</data></edge><edge id="685" source="365" target="366" label="AST"><data key="type">AST</data></edge><edge id="684" source="365" target="367" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="687" source="367" target="361" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="695" source="368" target="373" label="AST"><data key="type">AST</data></edge><edge id="689" source="368" target="369" label="AST"><data key="type">AST</data></edge><edge id="694" source="369" target="372" label="AST"><data key="type">AST</data></edge><edge id="691" source="369" target="370" label="AST"><data key="type">AST</data></edge><edge id="690" source="369" target="373" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="23" source="20" target="21" label="AST"><data key="type">AST</data></edge><edge id="24" source="21" target="22" label="AST"><data key="type">AST</data></edge><edge id="27" source="23" target="24" label="AST"><data key="type">AST</data></edge><edge id="26" source="23" target="28" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="28" source="24" target="25" label="AST"><data key="type">AST</data></edge><edge id="29" source="25" target="26" label="AST"><data key="type">AST</data></edge><edge id="30" source="26" target="27" label="AST"><data key="type">AST</data></edge><edge id="33" source="28" target="29" label="AST"><data key="type">AST</data></edge><edge id="32" source="28" target="32" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="34" source="29" target="30" label="AST"><data key="type">AST</data></edge><edge id="693" source="370" target="371" label="AST"><data key="type">AST</data></edge><edge id="692" source="370" target="372" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="696" source="373" target="374" label="AST"><data key="type">AST</data></edge><edge id="697" source="374" target="375" label="AST"><data key="type">AST</data></edge><edge id="698" source="375" target="376" label="AST"><data key="type">AST</data></edge><edge id="701" source="375" target="378" label="AST"><data key="type">AST</data></edge><edge id="700" source="376" target="377" label="AST"><data key="type">AST</data></edge><edge id="699" source="376" target="378" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="702" source="378" target="372" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="732" source="379" target="398" label="AST"><data key="type">AST</data></edge><edge id="711" source="379" target="384" label="AST"><data key="type">AST</data></edge><edge id="713" source="379" target="385" label="AST"><data key="type">AST</data></edge><edge id="735" source="379" target="400" label="AST"><data key="type">AST</data></edge><edge id="725" source="379" target="393" label="AST"><data key="type">AST</data></edge><edge id="705" source="379" target="380" label="AST"><data key="type">AST</data></edge><edge id="738" source="379" target="402" label="AST"><data key="type">AST</data></edge><edge id="719" source="379" target="389" label="AST"><data key="type">AST</data></edge><edge id="704" source="379" target="553" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="35" source="30" target="31" label="AST"><data key="type">AST</data></edge><edge id="38" source="32" target="33" label="AST"><data key="type">AST</data></edge><edge id="37" source="32" target="36" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="39" source="33" target="34" label="AST"><data key="type">AST</data></edge><edge id="40" source="34" target="35" label="AST"><data key="type">AST</data></edge><edge id="44" source="36" target="38" label="AST"><data key="type">AST</data></edge><edge id="1482" source="36" target="783" label="AST"><data key="type">AST</data></edge><edge id="1063" source="36" target="553" label="AST"><data key="type">AST</data></edge><edge id="493" source="36" target="272" label="AST"><data key="type">AST</data></edge><edge id="114" source="36" target="85" label="AST"><data key="type">AST</data></edge><edge id="1234" source="36" target="657" label="AST"><data key="type">AST</data></edge><edge id="2301" source="36" target="1178" label="AST"><data key="type">AST</data></edge><edge id="2851" source="36" target="1436" label="AST"><data key="type">AST</data></edge><edge id="3423" source="36" target="1720" label="AST"><data key="type">AST</data></edge><edge id="1189" source="36" target="632" label="AST"><data key="type">AST</data></edge><edge id="3367" source="36" target="1685" label="AST"><data key="type">AST</data></edge><edge id="109" source="36" target="82" label="AST"><data key="type">AST</data></edge><edge id="703" source="36" target="379" label="AST"><data key="type">AST</data></edge><edge id="62" source="36" target="50" label="AST"><data key="type">AST</data></edge><edge id="1836" source="36" target="955" label="AST"><data key="type">AST</data></edge><edge id="2947" source="36" target="1486" label="AST"><data key="type">AST</data></edge><edge id="42" source="36" target="37" label="AST"><data key="type">AST</data></edge><edge id="53" source="36" target="44" label="AST"><data key="type">AST</data></edge><edge id="43" source="37" target="38" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="46" source="38" target="39" label="AST"><data key="type">AST</data></edge><edge id="45" source="38" target="44" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="47" source="39" target="40" label="AST"><data key="type">AST</data></edge><edge id="50" source="39" target="42" label="AST"><data key="type">AST</data></edge><edge id="52" source="39" target="43" label="AST"><data key="type">AST</data></edge><edge id="709" source="380" target="382" label="AST"><data key="type">AST</data></edge><edge id="707" source="380" target="381" label="AST"><data key="type">AST</data></edge><edge id="706" source="380" target="384" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="708" source="381" target="382" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="710" source="382" target="383" label="AST"><data key="type">AST</data></edge><edge id="712" source="384" target="385" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="715" source="385" target="386" label="AST"><data key="type">AST</data></edge><edge id="718" source="385" target="388" label="AST"><data key="type">AST</data></edge><edge id="714" source="385" target="389" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="717" source="386" target="387" label="AST"><data key="type">AST</data></edge><edge id="716" source="386" target="388" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="721" source="389" target="390" label="AST"><data key="type">AST</data></edge><edge id="724" source="389" target="392" label="AST"><data key="type">AST</data></edge><edge id="720" source="389" target="393" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="49" source="40" target="41" label="AST"><data key="type">AST</data></edge><edge id="48" source="40" target="42" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="51" source="42" target="43" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="55" source="44" target="45" label="AST"><data key="type">AST</data></edge><edge id="54" source="44" target="50" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="56" source="45" target="46" label="AST"><data key="type">AST</data></edge><edge id="59" source="45" target="48" label="AST"><data key="type">AST</data></edge><edge id="61" source="45" target="49" label="AST"><data key="type">AST</data></edge><edge id="58" source="46" target="47" label="AST"><data key="type">AST</data></edge><edge id="57" source="46" target="48" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="60" source="48" target="49" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="723" source="390" target="391" label="AST"><data key="type">AST</data></edge><edge id="722" source="390" target="392" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="731" source="393" target="397" label="AST"><data key="type">AST</data></edge><edge id="727" source="393" target="394" label="AST"><data key="type">AST</data></edge><edge id="726" source="393" target="398" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="729" source="394" target="395" label="AST"><data key="type">AST</data></edge><edge id="728" source="394" target="397" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="730" source="395" target="396" label="AST"><data key="type">AST</data></edge><edge id="734" source="398" target="399" label="AST"><data key="type">AST</data></edge><edge id="733" source="398" target="400" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="64" source="50" target="51" label="AST"><data key="type">AST</data></edge><edge id="63" source="50" target="82" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="88" source="51" target="67" label="AST"><data key="type">AST</data></edge><edge id="86" source="51" target="66" label="AST"><data key="type">AST</data></edge><edge id="65" source="51" target="52" label="AST"><data key="type">AST</data></edge><edge id="67" source="52" target="53" label="AST"><data key="type">AST</data></edge><edge id="69" source="52" target="54" label="AST"><data key="type">AST</data></edge><edge id="72" source="52" target="56" label="AST"><data key="type">AST</data></edge><edge id="66" source="52" target="66" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="68" source="53" target="54" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="71" source="54" target="55" label="AST"><data key="type">AST</data></edge><edge id="70" source="54" target="56" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="78" source="56" target="60" label="AST"><data key="type">AST</data></edge><edge id="73" source="56" target="57" label="AST"><data key="type">AST</data></edge><edge id="75" source="56" target="58" label="AST"><data key="type">AST</data></edge><edge id="74" source="57" target="58" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="77" source="58" target="59" label="AST"><data key="type">AST</data></edge><edge id="76" source="58" target="60" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="79" source="60" target="61" label="AST"><data key="type">AST</data></edge><edge id="81" source="60" target="62" label="AST"><data key="type">AST</data></edge><edge id="84" source="60" target="64" label="AST"><data key="type">AST</data></edge><edge id="80" source="61" target="62" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="83" source="62" target="63" label="AST"><data key="type">AST</data></edge><edge id="82" source="62" target="64" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="85" source="64" target="65" label="AST"><data key="type">AST</data></edge><edge id="87" source="66" target="67" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="89" source="67" target="68" label="AST"><data key="type">AST</data></edge><edge id="90" source="68" target="69" label="AST"><data key="type">AST</data></edge><edge id="92" source="68" target="70" label="AST"><data key="type">AST</data></edge><edge id="95" source="68" target="72" label="AST"><data key="type">AST</data></edge><edge id="91" source="69" target="70" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="94" source="70" target="71" label="AST"><data key="type">AST</data></edge><edge id="93" source="70" target="72" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="101" source="72" target="76" label="AST"><data key="type">AST</data></edge><edge id="96" source="72" target="73" label="AST"><data key="type">AST</data></edge><edge id="98" source="72" target="74" label="AST"><data key="type">AST</data></edge><edge id="97" source="73" target="74" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="100" source="74" target="75" label="AST"><data key="type">AST</data></edge><edge id="99" source="74" target="76" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="102" source="76" target="77" label="AST"><data key="type">AST</data></edge><edge id="104" source="76" target="78" label="AST"><data key="type">AST</data></edge><edge id="107" source="76" target="80" label="AST"><data key="type">AST</data></edge><edge id="103" source="77" target="78" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="106" source="78" target="79" label="AST"><data key="type">AST</data></edge><edge id="105" source="78" target="80" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3178" source="1602" target="1608" label="AST"><data key="type">AST</data></edge><edge id="3183" source="1602" target="1609" label="AST"><data key="type">AST</data></edge><edge id="3171" source="1602" target="1603" label="AST"><data key="type">AST</data></edge><edge id="3165" source="1600" target="1491" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3168" source="1600" target="1524" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3167" source="1600" target="1524" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3166" source="1600" target="1601" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="108" source="80" target="81" label="AST"><data key="type">AST</data></edge><edge id="3217" source="1609" target="1626" label="AST"><data key="type">AST</data></edge><edge id="3233" source="1609" target="1635" label="AST"><data key="type">AST</data></edge><edge id="3199" source="1609" target="1618" label="AST"><data key="type">AST</data></edge><edge id="3342" source="1609" target="1678" label="AST"><data key="type">AST</data></edge><edge id="3330" source="1609" target="1675" label="AST"><data key="type">AST</data></edge><edge id="3252" source="1609" target="1645" label="AST"><data key="type">AST</data></edge><edge id="3184" source="1609" target="1610" label="AST"><data key="type">AST</data></edge><edge id="111" source="82" target="83" label="AST"><data key="type">AST</data></edge><edge id="113" source="82" target="84" label="AST"><data key="type">AST</data></edge><edge id="110" source="82" target="85" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3179" source="1608" target="1598" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3182" source="1608" target="1598" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3181" source="1608" target="1598" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3180" source="1608" target="1609" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="112" source="83" target="84" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="143" source="85" target="104" label="AST"><data key="type">AST</data></edge><edge id="122" source="85" target="90" label="AST"><data key="type">AST</data></edge><edge id="146" source="85" target="106" label="AST"><data key="type">AST</data></edge><edge id="125" source="85" target="92" label="AST"><data key="type">AST</data></edge><edge id="136" source="85" target="99" label="AST"><data key="type">AST</data></edge><edge id="116" source="85" target="86" label="AST"><data key="type">AST</data></edge><edge id="127" source="85" target="93" label="AST"><data key="type">AST</data></edge><edge id="149" source="85" target="108" label="AST"><data key="type">AST</data></edge><edge id="115" source="85" target="272" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3176" source="1605" target="1606" label="AST"><data key="type">AST</data></edge><edge id="3175" source="1605" target="1607" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="118" source="86" target="87" label="AST"><data key="type">AST</data></edge><edge id="120" source="86" target="88" label="AST"><data key="type">AST</data></edge><edge id="117" source="86" target="90" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3177" source="1604" target="1607" label="AST"><data key="type">AST</data></edge><edge id="3174" source="1604" target="1605" label="AST"><data key="type">AST</data></edge><edge id="119" source="87" target="88" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3173" source="1603" target="1604" label="AST"><data key="type">AST</data></edge><edge id="3172" source="1603" target="1608" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="121" source="88" target="89" label="AST"><data key="type">AST</data></edge><edge id="3189" source="1612" target="1613" label="AST"><data key="type">AST</data></edge><edge id="3188" source="1612" target="1614" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3192" source="1611" target="1615" label="AST"><data key="type">AST</data></edge><edge id="3190" source="1611" target="1614" label="AST"><data key="type">AST</data></edge><edge id="3187" source="1611" target="1612" label="AST"><data key="type">AST</data></edge><edge id="3186" source="1610" target="1611" label="AST"><data key="type">AST</data></edge><edge id="3185" source="1610" target="1618" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="124" source="90" target="91" label="AST"><data key="type">AST</data></edge><edge id="123" source="90" target="92" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="126" source="92" target="93" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="135" source="93" target="98" label="AST"><data key="type">AST</data></edge><edge id="129" source="93" target="94" label="AST"><data key="type">AST</data></edge><edge id="128" source="93" target="99" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3203" source="1619" target="1620" label="AST"><data key="type">AST</data></edge><edge id="3202" source="1619" target="1624" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="133" source="94" target="96" label="AST"><data key="type">AST</data></edge><edge id="131" source="94" target="95" label="AST"><data key="type">AST</data></edge><edge id="130" source="94" target="98" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3215" source="1618" target="1624" label="AST"><data key="type">AST</data></edge><edge id="3201" source="1618" target="1619" label="AST"><data key="type">AST</data></edge><edge id="3200" source="1618" target="1626" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="132" source="95" target="96" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="134" source="96" target="97" label="AST"><data key="type">AST</data></edge><edge id="3194" source="1616" target="1607" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3197" source="1616" target="1607" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3196" source="1616" target="1607" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3195" source="1616" target="1617" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3198" source="1615" target="1617" label="AST"><data key="type">AST</data></edge><edge id="3193" source="1615" target="1616" label="AST"><data key="type">AST</data></edge><edge id="3191" source="1614" target="1615" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="138" source="99" target="100" label="AST"><data key="type">AST</data></edge><edge id="142" source="99" target="103" label="AST"><data key="type">AST</data></edge><edge id="137" source="99" target="104" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3216" source="1624" target="1625" label="AST"><data key="type">AST</data></edge><edge id="3212" source="1623" target="1614" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3214" source="1623" target="1614" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3213" source="1623" target="1614" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3210" source="1622" target="1623" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3205" source="1621" target="1495" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3208" source="1621" target="1525" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3207" source="1621" target="1525" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3206" source="1621" target="1622" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3204" source="1620" target="1621" label="AST"><data key="type">AST</data></edge><edge id="3211" source="1620" target="1623" label="AST"><data key="type">AST</data></edge><edge id="3209" source="1620" target="1622" label="AST"><data key="type">AST</data></edge><edge id="3223" source="1629" target="1630" label="AST"><data key="type">AST</data></edge><edge id="3222" source="1628" target="1629" label="AST"><data key="type">AST</data></edge><edge id="3221" source="1628" target="1631" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3226" source="1627" target="1632" label="AST"><data key="type">AST</data></edge><edge id="3224" source="1627" target="1631" label="AST"><data key="type">AST</data></edge><edge id="3220" source="1627" target="1628" label="AST"><data key="type">AST</data></edge><edge id="3219" source="1626" target="1627" label="AST"><data key="type">AST</data></edge><edge id="3218" source="1626" target="1635" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3235" source="1635" target="1636" label="AST"><data key="type">AST</data></edge><edge id="3250" source="1635" target="1643" label="AST"><data key="type">AST</data></edge><edge id="3234" source="1635" target="1645" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3228" source="1633" target="1607" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3231" source="1633" target="1616" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3230" source="1633" target="1616" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3229" source="1633" target="1634" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3227" source="1632" target="1633" label="AST"><data key="type">AST</data></edge><edge id="3232" source="1632" target="1634" label="AST"><data key="type">AST</data></edge><edge id="3225" source="1631" target="1632" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3240" source="1638" target="1500" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3242" source="1638" target="1545" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3241" source="1638" target="1639" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3239" source="1637" target="1638" label="AST"><data key="type">AST</data></edge><edge id="3243" source="1637" target="1639" label="AST"><data key="type">AST</data></edge><edge id="3238" source="1637" target="1640" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3237" source="1636" target="1637" label="AST"><data key="type">AST</data></edge><edge id="3244" source="1636" target="1640" label="AST"><data key="type">AST</data></edge><edge id="3236" source="1636" target="1643" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3256" source="1646" target="1647" label="AST"><data key="type">AST</data></edge><edge id="3263" source="1646" target="1651" label="AST"><data key="type">AST</data></edge><edge id="3255" source="1646" target="1657" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3289" source="1645" target="1660" label="AST"><data key="type">AST</data></edge><edge id="3254" source="1645" target="1646" label="AST"><data key="type">AST</data></edge><edge id="3275" source="1645" target="1657" label="AST"><data key="type">AST</data></edge><edge id="3295" source="1645" target="1662" label="AST"><data key="type">AST</data></edge><edge id="3253" source="1645" target="1675" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3251" source="1643" target="1644" label="AST"><data key="type">AST</data></edge><edge id="3246" source="1641" target="1631" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3248" source="1641" target="1631" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3247" source="1641" target="1642" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3249" source="1640" target="1642" label="AST"><data key="type">AST</data></edge><edge id="3245" source="1640" target="1641" label="AST"><data key="type">AST</data></edge><edge id="3261" source="1649" target="1650" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3259" source="1648" target="1649" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3258" source="1647" target="1648" label="AST"><data key="type">AST</data></edge><edge id="3262" source="1647" target="1650" label="AST"><data key="type">AST</data></edge><edge id="3260" source="1647" target="1649" label="AST"><data key="type">AST</data></edge><edge id="3257" source="1647" target="1651" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3291" source="1660" target="1661" label="AST"><data key="type">AST</data></edge><edge id="3290" source="1660" target="1662" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3277" source="1657" target="1658" label="AST"><data key="type">AST</data></edge><edge id="3284" source="1657" target="1659" label="AST"><data key="type">AST</data></edge><edge id="3276" source="1657" target="1660" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3270" source="1655" target="1500" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3272" source="1655" target="1638" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3271" source="1655" target="1656" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3269" source="1654" target="1655" label="AST"><data key="type">AST</data></edge><edge id="3273" source="1654" target="1656" label="AST"><data key="type">AST</data></edge><edge id="3274" source="1654" target="1637" label="LAST_FIELD_LEX"><data key="type">LAST_FIELD_LEX</data></edge><edge id="3267" source="1653" target="1654" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3265" source="1652" target="1653" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3268" source="1651" target="1654" label="AST"><data key="type">AST</data></edge><edge id="3266" source="1651" target="1653" label="AST"><data key="type">AST</data></edge><edge id="3264" source="1651" target="1652" label="AST"><data key="type">AST</data></edge><edge id="3285" source="1659" target="1653" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3288" source="1659" target="1653" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3287" source="1659" target="1659" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3286" source="1659" target="1653" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3279" source="1658" target="1661" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3278" source="1658" target="1649" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3283" source="1658" target="1649" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3282" source="1658" target="1661" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3281" source="1658" target="1649" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3280" source="1658" target="1659" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3318" source="1671" target="1500" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3319" source="1671" target="1671" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3323" source="1671" target="1545" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3322" source="1671" target="1671" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3321" source="1671" target="1655" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3320" source="1671" target="1672" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3317" source="1670" target="1671" label="AST"><data key="type">AST</data></edge><edge id="3324" source="1670" target="1672" label="AST"><data key="type">AST</data></edge><edge id="3311" source="1668" target="1661" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3310" source="1668" target="1649" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3313" source="1668" target="1661" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3312" source="1668" target="1658" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3304" source="1667" target="1667" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3303" source="1667" target="1631" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3308" source="1667" target="1631" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3307" source="1667" target="1667" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3306" source="1667" target="1641" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3305" source="1667" target="1668" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3302" source="1666" target="1667" label="AST"><data key="type">AST</data></edge><edge id="3309" source="1666" target="1668" label="AST"><data key="type">AST</data></edge><edge id="3301" source="1666" target="1669" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3316" source="1665" target="1670" label="AST"><data key="type">AST</data></edge><edge id="3314" source="1665" target="1669" label="AST"><data key="type">AST</data></edge><edge id="3300" source="1665" target="1666" label="AST"><data key="type">AST</data></edge><edge id="3299" source="1664" target="1665" label="AST"><data key="type">AST</data></edge><edge id="3298" source="1664" target="1673" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3328" source="1663" target="1673" label="AST"><data key="type">AST</data></edge><edge id="3297" source="1663" target="1664" label="AST"><data key="type">AST</data></edge><edge id="3296" source="1662" target="1663" label="AST"><data key="type">AST</data></edge><edge id="3292" source="1661" target="1672" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3294" source="1661" target="1658" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3293" source="1661" target="1672" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3315" source="1669" target="1670" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3356" source="1682" target="1676" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3358" source="1682" target="1676" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3357" source="1682" target="1676" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3351" source="1681" target="1570" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3354" source="1681" target="1587" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3353" source="1681" target="1587" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3352" source="1681" target="1682" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3349" source="1680" target="1681" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3344" source="1679" target="1514" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3347" source="1679" target="1585" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3346" source="1679" target="1585" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3345" source="1679" target="1680" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3348" source="1678" target="1680" label="AST"><data key="type">AST</data></edge><edge id="3355" source="1678" target="1682" label="AST"><data key="type">AST</data></edge><edge id="3343" source="1678" target="1679" label="AST"><data key="type">AST</data></edge><edge id="3350" source="1678" target="1681" label="AST"><data key="type">AST</data></edge><edge id="3339" source="1677" target="1607" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3341" source="1677" target="1633" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3340" source="1677" target="1633" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3333" source="1676" target="1580" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3337" source="1676" target="1590" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3336" source="1676" target="1677" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="3335" source="1676" target="1590" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3334" source="1676" target="1677" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3338" source="1675" target="1677" label="AST"><data key="type">AST</data></edge><edge id="3332" source="1675" target="1676" label="AST"><data key="type">AST</data></edge><edge id="3331" source="1675" target="1678" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3329" source="1673" target="1674" label="AST"><data key="type">AST</data></edge><edge id="3325" source="1672" target="1668" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3327" source="1672" target="1668" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3326" source="1672" target="1668" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3381" source="1692" target="1693" label="AST"><data key="type">AST</data></edge><edge id="3379" source="1691" target="1692" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3378" source="1690" target="1691" label="AST"><data key="type">AST</data></edge><edge id="3380" source="1690" target="1692" label="AST"><data key="type">AST</data></edge><edge id="3377" source="1690" target="1694" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2349" source="1206" target="1187" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2352" source="1206" target="1201" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2351" source="1206" target="1201" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2350" source="1206" target="1207" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2348" source="1205" target="1206" label="AST"><data key="type">AST</data></edge><edge id="2353" source="1205" target="1207" label="AST"><data key="type">AST</data></edge><edge id="2347" source="1205" target="1208" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3376" source="1689" target="1690" label="AST"><data key="type">AST</data></edge><edge id="3382" source="1689" target="1694" label="AST"><data key="type">AST</data></edge><edge id="3375" source="1689" target="1695" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2346" source="1204" target="1205" label="AST"><data key="type">AST</data></edge><edge id="2354" source="1204" target="1208" label="AST"><data key="type">AST</data></edge><edge id="2345" source="1204" target="1209" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3373" source="1688" target="1689" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2344" source="1203" target="1204" label="AST"><data key="type">AST</data></edge><edge id="2355" source="1203" target="1209" label="AST"><data key="type">AST</data></edge><edge id="3371" source="1686" target="1687" label="AST"><data key="type">AST</data></edge><edge id="3370" source="1686" target="1688" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2338" source="1201" target="1187" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2341" source="1201" target="1187" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2340" source="1201" target="1187" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2339" source="1201" target="1202" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3369" source="1685" target="1686" label="AST"><data key="type">AST</data></edge><edge id="3398" source="1685" target="1705" label="AST"><data key="type">AST</data></edge><edge id="3386" source="1685" target="1697" label="AST"><data key="type">AST</data></edge><edge id="3374" source="1685" target="1689" label="AST"><data key="type">AST</data></edge><edge id="3372" source="1685" target="1688" label="AST"><data key="type">AST</data></edge><edge id="3383" source="1685" target="1695" label="AST"><data key="type">AST</data></edge><edge id="3368" source="1685" target="1720" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2337" source="1200" target="1201" label="AST"><data key="type">AST</data></edge><edge id="2342" source="1200" target="1202" label="AST"><data key="type">AST</data></edge><edge id="2336" source="1200" target="1203" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3362" source="1684" target="1676" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3361" source="1684" target="1580" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3365" source="1684" target="1682" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3364" source="1684" target="1682" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3363" source="1684" target="1590" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3360" source="1683" target="1684" label="AST"><data key="type">AST</data></edge><edge id="3366" source="1683" target="1486" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="2370" source="1220" target="1221" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2369" source="1217" target="1220" label="AST"><data key="type">AST</data></edge><edge id="2366" source="1217" target="1218" label="AST"><data key="type">AST</data></edge><edge id="2371" source="1217" target="1221" label="AST"><data key="type">AST</data></edge><edge id="2365" source="1216" target="1217" label="AST"><data key="type">AST</data></edge><edge id="2364" source="1216" target="1230" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3392" source="1699" target="1700" label="AST"><data key="type">AST</data></edge><edge id="3391" source="1699" target="1701" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3389" source="1698" target="1699" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2361" source="1213" target="1214" label="AST"><data key="type">AST</data></edge><edge id="2360" source="1213" target="1215" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3390" source="1697" target="1699" label="AST"><data key="type">AST</data></edge><edge id="3388" source="1697" target="1698" label="AST"><data key="type">AST</data></edge><edge id="3393" source="1697" target="1701" label="AST"><data key="type">AST</data></edge><edge id="3387" source="1697" target="1705" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2359" source="1212" target="1213" label="AST"><data key="type">AST</data></edge><edge id="2362" source="1212" target="1215" label="AST"><data key="type">AST</data></edge><edge id="2358" source="1211" target="1212" label="AST"><data key="type">AST</data></edge><edge id="3385" source="1695" target="1696" label="AST"><data key="type">AST</data></edge><edge id="3384" source="1695" target="1697" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2357" source="1210" target="1211" label="AST"><data key="type">AST</data></edge><edge id="2368" source="1218" target="1219" label="AST"><data key="type">AST</data></edge><edge id="2367" source="1218" target="1220" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2403" source="1231" target="1237" label="AST"><data key="type">AST</data></edge><edge id="2392" source="1231" target="1232" label="AST"><data key="type">AST</data></edge><edge id="2391" source="1231" target="1238" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2404" source="1230" target="1238" label="AST"><data key="type">AST</data></edge><edge id="2390" source="1230" target="1231" label="AST"><data key="type">AST</data></edge><edge id="2389" source="1230" target="1247" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2386" source="1228" target="1229" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2381" source="1227" target="1187" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2384" source="1227" target="1206" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2383" source="1227" target="1206" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2382" source="1227" target="1228" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2387" source="1226" target="1229" label="AST"><data key="type">AST</data></edge><edge id="2385" source="1226" target="1228" label="AST"><data key="type">AST</data></edge><edge id="2380" source="1226" target="1227" label="AST"><data key="type">AST</data></edge><edge id="2378" source="1225" target="1226" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2376" source="1224" target="1225" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2379" source="1223" target="1226" label="AST"><data key="type">AST</data></edge><edge id="2377" source="1223" target="1225" label="AST"><data key="type">AST</data></edge><edge id="2375" source="1223" target="1224" label="AST"><data key="type">AST</data></edge><edge id="2373" source="1222" target="1223" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2374" source="1221" target="1223" label="AST"><data key="type">AST</data></edge><edge id="2372" source="1221" target="1222" label="AST"><data key="type">AST</data></edge><edge id="1513" source="802" target="803" label="AST"><data key="type">AST</data></edge><edge id="1512" source="802" target="804" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1516" source="804" target="805" label="AST"><data key="type">AST</data></edge><edge id="1515" source="804" target="806" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1541" source="806" target="819" label="AST"><data key="type">AST</data></edge><edge id="1563" source="806" target="832" label="AST"><data key="type">AST</data></edge><edge id="1640" source="806" target="859" label="AST"><data key="type">AST</data></edge><edge id="1518" source="806" target="807" label="AST"><data key="type">AST</data></edge><edge id="1520" source="807" target="808" label="AST"><data key="type">AST</data></edge><edge id="1528" source="807" target="811" label="AST"><data key="type">AST</data></edge><edge id="1519" source="807" target="819" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1522" source="808" target="809" label="AST"><data key="type">AST</data></edge><edge id="1527" source="808" target="810" label="AST"><data key="type">AST</data></edge><edge id="1521" source="808" target="811" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1523" source="809" target="801" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1526" source="809" target="801" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1525" source="809" target="801" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1524" source="809" target="810" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2415" source="1242" target="1243" label="AST"><data key="type">AST</data></edge><edge id="2422" source="1242" target="1245" label="AST"><data key="type">AST</data></edge><edge id="2420" source="1242" target="1244" label="AST"><data key="type">AST</data></edge><edge id="2414" source="1242" target="1246" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2413" source="1241" target="1242" label="AST"><data key="type">AST</data></edge><edge id="2423" source="1241" target="1246" label="AST"><data key="type">AST</data></edge><edge id="2407" source="1240" target="1220" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2411" source="1240" target="1220" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2410" source="1240" target="1243" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="2409" source="1240" target="1220" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2408" source="1240" target="1241" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2412" source="1239" target="1241" label="AST"><data key="type">AST</data></edge><edge id="2406" source="1239" target="1240" label="AST"><data key="type">AST</data></edge><edge id="2405" source="1238" target="1239" label="AST"><data key="type">AST</data></edge><edge id="2397" source="1234" target="1187" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2400" source="1234" target="1227" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2399" source="1234" target="1227" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2398" source="1234" target="1235" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2401" source="1233" target="1235" label="AST"><data key="type">AST</data></edge><edge id="2396" source="1233" target="1234" label="AST"><data key="type">AST</data></edge><edge id="2395" source="1233" target="1236" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2402" source="1232" target="1236" label="AST"><data key="type">AST</data></edge><edge id="2394" source="1232" target="1233" label="AST"><data key="type">AST</data></edge><edge id="2393" source="1232" target="1237" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1529" source="811" target="812" label="AST"><data key="type">AST</data></edge><edge id="1535" source="812" target="814" label="AST"><data key="type">AST</data></edge><edge id="1530" source="812" target="813" label="AST"><data key="type">AST</data></edge><edge id="1531" source="813" target="801" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1534" source="813" target="809" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1533" source="813" target="809" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1532" source="813" target="814" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1536" source="814" target="815" label="AST"><data key="type">AST</data></edge><edge id="1539" source="814" target="817" label="AST"><data key="type">AST</data></edge><edge id="1538" source="815" target="816" label="AST"><data key="type">AST</data></edge><edge id="1537" source="815" target="817" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1540" source="817" target="818" label="AST"><data key="type">AST</data></edge><edge id="1543" source="819" target="820" label="AST"><data key="type">AST</data></edge><edge id="1542" source="819" target="832" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2434" source="1253" target="1183" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2437" source="1253" target="1183" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2436" source="1253" target="1183" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2435" source="1253" target="1254" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2438" source="1252" target="1254" label="AST"><data key="type">AST</data></edge><edge id="2433" source="1252" target="1253" label="AST"><data key="type">AST</data></edge><edge id="2431" source="1251" target="1252" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2429" source="1249" target="1250" label="AST"><data key="type">AST</data></edge><edge id="2428" source="1249" target="1251" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2427" source="1248" target="1249" label="AST"><data key="type">AST</data></edge><edge id="2432" source="1248" target="1252" label="AST"><data key="type">AST</data></edge><edge id="2430" source="1248" target="1251" label="AST"><data key="type">AST</data></edge><edge id="2426" source="1247" target="1248" label="AST"><data key="type">AST</data></edge><edge id="2425" source="1247" target="1255" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1544" source="820" target="821" label="AST"><data key="type">AST</data></edge><edge id="1550" source="820" target="825" label="AST"><data key="type">AST</data></edge><edge id="1548" source="820" target="824" label="AST"><data key="type">AST</data></edge><edge id="2421" source="1244" target="1245" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1546" source="821" target="822" label="AST"><data key="type">AST</data></edge><edge id="1545" source="821" target="824" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2416" source="1243" target="1187" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2419" source="1243" target="1234" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2418" source="1243" target="1234" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2417" source="1243" target="1244" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1547" source="822" target="823" label="AST"><data key="type">AST</data></edge><edge id="1549" source="824" target="825" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1554" source="825" target="828" label="AST"><data key="type">AST</data></edge><edge id="1551" source="825" target="826" label="AST"><data key="type">AST</data></edge><edge id="1553" source="826" target="827" label="AST"><data key="type">AST</data></edge><edge id="1552" source="826" target="828" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1555" source="828" target="829" label="AST"><data key="type">AST</data></edge><edge id="1556" source="829" target="830" label="AST"><data key="type">AST</data></edge><edge id="1562" source="829" target="831" label="AST"><data key="type">AST</data></edge><edge id="2454" source="1264" target="1265" label="AST"><data key="type">AST</data></edge><edge id="2453" source="1264" target="1266" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2457" source="1263" target="1267" label="AST"><data key="type">AST</data></edge><edge id="2455" source="1263" target="1266" label="AST"><data key="type">AST</data></edge><edge id="2452" source="1263" target="1264" label="AST"><data key="type">AST</data></edge><edge id="2451" source="1262" target="1263" label="AST"><data key="type">AST</data></edge><edge id="2450" source="1262" target="1272" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2447" source="1260" target="1261" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2445" source="1258" target="1259" label="AST"><data key="type">AST</data></edge><edge id="2444" source="1257" target="1258" label="AST"><data key="type">AST</data></edge><edge id="2443" source="1257" target="1260" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1558" source="830" target="813" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1557" source="830" target="801" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1561" source="830" target="813" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1560" source="830" target="809" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1559" source="830" target="831" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2448" source="1256" target="1261" label="AST"><data key="type">AST</data></edge><edge id="2446" source="1256" target="1260" label="AST"><data key="type">AST</data></edge><edge id="2442" source="1256" target="1257" label="AST"><data key="type">AST</data></edge><edge id="2441" source="1255" target="1256" label="AST"><data key="type">AST</data></edge><edge id="2440" source="1255" target="1262" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1601" source="832" target="847" label="AST"><data key="type">AST</data></edge><edge id="1565" source="832" target="833" label="AST"><data key="type">AST</data></edge><edge id="1587" source="832" target="844" label="AST"><data key="type">AST</data></edge><edge id="1607" source="832" target="849" label="AST"><data key="type">AST</data></edge><edge id="1564" source="832" target="859" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1567" source="833" target="834" label="AST"><data key="type">AST</data></edge><edge id="1574" source="833" target="838" label="AST"><data key="type">AST</data></edge><edge id="1566" source="833" target="844" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1569" source="834" target="835" label="AST"><data key="type">AST</data></edge><edge id="1573" source="834" target="837" label="AST"><data key="type">AST</data></edge><edge id="1571" source="834" target="836" label="AST"><data key="type">AST</data></edge><edge id="1568" source="834" target="838" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1570" source="835" target="836" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1572" source="836" target="837" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1579" source="838" target="841" label="AST"><data key="type">AST</data></edge><edge id="1577" source="838" target="840" label="AST"><data key="type">AST</data></edge><edge id="1575" source="838" target="839" label="AST"><data key="type">AST</data></edge><edge id="1576" source="839" target="840" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2481" source="1274" target="1266" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2484" source="1274" target="1266" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2483" source="1274" target="1266" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2482" source="1274" target="1275" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2485" source="1273" target="1275" label="AST"><data key="type">AST</data></edge><edge id="2480" source="1273" target="1274" label="AST"><data key="type">AST</data></edge><edge id="2479" source="1273" target="1276" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2478" source="1272" target="1273" label="AST"><data key="type">AST</data></edge><edge id="2486" source="1272" target="1276" label="AST"><data key="type">AST</data></edge><edge id="2477" source="1272" target="1284" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2473" source="1271" target="1260" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2475" source="1271" target="1260" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2474" source="1271" target="1260" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2467" source="1270" target="1240" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2466" source="1270" target="1220" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2471" source="1270" target="1240" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2469" source="1270" target="1220" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2470" source="1270" target="1240" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2468" source="1270" target="1271" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2461" source="1269" target="1251" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2464" source="1269" target="1251" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2463" source="1269" target="1251" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2462" source="1269" target="1270" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1578" source="840" target="841" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2459" source="1268" target="1269" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1585" source="841" target="843" label="AST"><data key="type">AST</data></edge><edge id="1580" source="841" target="842" label="AST"><data key="type">AST</data></edge><edge id="1586" source="841" target="829" label="LAST_FIELD_LEX"><data key="type">LAST_FIELD_LEX</data></edge><edge id="2458" source="1267" target="1268" label="AST"><data key="type">AST</data></edge><edge id="2465" source="1267" target="1270" label="AST"><data key="type">AST</data></edge><edge id="2472" source="1267" target="1271" label="AST"><data key="type">AST</data></edge><edge id="2460" source="1267" target="1269" label="AST"><data key="type">AST</data></edge><edge id="1582" source="842" target="813" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1581" source="842" target="801" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1584" source="842" target="830" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1583" source="842" target="843" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2456" source="1266" target="1267" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1589" source="844" target="845" label="AST"><data key="type">AST</data></edge><edge id="1596" source="844" target="846" label="AST"><data key="type">AST</data></edge><edge id="1588" source="844" target="847" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1591" source="845" target="848" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1590" source="845" target="836" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1595" source="845" target="836" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1594" source="845" target="848" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1593" source="845" target="836" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1592" source="845" target="846" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1597" source="846" target="840" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1600" source="846" target="840" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1599" source="846" target="846" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1598" source="846" target="840" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1603" source="847" target="848" label="AST"><data key="type">AST</data></edge><edge id="1602" source="847" target="849" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1604" source="848" target="853" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1606" source="848" target="845" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1605" source="848" target="853" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1608" source="849" target="850" label="AST"><data key="type">AST</data></edge><edge id="2520" source="1286" target="1278" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2519" source="1286" target="1266" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2524" source="1286" target="1278" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2523" source="1286" target="1278" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2522" source="1286" target="1274" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2521" source="1286" target="1287" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2525" source="1285" target="1287" label="AST"><data key="type">AST</data></edge><edge id="2518" source="1285" target="1286" label="AST"><data key="type">AST</data></edge><edge id="2517" source="1285" target="1288" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2526" source="1284" target="1288" label="AST"><data key="type">AST</data></edge><edge id="2516" source="1284" target="1285" label="AST"><data key="type">AST</data></edge><edge id="2515" source="1284" target="1342" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2511" source="1283" target="1260" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2513" source="1283" target="1271" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2512" source="1283" target="1271" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2505" source="1282" target="1187" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2509" source="1282" target="1243" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2508" source="1282" target="1243" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2507" source="1282" target="1234" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2506" source="1282" target="1283" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2500" source="1281" target="1251" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2503" source="1281" target="1269" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2502" source="1281" target="1269" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2501" source="1281" target="1282" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2498" source="1280" target="1281" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1609" source="850" target="851" label="AST"><data key="type">AST</data></edge><edge id="1625" source="850" target="854" label="AST"><data key="type">AST</data></edge><edge id="1611" source="851" target="852" label="AST"><data key="type">AST</data></edge><edge id="1620" source="851" target="853" label="AST"><data key="type">AST</data></edge><edge id="1610" source="851" target="854" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2504" source="1279" target="1282" label="AST"><data key="type">AST</data></edge><edge id="2499" source="1279" target="1281" label="AST"><data key="type">AST</data></edge><edge id="2510" source="1279" target="1283" label="AST"><data key="type">AST</data></edge><edge id="2497" source="1279" target="1280" label="AST"><data key="type">AST</data></edge><edge id="1613" source="852" target="852" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1612" source="852" target="824" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1619" source="852" target="824" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1618" source="852" target="857" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="1617" source="852" target="856" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="1616" source="852" target="852" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1615" source="852" target="824" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1614" source="852" target="853" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2489" source="1278" target="1266" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2495" source="1278" target="1274" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2494" source="1278" target="1283" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="2493" source="1278" target="1282" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="2492" source="1278" target="1281" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="2491" source="1278" target="1274" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2490" source="1278" target="1279" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1622" source="853" target="848" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1621" source="853" target="836" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1624" source="853" target="848" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1623" source="853" target="857" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2488" source="1277" target="1278" label="AST"><data key="type">AST</data></edge><edge id="2496" source="1277" target="1279" label="AST"><data key="type">AST</data></edge><edge id="1639" source="854" target="858" label="AST"><data key="type">AST</data></edge><edge id="1626" source="854" target="855" label="AST"><data key="type">AST</data></edge><edge id="2487" source="1276" target="1277" label="AST"><data key="type">AST</data></edge><edge id="1635" source="855" target="857" label="AST"><data key="type">AST</data></edge><edge id="1628" source="855" target="856" label="AST"><data key="type">AST</data></edge><edge id="1627" source="855" target="858" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1630" source="856" target="813" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1629" source="856" target="801" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1634" source="856" target="813" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1633" source="856" target="856" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1632" source="856" target="842" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1631" source="856" target="857" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1636" source="857" target="836" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1638" source="857" target="853" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1637" source="857" target="845" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1821" source="859" target="944" label="AST"><data key="type">AST</data></edge><edge id="1641" source="859" target="860" label="AST"><data key="type">AST</data></edge><edge id="1805" source="859" target="933" label="AST"><data key="type">AST</data></edge><edge id="2558" source="1297" target="1301" label="AST"><data key="type">AST</data></edge><edge id="2556" source="1297" target="1300" label="AST"><data key="type">AST</data></edge><edge id="2553" source="1297" target="1298" label="AST"><data key="type">AST</data></edge><edge id="2548" source="1296" target="1183" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2551" source="1296" target="1253" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2550" source="1296" target="1253" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2549" source="1296" target="1297" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2546" source="1295" target="1296" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2541" source="1294" target="1278" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2540" source="1294" target="1266" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2544" source="1294" target="1286" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2543" source="1294" target="1286" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2542" source="1294" target="1295" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2547" source="1293" target="1296" label="AST"><data key="type">AST</data></edge><edge id="2545" source="1293" target="1295" label="AST"><data key="type">AST</data></edge><edge id="2552" source="1293" target="1297" label="AST"><data key="type">AST</data></edge><edge id="2539" source="1293" target="1294" label="AST"><data key="type">AST</data></edge><edge id="2532" source="1292" target="1197" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2537" source="1292" target="1197" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2536" source="1292" target="1296" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="2535" source="1292" target="1294" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="2534" source="1292" target="1197" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2533" source="1292" target="1293" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2531" source="1291" target="1292" label="AST"><data key="type">AST</data></edge><edge id="2538" source="1291" target="1293" label="AST"><data key="type">AST</data></edge><edge id="2530" source="1290" target="1291" label="AST"><data key="type">AST</data></edge><edge id="2529" source="1290" target="1302" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1787" source="860" target="927" label="AST"><data key="type">AST</data></edge><edge id="1643" source="860" target="861" label="AST"><data key="type">AST</data></edge><edge id="1670" source="860" target="871" label="AST"><data key="type">AST</data></edge><edge id="1642" source="860" target="933" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1645" source="861" target="862" label="AST"><data key="type">AST</data></edge><edge id="1644" source="861" target="871" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1646" source="862" target="863" label="AST"><data key="type">AST</data></edge><edge id="1651" source="862" target="866" label="AST"><data key="type">AST</data></edge><edge id="1649" source="862" target="865" label="AST"><data key="type">AST</data></edge><edge id="1648" source="863" target="864" label="AST"><data key="type">AST</data></edge><edge id="1647" source="863" target="865" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2559" source="1289" target="1302" label="AST"><data key="type">AST</data></edge><edge id="2598" source="1289" target="1322" label="AST"><data key="type">AST</data></edge><edge id="2528" source="1289" target="1290" label="AST"><data key="type">AST</data></edge><edge id="2527" source="1288" target="1289" label="AST"><data key="type">AST</data></edge><edge id="1650" source="865" target="866" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1654" source="866" target="868" label="AST"><data key="type">AST</data></edge><edge id="1664" source="866" target="870" label="AST"><data key="type">AST</data></edge><edge id="1652" source="866" target="867" label="AST"><data key="type">AST</data></edge><edge id="1659" source="866" target="869" label="AST"><data key="type">AST</data></edge><edge id="1653" source="867" target="868" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1655" source="868" target="792" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1658" source="868" target="792" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1657" source="868" target="792" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1656" source="868" target="869" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1660" source="869" target="796" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1663" source="869" target="796" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1662" source="869" target="796" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1661" source="869" target="870" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1666" source="870" target="852" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1665" source="870" target="824" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1669" source="870" target="852" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1668" source="870" target="852" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1667" source="870" target="824" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1672" source="871" target="872" label="AST"><data key="type">AST</data></edge><edge id="1680" source="871" target="875" label="AST"><data key="type">AST</data></edge><edge id="1671" source="871" target="927" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1679" source="872" target="874" label="AST"><data key="type">AST</data></edge><edge id="1674" source="872" target="873" label="AST"><data key="type">AST</data></edge><edge id="1673" source="872" target="875" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1675" source="873" target="865" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1678" source="873" target="865" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1677" source="873" target="865" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1676" source="873" target="874" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1756" source="875" target="912" label="AST"><data key="type">AST</data></edge><edge id="1775" source="875" target="920" label="AST"><data key="type">AST</data></edge><edge id="1681" source="875" target="876" label="AST"><data key="type">AST</data></edge><edge id="1692" source="875" target="884" label="AST"><data key="type">AST</data></edge><edge id="1715" source="875" target="894" label="AST"><data key="type">AST</data></edge><edge id="1683" source="876" target="877" label="AST"><data key="type">AST</data></edge><edge id="1682" source="876" target="884" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2555" source="1298" target="1299" label="AST"><data key="type">AST</data></edge><edge id="2554" source="1298" target="1300" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1689" source="877" target="881" label="AST"><data key="type">AST</data></edge><edge id="1687" source="877" target="880" label="AST"><data key="type">AST</data></edge><edge id="1684" source="877" target="878" label="AST"><data key="type">AST</data></edge><edge id="1686" source="878" target="879" label="AST"><data key="type">AST</data></edge><edge id="1685" source="878" target="880" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1688" source="880" target="881" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1690" source="881" target="882" label="AST"><data key="type">AST</data></edge><edge id="1691" source="882" target="883" label="AST"><data key="type">AST</data></edge><edge id="737" source="400" target="401" label="AST"><data key="type">AST</data></edge><edge id="736" source="400" target="402" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1712" source="884" target="892" label="AST"><data key="type">AST</data></edge><edge id="1694" source="884" target="885" label="AST"><data key="type">AST</data></edge><edge id="1714" source="884" target="893" label="AST"><data key="type">AST</data></edge><edge id="1693" source="884" target="894" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1696" source="885" target="886" label="AST"><data key="type">AST</data></edge><edge id="1708" source="885" target="891" label="AST"><data key="type">AST</data></edge><edge id="1706" source="885" target="890" label="AST"><data key="type">AST</data></edge><edge id="1695" source="885" target="892" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="762" source="402" target="415" label="AST"><data key="type">AST</data></edge><edge id="784" source="402" target="428" label="AST"><data key="type">AST</data></edge><edge id="861" source="402" target="455" label="AST"><data key="type">AST</data></edge><edge id="739" source="402" target="403" label="AST"><data key="type">AST</data></edge><edge id="1698" source="886" target="887" label="AST"><data key="type">AST</data></edge><edge id="1705" source="886" target="889" label="AST"><data key="type">AST</data></edge><edge id="1703" source="886" target="888" label="AST"><data key="type">AST</data></edge><edge id="1697" source="886" target="890" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="741" source="403" target="404" label="AST"><data key="type">AST</data></edge><edge id="749" source="403" target="407" label="AST"><data key="type">AST</data></edge><edge id="740" source="403" target="415" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1699" source="887" target="880" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1702" source="887" target="880" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1701" source="887" target="880" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1700" source="887" target="888" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="743" source="404" target="405" label="AST"><data key="type">AST</data></edge><edge id="748" source="404" target="406" label="AST"><data key="type">AST</data></edge><edge id="742" source="404" target="407" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1704" source="888" target="889" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="744" source="405" target="397" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="747" source="405" target="397" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="746" source="405" target="397" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="745" source="405" target="406" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="750" source="407" target="408" label="AST"><data key="type">AST</data></edge><edge id="751" source="408" target="409" label="AST"><data key="type">AST</data></edge><edge id="756" source="408" target="410" label="AST"><data key="type">AST</data></edge><edge id="752" source="409" target="397" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="755" source="409" target="405" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="754" source="409" target="405" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="753" source="409" target="410" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1707" source="890" target="891" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1709" source="891" target="796" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1711" source="891" target="869" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1710" source="891" target="869" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1713" source="892" target="893" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="760" source="410" target="413" label="AST"><data key="type">AST</data></edge><edge id="757" source="410" target="411" label="AST"><data key="type">AST</data></edge><edge id="1730" source="894" target="901" label="AST"><data key="type">AST</data></edge><edge id="1717" source="894" target="895" label="AST"><data key="type">AST</data></edge><edge id="1724" source="894" target="900" label="AST"><data key="type">AST</data></edge><edge id="1716" source="894" target="912" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="759" source="411" target="412" label="AST"><data key="type">AST</data></edge><edge id="758" source="411" target="413" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1719" source="895" target="896" label="AST"><data key="type">AST</data></edge><edge id="1718" source="895" target="900" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1723" source="896" target="899" label="AST"><data key="type">AST</data></edge><edge id="1720" source="896" target="897" label="AST"><data key="type">AST</data></edge><edge id="761" source="413" target="414" label="AST"><data key="type">AST</data></edge><edge id="1722" source="897" target="898" label="AST"><data key="type">AST</data></edge><edge id="1721" source="897" target="899" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="764" source="415" target="416" label="AST"><data key="type">AST</data></edge><edge id="763" source="415" target="428" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="771" source="416" target="421" label="AST"><data key="type">AST</data></edge><edge id="765" source="416" target="417" label="AST"><data key="type">AST</data></edge><edge id="769" source="416" target="420" label="AST"><data key="type">AST</data></edge><edge id="767" source="417" target="418" label="AST"><data key="type">AST</data></edge><edge id="766" source="417" target="420" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="768" source="418" target="419" label="AST"><data key="type">AST</data></edge><edge id="770" source="420" target="421" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="772" source="421" target="422" label="AST"><data key="type">AST</data></edge><edge id="775" source="421" target="424" label="AST"><data key="type">AST</data></edge><edge id="774" source="422" target="423" label="AST"><data key="type">AST</data></edge><edge id="773" source="422" target="424" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="776" source="424" target="425" label="AST"><data key="type">AST</data></edge><edge id="783" source="425" target="427" label="AST"><data key="type">AST</data></edge><edge id="777" source="425" target="426" label="AST"><data key="type">AST</data></edge><edge id="778" source="426" target="397" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="779" source="426" target="409" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="781" source="426" target="405" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="782" source="426" target="409" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="780" source="426" target="427" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="808" source="428" target="440" label="AST"><data key="type">AST</data></edge><edge id="786" source="428" target="429" label="AST"><data key="type">AST</data></edge><edge id="822" source="428" target="443" label="AST"><data key="type">AST</data></edge><edge id="828" source="428" target="445" label="AST"><data key="type">AST</data></edge><edge id="785" source="428" target="455" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="795" source="429" target="434" label="AST"><data key="type">AST</data></edge><edge id="788" source="429" target="430" label="AST"><data key="type">AST</data></edge><edge id="787" source="429" target="440" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="792" source="430" target="432" label="AST"><data key="type">AST</data></edge><edge id="794" source="430" target="433" label="AST"><data key="type">AST</data></edge><edge id="790" source="430" target="431" label="AST"><data key="type">AST</data></edge><edge id="789" source="430" target="434" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="791" source="431" target="432" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="793" source="432" target="433" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="796" source="434" target="435" label="AST"><data key="type">AST</data></edge><edge id="798" source="434" target="436" label="AST"><data key="type">AST</data></edge><edge id="800" source="434" target="437" label="AST"><data key="type">AST</data></edge><edge id="797" source="435" target="436" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="799" source="436" target="437" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="801" source="437" target="438" label="AST"><data key="type">AST</data></edge><edge id="806" source="437" target="439" label="AST"><data key="type">AST</data></edge><edge id="807" source="437" target="425" label="LAST_FIELD_LEX"><data key="type">LAST_FIELD_LEX</data></edge><edge id="802" source="438" target="397" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="803" source="438" target="409" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="805" source="438" target="426" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="804" source="438" target="439" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="810" source="440" target="441" label="AST"><data key="type">AST</data></edge><edge id="817" source="440" target="442" label="AST"><data key="type">AST</data></edge><edge id="809" source="440" target="443" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="811" source="441" target="432" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="812" source="441" target="444" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="816" source="441" target="432" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="814" source="441" target="432" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="815" source="441" target="444" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="813" source="441" target="442" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="818" source="442" target="436" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="821" source="442" target="436" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="819" source="442" target="436" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="820" source="442" target="442" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="824" source="443" target="444" label="AST"><data key="type">AST</data></edge><edge id="823" source="443" target="445" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="825" source="444" target="449" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="827" source="444" target="441" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="826" source="444" target="449" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="829" source="445" target="446" label="AST"><data key="type">AST</data></edge><edge id="830" source="446" target="447" label="AST"><data key="type">AST</data></edge><edge id="846" source="446" target="450" label="AST"><data key="type">AST</data></edge><edge id="841" source="447" target="449" label="AST"><data key="type">AST</data></edge><edge id="832" source="447" target="448" label="AST"><data key="type">AST</data></edge><edge id="831" source="447" target="450" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="833" source="448" target="420" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="834" source="448" target="448" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="840" source="448" target="420" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="838" source="448" target="452" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="839" source="448" target="453" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="836" source="448" target="420" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="837" source="448" target="448" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="835" source="448" target="449" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="842" source="449" target="432" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="843" source="449" target="444" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="845" source="449" target="444" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="844" source="449" target="453" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="860" source="450" target="454" label="AST"><data key="type">AST</data></edge><edge id="847" source="450" target="451" label="AST"><data key="type">AST</data></edge><edge id="856" source="451" target="453" label="AST"><data key="type">AST</data></edge><edge id="849" source="451" target="452" label="AST"><data key="type">AST</data></edge><edge id="848" source="451" target="454" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="850" source="452" target="397" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="851" source="452" target="409" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="855" source="452" target="409" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="853" source="452" target="438" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="854" source="452" target="452" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="852" source="452" target="453" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="857" source="453" target="432" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="859" source="453" target="449" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="858" source="453" target="441" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="862" source="455" target="456" label="AST"><data key="type">AST</data></edge><edge id="1048" source="455" target="542" label="AST"><data key="type">AST</data></edge><edge id="1032" source="455" target="531" label="AST"><data key="type">AST</data></edge><edge id="894" source="456" target="469" label="AST"><data key="type">AST</data></edge><edge id="864" source="456" target="457" label="AST"><data key="type">AST</data></edge><edge id="1011" source="456" target="525" label="AST"><data key="type">AST</data></edge><edge id="863" source="456" target="531" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="866" source="457" target="458" label="AST"><data key="type">AST</data></edge><edge id="865" source="457" target="469" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="870" source="458" target="461" label="AST"><data key="type">AST</data></edge><edge id="872" source="458" target="462" label="AST"><data key="type">AST</data></edge><edge id="867" source="458" target="459" label="AST"><data key="type">AST</data></edge><edge id="869" source="459" target="460" label="AST"><data key="type">AST</data></edge><edge id="868" source="459" target="461" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="871" source="461" target="462" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="883" source="462" target="467" label="AST"><data key="type">AST</data></edge><edge id="873" source="462" target="463" label="AST"><data key="type">AST</data></edge><edge id="875" source="462" target="464" label="AST"><data key="type">AST</data></edge><edge id="888" source="462" target="468" label="AST"><data key="type">AST</data></edge><edge id="874" source="463" target="464" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="882" source="464" target="466" label="AST"><data key="type">AST</data></edge><edge id="877" source="464" target="465" label="AST"><data key="type">AST</data></edge><edge id="876" source="464" target="467" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="878" source="465" target="388" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="881" source="465" target="388" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="880" source="465" target="388" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="879" source="465" target="466" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="884" source="467" target="392" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="887" source="467" target="392" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="886" source="467" target="392" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="885" source="467" target="468" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="889" source="468" target="420" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="890" source="468" target="448" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="893" source="468" target="448" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="891" source="468" target="420" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="892" source="468" target="448" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="896" source="469" target="470" label="AST"><data key="type">AST</data></edge><edge id="904" source="469" target="473" label="AST"><data key="type">AST</data></edge><edge id="895" source="469" target="525" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="898" source="470" target="471" label="AST"><data key="type">AST</data></edge><edge id="903" source="470" target="472" label="AST"><data key="type">AST</data></edge><edge id="897" source="470" target="473" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="899" source="471" target="461" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="902" source="471" target="461" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="901" source="471" target="461" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="900" source="471" target="472" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="980" source="473" target="510" label="AST"><data key="type">AST</data></edge><edge id="999" source="473" target="518" label="AST"><data key="type">AST</data></edge><edge id="905" source="473" target="474" label="AST"><data key="type">AST</data></edge><edge id="916" source="473" target="482" label="AST"><data key="type">AST</data></edge><edge id="939" source="473" target="492" label="AST"><data key="type">AST</data></edge><edge id="907" source="474" target="475" label="AST"><data key="type">AST</data></edge><edge id="906" source="474" target="482" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="908" source="475" target="476" label="AST"><data key="type">AST</data></edge><edge id="911" source="475" target="478" label="AST"><data key="type">AST</data></edge><edge id="913" source="475" target="479" label="AST"><data key="type">AST</data></edge><edge id="910" source="476" target="477" label="AST"><data key="type">AST</data></edge><edge id="909" source="476" target="478" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="912" source="478" target="479" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="914" source="479" target="480" label="AST"><data key="type">AST</data></edge><edge id="915" source="480" target="481" label="AST"><data key="type">AST</data></edge><edge id="918" source="482" target="483" label="AST"><data key="type">AST</data></edge><edge id="936" source="482" target="490" label="AST"><data key="type">AST</data></edge><edge id="938" source="482" target="491" label="AST"><data key="type">AST</data></edge><edge id="917" source="482" target="492" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="930" source="483" target="488" label="AST"><data key="type">AST</data></edge><edge id="920" source="483" target="484" label="AST"><data key="type">AST</data></edge><edge id="932" source="483" target="489" label="AST"><data key="type">AST</data></edge><edge id="919" source="483" target="490" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="929" source="484" target="487" label="AST"><data key="type">AST</data></edge><edge id="922" source="484" target="485" label="AST"><data key="type">AST</data></edge><edge id="927" source="484" target="486" label="AST"><data key="type">AST</data></edge><edge id="921" source="484" target="488" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="923" source="485" target="478" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="926" source="485" target="478" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="925" source="485" target="478" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="924" source="485" target="486" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="928" source="486" target="487" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="931" source="488" target="489" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="933" source="489" target="392" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="935" source="489" target="467" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="934" source="489" target="467" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="937" source="490" target="491" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="941" source="492" target="493" label="AST"><data key="type">AST</data></edge><edge id="954" source="492" target="499" label="AST"><data key="type">AST</data></edge><edge id="948" source="492" target="498" label="AST"><data key="type">AST</data></edge><edge id="940" source="492" target="510" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="943" source="493" target="494" label="AST"><data key="type">AST</data></edge><edge id="942" source="493" target="498" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="944" source="494" target="495" label="AST"><data key="type">AST</data></edge><edge id="947" source="494" target="497" label="AST"><data key="type">AST</data></edge><edge id="946" source="495" target="496" label="AST"><data key="type">AST</data></edge><edge id="945" source="495" target="497" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="950" source="498" target="448" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="949" source="498" target="420" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="953" source="498" target="468" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="952" source="498" target="468" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="951" source="498" target="499" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="971" source="499" target="506" label="AST"><data key="type">AST</data></edge><edge id="955" source="499" target="500" label="AST"><data key="type">AST</data></edge><edge id="3396" source="1701" target="1703" label="AST"><data key="type">AST</data></edge><edge id="3394" source="1701" target="1702" label="AST"><data key="type">AST</data></edge><edge id="3404" source="1709" target="1710" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3405" source="1708" target="1710" label="AST"><data key="type">AST</data></edge><edge id="3403" source="1708" target="1709" label="AST"><data key="type">AST</data></edge><edge id="3408" source="1708" target="1712" label="AST"><data key="type">AST</data></edge><edge id="3402" source="1708" target="1716" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3413" source="1707" target="1716" label="AST"><data key="type">AST</data></edge><edge id="3401" source="1707" target="1708" label="AST"><data key="type">AST</data></edge><edge id="3400" source="1706" target="1707" label="AST"><data key="type">AST</data></edge><edge id="3422" source="1706" target="1685" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="3399" source="1705" target="1706" label="AST"><data key="type">AST</data></edge><edge id="3397" source="1703" target="1704" label="AST"><data key="type">AST</data></edge><edge id="3395" source="1702" target="1703" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3411" source="1712" target="1714" label="AST"><data key="type">AST</data></edge><edge id="3409" source="1712" target="1713" label="AST"><data key="type">AST</data></edge><edge id="3407" source="1710" target="1711" label="AST"><data key="type">AST</data></edge><edge id="3406" source="1710" target="1712" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3417" source="1718" target="1694" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3420" source="1718" target="1694" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3419" source="1718" target="1694" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3418" source="1718" target="1719" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3415" source="1717" target="1718" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3416" source="1716" target="1718" label="AST"><data key="type">AST</data></edge><edge id="3414" source="1716" target="1717" label="AST"><data key="type">AST</data></edge><edge id="3421" source="1716" target="1719" label="AST"><data key="type">AST</data></edge><edge id="3412" source="1714" target="1715" label="AST"><data key="type">AST</data></edge><edge id="3410" source="1713" target="1714" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3430" source="1723" target="1724" label="AST"><data key="type">AST</data></edge><edge id="3429" source="1723" target="1725" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3428" source="1722" target="1723" label="AST"><data key="type">AST</data></edge><edge id="3431" source="1722" target="1725" label="AST"><data key="type">AST</data></edge><edge id="3427" source="1722" target="1726" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3425" source="1721" target="1722" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3438" source="1720" target="1730" label="AST"><data key="type">AST</data></edge><edge id="3449" source="1720" target="1737" label="AST"><data key="type">AST</data></edge><edge id="3426" source="1720" target="1722" label="AST"><data key="type">AST</data></edge><edge id="3424" source="1720" target="1721" label="AST"><data key="type">AST</data></edge><edge id="3432" source="1720" target="1726" label="AST"><data key="type">AST</data></edge><edge id="3441" source="1720" target="1732" label="AST"><data key="type">AST</data></edge><edge id="3436" source="1727" target="1728" label="AST"><data key="type">AST</data></edge><edge id="3435" source="1727" target="1729" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3437" source="1726" target="1729" label="AST"><data key="type">AST</data></edge><edge id="3434" source="1726" target="1727" label="AST"><data key="type">AST</data></edge><edge id="3433" source="1726" target="1730" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3447" source="1734" target="1735" label="AST"><data key="type">AST</data></edge><edge id="3446" source="1734" target="1736" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3444" source="1733" target="1734" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3448" source="1732" target="1736" label="AST"><data key="type">AST</data></edge><edge id="3445" source="1732" target="1734" label="AST"><data key="type">AST</data></edge><edge id="3443" source="1732" target="1733" label="AST"><data key="type">AST</data></edge><edge id="3442" source="1732" target="1737" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3440" source="1730" target="1731" label="AST"><data key="type">AST</data></edge><edge id="3439" source="1730" target="1732" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3453" source="1739" target="1740" label="AST"><data key="type">AST</data></edge><edge id="3462" source="1739" target="1746" label="AST"><data key="type">AST</data></edge><edge id="3452" source="1738" target="1739" label="AST"><data key="type">AST</data></edge><edge id="3451" source="1738" target="1747" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3709" source="1737" target="1862" label="AST"><data key="type">AST</data></edge><edge id="3477" source="1737" target="1754" label="AST"><data key="type">AST</data></edge><edge id="3463" source="1737" target="1747" label="AST"><data key="type">AST</data></edge><edge id="3450" source="1737" target="1738" label="AST"><data key="type">AST</data></edge><edge id="3492" source="1737" target="1762" label="AST"><data key="type">AST</data></edge><edge id="3461" source="1744" target="1745" label="AST"><data key="type">AST</data></edge><edge id="3459" source="1742" target="1743" label="AST"><data key="type">AST</data></edge><edge id="3458" source="1742" target="1744" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3456" source="1741" target="1742" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3457" source="1740" target="1742" label="AST"><data key="type">AST</data></edge><edge id="3455" source="1740" target="1741" label="AST"><data key="type">AST</data></edge><edge id="3460" source="1740" target="1744" label="AST"><data key="type">AST</data></edge><edge id="3454" source="1740" target="1746" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3468" source="1749" target="1725" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3471" source="1749" target="1725" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3470" source="1749" target="1725" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3469" source="1749" target="1750" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3467" source="1748" target="1749" label="AST"><data key="type">AST</data></edge><edge id="3472" source="1748" target="1750" label="AST"><data key="type">AST</data></edge><edge id="3466" source="1748" target="1751" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3465" source="1747" target="1748" label="AST"><data key="type">AST</data></edge><edge id="3473" source="1747" target="1751" label="AST"><data key="type">AST</data></edge><edge id="3464" source="1747" target="1754" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3482" source="1756" target="1757" label="AST"><data key="type">AST</data></edge><edge id="3481" source="1756" target="1758" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3485" source="1755" target="1759" label="AST"><data key="type">AST</data></edge><edge id="3483" source="1755" target="1758" label="AST"><data key="type">AST</data></edge><edge id="3480" source="1755" target="1756" label="AST"><data key="type">AST</data></edge><edge id="3479" source="1754" target="1755" label="AST"><data key="type">AST</data></edge><edge id="3478" source="1754" target="1762" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3475" source="1752" target="1753" label="AST"><data key="type">AST</data></edge><edge id="3476" source="1752" target="1720" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="3474" source="1751" target="1752" label="AST"><data key="type">AST</data></edge><edge id="3486" source="1759" target="1760" label="AST"><data key="type">AST</data></edge><edge id="3491" source="1759" target="1761" label="AST"><data key="type">AST</data></edge><edge id="3484" source="1758" target="1759" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3509" source="1770" target="1771" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3505" source="1767" target="1768" label="AST"><data key="type">AST</data></edge><edge id="3504" source="1767" target="1784" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3503" source="1766" target="1767" label="AST"><data key="type">AST</data></edge><edge id="3532" source="1766" target="1784" label="AST"><data key="type">AST</data></edge><edge id="3497" source="1764" target="1758" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3500" source="1764" target="1758" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3499" source="1764" target="1758" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3498" source="1764" target="1765" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3501" source="1763" target="1765" label="AST"><data key="type">AST</data></edge><edge id="3496" source="1763" target="1764" label="AST"><data key="type">AST</data></edge><edge id="3495" source="1763" target="1766" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3502" source="1762" target="1766" label="AST"><data key="type">AST</data></edge><edge id="3494" source="1762" target="1763" label="AST"><data key="type">AST</data></edge><edge id="3493" source="1762" target="1862" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3487" source="1760" target="1725" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3490" source="1760" target="1749" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3489" source="1760" target="1749" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3488" source="1760" target="1761" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3513" source="1769" target="1773" label="AST"><data key="type">AST</data></edge><edge id="3510" source="1769" target="1771" label="AST"><data key="type">AST</data></edge><edge id="3508" source="1769" target="1770" label="AST"><data key="type">AST</data></edge><edge id="3507" source="1769" target="1779" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3523" source="1768" target="1780" label="AST"><data key="type">AST</data></edge><edge id="3521" source="1768" target="1779" label="AST"><data key="type">AST</data></edge><edge id="3506" source="1768" target="1769" label="AST"><data key="type">AST</data></edge><edge id="3525" source="1781" target="1782" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3526" source="1780" target="1782" label="AST"><data key="type">AST</data></edge><edge id="3524" source="1780" target="1781" label="AST"><data key="type">AST</data></edge><edge id="3528" source="1780" target="1783" label="AST"><data key="type">AST</data></edge><edge id="3520" source="1777" target="1778" label="AST"><data key="type">AST</data></edge><edge id="3518" source="1775" target="1776" label="AST"><data key="type">AST</data></edge><edge id="3517" source="1775" target="1777" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3515" source="1774" target="1775" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3516" source="1773" target="1775" label="AST"><data key="type">AST</data></edge><edge id="3514" source="1773" target="1774" label="AST"><data key="type">AST</data></edge><edge id="3519" source="1773" target="1777" label="AST"><data key="type">AST</data></edge><edge id="3512" source="1771" target="1772" label="AST"><data key="type">AST</data></edge><edge id="3511" source="1771" target="1773" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3522" source="1779" target="1780" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3557" source="1792" target="1796" label="AST"><data key="type">AST</data></edge><edge id="3554" source="1792" target="1794" label="AST"><data key="type">AST</data></edge><edge id="3552" source="1792" target="1793" label="AST"><data key="type">AST</data></edge><edge id="3551" source="1791" target="1792" label="AST"><data key="type">AST</data></edge><edge id="3546" source="1790" target="1779" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3549" source="1790" target="1786" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3548" source="1790" target="1786" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3547" source="1790" target="1791" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3545" source="1789" target="1790" label="AST"><data key="type">AST</data></edge><edge id="3550" source="1789" target="1791" label="AST"><data key="type">AST</data></edge><edge id="3544" source="1789" target="1802" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2565" source="1304" target="1305" label="AST"><data key="type">AST</data></edge><edge id="2564" source="1304" target="1306" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3599" source="1788" target="1816" label="AST"><data key="type">AST</data></edge><edge id="3543" source="1788" target="1789" label="AST"><data key="type">AST</data></edge><edge id="3565" source="1788" target="1802" label="AST"><data key="type">AST</data></edge><edge id="3581" source="1788" target="1811" label="AST"><data key="type">AST</data></edge><edge id="3542" source="1788" target="1821" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2566" source="1303" target="1306" label="AST"><data key="type">AST</data></edge><edge id="2563" source="1303" target="1304" label="AST"><data key="type">AST</data></edge><edge id="2562" source="1303" target="1307" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2567" source="1302" target="1307" label="AST"><data key="type">AST</data></edge><edge id="2561" source="1302" target="1303" label="AST"><data key="type">AST</data></edge><edge id="2560" source="1302" target="1322" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3536" source="1786" target="1779" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3539" source="1786" target="1779" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3538" source="1786" target="1779" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3537" source="1786" target="1787" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3535" source="1785" target="1786" label="AST"><data key="type">AST</data></edge><edge id="3540" source="1785" target="1787" label="AST"><data key="type">AST</data></edge><edge id="3534" source="1785" target="1788" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2557" source="1300" target="1301" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3613" source="1784" target="1821" label="AST"><data key="type">AST</data></edge><edge id="3533" source="1784" target="1785" label="AST"><data key="type">AST</data></edge><edge id="3541" source="1784" target="1788" label="AST"><data key="type">AST</data></edge><edge id="3529" source="1783" target="1758" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3531" source="1783" target="1764" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3530" source="1783" target="1764" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3527" source="1782" target="1783" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2596" source="1309" target="1321" label="AST"><data key="type">AST</data></edge><edge id="2573" source="1309" target="1312" label="AST"><data key="type">AST</data></edge><edge id="2570" source="1309" target="1310" label="AST"><data key="type">AST</data></edge><edge id="2569" source="1308" target="1309" label="AST"><data key="type">AST</data></edge><edge id="2568" source="1307" target="1308" label="AST"><data key="type">AST</data></edge><edge id="2582" source="1316" target="1317" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2583" source="1315" target="1317" label="AST"><data key="type">AST</data></edge><edge id="2581" source="1315" target="1316" label="AST"><data key="type">AST</data></edge><edge id="2580" source="1315" target="1318" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2579" source="1314" target="1315" label="AST"><data key="type">AST</data></edge><edge id="2589" source="1314" target="1318" label="AST"><data key="type">AST</data></edge><edge id="2578" source="1314" target="1319" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3562" source="1798" target="1799" label="AST"><data key="type">AST</data></edge><edge id="3561" source="1798" target="1800" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2577" source="1313" target="1314" label="AST"><data key="type">AST</data></edge><edge id="2590" source="1313" target="1319" label="AST"><data key="type">AST</data></edge><edge id="2576" source="1313" target="1320" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3559" source="1797" target="1798" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2575" source="1312" target="1313" label="AST"><data key="type">AST</data></edge><edge id="2595" source="1312" target="1320" label="AST"><data key="type">AST</data></edge><edge id="2574" source="1312" target="1321" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3558" source="1796" target="1797" label="AST"><data key="type">AST</data></edge><edge id="3563" source="1796" target="1800" label="AST"><data key="type">AST</data></edge><edge id="3560" source="1796" target="1798" label="AST"><data key="type">AST</data></edge><edge id="2572" source="1310" target="1311" label="AST"><data key="type">AST</data></edge><edge id="2571" source="1310" target="1312" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3556" source="1794" target="1795" label="AST"><data key="type">AST</data></edge><edge id="3555" source="1794" target="1796" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3553" source="1793" target="1794" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2591" source="1319" target="1251" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2594" source="1319" target="1281" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2593" source="1319" target="1281" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2592" source="1319" target="1269" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2584" source="1317" target="1187" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2588" source="1317" target="1282" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2587" source="1317" target="1282" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2586" source="1317" target="1243" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2585" source="1317" target="1234" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2610" source="1330" target="1331" label="AST"><data key="type">AST</data></edge><edge id="2609" source="1330" target="1332" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2606" source="1327" target="1328" label="AST"><data key="type">AST</data></edge><edge id="2603" source="1324" target="1325" label="AST"><data key="type">AST</data></edge><edge id="2602" source="1324" target="1326" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2601" source="1323" target="1324" label="AST"><data key="type">AST</data></edge><edge id="2604" source="1323" target="1326" label="AST"><data key="type">AST</data></edge><edge id="2600" source="1323" target="1327" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2599" source="1322" target="1323" label="AST"><data key="type">AST</data></edge><edge id="2605" source="1322" target="1327" label="AST"><data key="type">AST</data></edge><edge id="2597" source="1321" target="1306" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1726" source="900" target="852" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1725" source="900" target="824" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1729" source="900" target="870" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1728" source="900" target="870" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1727" source="900" target="901" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1731" source="901" target="902" label="AST"><data key="type">AST</data></edge><edge id="1747" source="901" target="908" label="AST"><data key="type">AST</data></edge><edge id="1733" source="902" target="903" label="AST"><data key="type">AST</data></edge><edge id="1740" source="902" target="905" label="AST"><data key="type">AST</data></edge><edge id="1738" source="902" target="904" label="AST"><data key="type">AST</data></edge><edge id="1732" source="902" target="908" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1734" source="903" target="880" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1737" source="903" target="887" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1736" source="903" target="887" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1735" source="903" target="904" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1739" source="904" target="905" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1741" source="905" target="906" label="AST"><data key="type">AST</data></edge><edge id="1746" source="905" target="907" label="AST"><data key="type">AST</data></edge><edge id="2611" source="1329" target="1332" label="AST"><data key="type">AST</data></edge><edge id="2631" source="1329" target="1341" label="AST"><data key="type">AST</data></edge><edge id="2608" source="1329" target="1330" label="AST"><data key="type">AST</data></edge><edge id="1742" source="906" target="899" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1745" source="906" target="899" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1744" source="906" target="899" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1743" source="906" target="907" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2607" source="1328" target="1329" label="AST"><data key="type">AST</data></edge><edge id="1755" source="908" target="911" label="AST"><data key="type">AST</data></edge><edge id="1753" source="908" target="910" label="AST"><data key="type">AST</data></edge><edge id="1748" source="908" target="909" label="AST"><data key="type">AST</data></edge><edge id="1749" source="909" target="880" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1752" source="909" target="903" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1751" source="909" target="903" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1750" source="909" target="910" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2632" source="1341" target="1326" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2622" source="1337" target="1187" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2624" source="1337" target="1317" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2623" source="1337" target="1317" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2620" source="1336" target="1337" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2621" source="1335" target="1337" label="AST"><data key="type">AST</data></edge><edge id="2619" source="1335" target="1336" label="AST"><data key="type">AST</data></edge><edge id="2618" source="1335" target="1338" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2625" source="1334" target="1338" label="AST"><data key="type">AST</data></edge><edge id="2617" source="1334" target="1335" label="AST"><data key="type">AST</data></edge><edge id="2616" source="1334" target="1339" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2615" source="1333" target="1334" label="AST"><data key="type">AST</data></edge><edge id="2626" source="1333" target="1339" label="AST"><data key="type">AST</data></edge><edge id="2614" source="1333" target="1340" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2613" source="1332" target="1333" label="AST"><data key="type">AST</data></edge><edge id="2630" source="1332" target="1340" label="AST"><data key="type">AST</data></edge><edge id="2612" source="1332" target="1341" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1754" source="910" target="911" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1765" source="912" target="915" label="AST"><data key="type">AST</data></edge><edge id="1763" source="912" target="914" label="AST"><data key="type">AST</data></edge><edge id="1758" source="912" target="913" label="AST"><data key="type">AST</data></edge><edge id="1757" source="912" target="920" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1759" source="913" target="880" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1762" source="913" target="909" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1761" source="913" target="909" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1760" source="913" target="914" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1764" source="914" target="915" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1766" source="915" target="916" label="AST"><data key="type">AST</data></edge><edge id="1774" source="915" target="919" label="AST"><data key="type">AST</data></edge><edge id="1773" source="916" target="918" label="AST"><data key="type">AST</data></edge><edge id="1768" source="916" target="917" label="AST"><data key="type">AST</data></edge><edge id="1767" source="916" target="919" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1769" source="917" target="880" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1772" source="917" target="913" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1771" source="917" target="913" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1770" source="917" target="918" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2627" source="1339" target="1251" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2629" source="1339" target="1319" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2628" source="1339" target="1319" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2663" source="1352" target="1278" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2662" source="1352" target="1266" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2666" source="1352" target="1344" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2665" source="1352" target="1344" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2664" source="1352" target="1353" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2669" source="1351" target="1354" label="AST"><data key="type">AST</data></edge><edge id="2667" source="1351" target="1353" label="AST"><data key="type">AST</data></edge><edge id="2675" source="1351" target="1355" label="AST"><data key="type">AST</data></edge><edge id="2661" source="1351" target="1352" label="AST"><data key="type">AST</data></edge><edge id="2653" source="1350" target="1292" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2652" source="1350" target="1197" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2659" source="1350" target="1292" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2658" source="1350" target="1354" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="2657" source="1350" target="1352" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="2656" source="1350" target="1292" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2655" source="1350" target="1197" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2654" source="1350" target="1351" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2651" source="1349" target="1350" label="AST"><data key="type">AST</data></edge><edge id="2660" source="1349" target="1351" label="AST"><data key="type">AST</data></edge><edge id="2650" source="1348" target="1349" label="AST"><data key="type">AST</data></edge><edge id="2649" source="1348" target="1360" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2723" source="1347" target="1380" label="AST"><data key="type">AST</data></edge><edge id="2682" source="1347" target="1360" label="AST"><data key="type">AST</data></edge><edge id="2648" source="1347" target="1348" label="AST"><data key="type">AST</data></edge><edge id="2647" source="1346" target="1347" label="AST"><data key="type">AST</data></edge><edge id="2646" source="1346" target="1400" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2639" source="1344" target="1278" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2638" source="1344" target="1266" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2643" source="1344" target="1294" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2642" source="1344" target="1294" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2641" source="1344" target="1286" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2640" source="1344" target="1345" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2644" source="1343" target="1345" label="AST"><data key="type">AST</data></edge><edge id="2637" source="1343" target="1344" label="AST"><data key="type">AST</data></edge><edge id="2636" source="1343" target="1346" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1776" source="920" target="921" label="AST"><data key="type">AST</data></edge><edge id="2635" source="1342" target="1343" label="AST"><data key="type">AST</data></edge><edge id="2645" source="1342" target="1346" label="AST"><data key="type">AST</data></edge><edge id="2758" source="1342" target="1400" label="AST"><data key="type">AST</data></edge><edge id="2634" source="1342" target="1434" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1777" source="921" target="922" label="AST"><data key="type">AST</data></edge><edge id="1780" source="921" target="924" label="AST"><data key="type">AST</data></edge><edge id="1779" source="922" target="923" label="AST"><data key="type">AST</data></edge><edge id="1778" source="922" target="924" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1786" source="924" target="926" label="AST"><data key="type">AST</data></edge><edge id="1781" source="924" target="925" label="AST"><data key="type">AST</data></edge><edge id="1782" source="925" target="880" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1785" source="925" target="917" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1784" source="925" target="917" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1783" source="925" target="926" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1788" source="927" target="928" label="AST"><data key="type">AST</data></edge><edge id="1804" source="927" target="783" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="1789" source="928" target="929" label="AST"><data key="type">AST</data></edge><edge id="1798" source="928" target="932" label="AST"><data key="type">AST</data></edge><edge id="1796" source="928" target="931" label="AST"><data key="type">AST</data></edge><edge id="1794" source="928" target="930" label="AST"><data key="type">AST</data></edge><edge id="1790" source="929" target="865" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1793" source="929" target="873" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1792" source="929" target="873" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1791" source="929" target="930" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2688" source="1362" target="1363" label="AST"><data key="type">AST</data></edge><edge id="2687" source="1362" target="1364" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2689" source="1361" target="1364" label="AST"><data key="type">AST</data></edge><edge id="2686" source="1361" target="1362" label="AST"><data key="type">AST</data></edge><edge id="2685" source="1361" target="1365" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2684" source="1360" target="1361" label="AST"><data key="type">AST</data></edge><edge id="2690" source="1360" target="1365" label="AST"><data key="type">AST</data></edge><edge id="2683" source="1360" target="1380" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2680" source="1358" target="1359" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2678" source="1356" target="1357" label="AST"><data key="type">AST</data></edge><edge id="2677" source="1356" target="1358" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2679" source="1355" target="1358" label="AST"><data key="type">AST</data></edge><edge id="2676" source="1355" target="1356" label="AST"><data key="type">AST</data></edge><edge id="2681" source="1355" target="1359" label="AST"><data key="type">AST</data></edge><edge id="1795" source="930" target="931" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2670" source="1354" target="1183" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2674" source="1354" target="1296" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2673" source="1354" target="1296" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2672" source="1354" target="1253" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2671" source="1354" target="1355" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1797" source="931" target="932" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2668" source="1353" target="1354" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1800" source="932" target="813" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1799" source="932" target="801" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1803" source="932" target="856" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1802" source="932" target="856" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1801" source="932" target="842" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1807" source="933" target="934" label="AST"><data key="type">AST</data></edge><edge id="1813" source="933" target="938" label="AST"><data key="type">AST</data></edge><edge id="1806" source="933" target="944" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1809" source="934" target="935" label="AST"><data key="type">AST</data></edge><edge id="1812" source="934" target="937" label="AST"><data key="type">AST</data></edge><edge id="1808" source="934" target="938" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1811" source="935" target="936" label="AST"><data key="type">AST</data></edge><edge id="1810" source="935" target="937" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1814" source="938" target="939" label="AST"><data key="type">AST</data></edge><edge id="1815" source="939" target="940" label="AST"><data key="type">AST</data></edge><edge id="2705" source="1374" target="1375" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2706" source="1373" target="1375" label="AST"><data key="type">AST</data></edge><edge id="2704" source="1373" target="1374" label="AST"><data key="type">AST</data></edge><edge id="2703" source="1373" target="1376" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2702" source="1372" target="1373" label="AST"><data key="type">AST</data></edge><edge id="2713" source="1372" target="1376" label="AST"><data key="type">AST</data></edge><edge id="2701" source="1372" target="1377" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2700" source="1371" target="1372" label="AST"><data key="type">AST</data></edge><edge id="2714" source="1371" target="1377" label="AST"><data key="type">AST</data></edge><edge id="2699" source="1371" target="1378" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2698" source="1370" target="1371" label="AST"><data key="type">AST</data></edge><edge id="2720" source="1370" target="1378" label="AST"><data key="type">AST</data></edge><edge id="2697" source="1370" target="1379" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2695" source="1368" target="1369" label="AST"><data key="type">AST</data></edge><edge id="2694" source="1368" target="1370" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2721" source="1367" target="1379" label="AST"><data key="type">AST</data></edge><edge id="2696" source="1367" target="1370" label="AST"><data key="type">AST</data></edge><edge id="2693" source="1367" target="1368" label="AST"><data key="type">AST</data></edge><edge id="1819" source="940" target="943" label="AST"><data key="type">AST</data></edge><edge id="1816" source="940" target="941" label="AST"><data key="type">AST</data></edge><edge id="2692" source="1366" target="1367" label="AST"><data key="type">AST</data></edge><edge id="1818" source="941" target="942" label="AST"><data key="type">AST</data></edge><edge id="1817" source="941" target="943" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2691" source="1365" target="1366" label="AST"><data key="type">AST</data></edge><edge id="1820" source="943" target="937" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1822" source="944" target="945" label="AST"><data key="type">AST</data></edge><edge id="1828" source="944" target="949" label="AST"><data key="type">AST</data></edge><edge id="1827" source="945" target="948" label="AST"><data key="type">AST</data></edge><edge id="1824" source="945" target="946" label="AST"><data key="type">AST</data></edge><edge id="1823" source="945" target="949" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1826" source="946" target="947" label="AST"><data key="type">AST</data></edge><edge id="1825" source="946" target="948" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1829" source="949" target="950" label="AST"><data key="type">AST</data></edge><edge id="2731" source="1385" target="1386" label="AST"><data key="type">AST</data></edge><edge id="2728" source="1382" target="1383" label="AST"><data key="type">AST</data></edge><edge id="2727" source="1382" target="1384" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2729" source="1381" target="1384" label="AST"><data key="type">AST</data></edge><edge id="2726" source="1381" target="1382" label="AST"><data key="type">AST</data></edge><edge id="2725" source="1381" target="1385" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2724" source="1380" target="1381" label="AST"><data key="type">AST</data></edge><edge id="2730" source="1380" target="1385" label="AST"><data key="type">AST</data></edge><edge id="2722" source="1379" target="1364" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1830" source="950" target="951" label="AST"><data key="type">AST</data></edge><edge id="1831" source="951" target="952" label="AST"><data key="type">AST</data></edge><edge id="1834" source="951" target="954" label="AST"><data key="type">AST</data></edge><edge id="2715" source="1377" target="1251" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2719" source="1377" target="1339" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2718" source="1377" target="1339" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2717" source="1377" target="1281" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2716" source="1377" target="1269" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1833" source="952" target="953" label="AST"><data key="type">AST</data></edge><edge id="1832" source="952" target="954" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2707" source="1375" target="1187" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2712" source="1375" target="1337" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2711" source="1375" target="1337" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2710" source="1375" target="1282" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2709" source="1375" target="1243" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2708" source="1375" target="1234" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1835" source="954" target="948" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1843" source="955" target="959" label="AST"><data key="type">AST</data></edge><edge id="1841" source="955" target="958" label="AST"><data key="type">AST</data></edge><edge id="1852" source="955" target="965" label="AST"><data key="type">AST</data></edge><edge id="1862" source="955" target="972" label="AST"><data key="type">AST</data></edge><edge id="1838" source="955" target="956" label="AST"><data key="type">AST</data></edge><edge id="1859" source="955" target="970" label="AST"><data key="type">AST</data></edge><edge id="1868" source="955" target="976" label="AST"><data key="type">AST</data></edge><edge id="1837" source="955" target="1178" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1840" source="956" target="957" label="AST"><data key="type">AST</data></edge><edge id="1839" source="956" target="958" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1842" source="958" target="959" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1851" source="959" target="964" label="AST"><data key="type">AST</data></edge><edge id="1845" source="959" target="960" label="AST"><data key="type">AST</data></edge><edge id="1844" source="959" target="965" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2747" source="1395" target="1187" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2749" source="1395" target="1375" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2748" source="1395" target="1375" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2745" source="1394" target="1395" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2746" source="1393" target="1395" label="AST"><data key="type">AST</data></edge><edge id="2744" source="1393" target="1394" label="AST"><data key="type">AST</data></edge><edge id="2743" source="1393" target="1396" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2742" source="1392" target="1393" label="AST"><data key="type">AST</data></edge><edge id="2750" source="1392" target="1396" label="AST"><data key="type">AST</data></edge><edge id="2741" source="1392" target="1397" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2740" source="1391" target="1392" label="AST"><data key="type">AST</data></edge><edge id="2751" source="1391" target="1397" label="AST"><data key="type">AST</data></edge><edge id="2739" source="1391" target="1398" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2755" source="1390" target="1398" label="AST"><data key="type">AST</data></edge><edge id="2738" source="1390" target="1391" label="AST"><data key="type">AST</data></edge><edge id="2737" source="1390" target="1399" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1849" source="960" target="962" label="AST"><data key="type">AST</data></edge><edge id="1847" source="960" target="961" label="AST"><data key="type">AST</data></edge><edge id="1846" source="960" target="964" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1848" source="961" target="962" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1850" source="962" target="963" label="AST"><data key="type">AST</data></edge><edge id="2735" source="1388" target="1389" label="AST"><data key="type">AST</data></edge><edge id="2734" source="1388" target="1390" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2756" source="1387" target="1399" label="AST"><data key="type">AST</data></edge><edge id="2733" source="1387" target="1388" label="AST"><data key="type">AST</data></edge><edge id="2736" source="1387" target="1390" label="AST"><data key="type">AST</data></edge><edge id="2732" source="1386" target="1387" label="AST"><data key="type">AST</data></edge><edge id="1854" source="965" target="966" label="AST"><data key="type">AST</data></edge><edge id="1858" source="965" target="969" label="AST"><data key="type">AST</data></edge><edge id="1853" source="965" target="970" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1856" source="966" target="967" label="AST"><data key="type">AST</data></edge><edge id="1855" source="966" target="969" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1857" source="967" target="968" label="AST"><data key="type">AST</data></edge><edge id="1861" source="970" target="971" label="AST"><data key="type">AST</data></edge><edge id="1860" source="970" target="972" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1866" source="972" target="974" label="AST"><data key="type">AST</data></edge><edge id="1864" source="972" target="973" label="AST"><data key="type">AST</data></edge><edge id="1863" source="972" target="976" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1865" source="973" target="974" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2757" source="1399" target="1384" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1867" source="974" target="975" label="AST"><data key="type">AST</data></edge><edge id="2752" source="1397" target="1251" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2754" source="1397" target="1377" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2753" source="1397" target="1377" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1987" source="976" target="1037" label="AST"><data key="type">AST</data></edge><edge id="1998" source="976" target="1041" label="AST"><data key="type">AST</data></edge><edge id="2008" source="976" target="1048" label="AST"><data key="type">AST</data></edge><edge id="2258" source="976" target="1160" label="AST"><data key="type">AST</data></edge><edge id="1893" source="976" target="991" label="AST"><data key="type">AST</data></edge><edge id="2023" source="976" target="1056" label="AST"><data key="type">AST</data></edge><edge id="1906" source="976" target="1000" label="AST"><data key="type">AST</data></edge><edge id="1916" source="976" target="1004" label="AST"><data key="type">AST</data></edge><edge id="2294" source="976" target="1176" label="AST"><data key="type">AST</data></edge><edge id="1869" source="976" target="977" label="AST"><data key="type">AST</data></edge><edge id="1956" source="976" target="1022" label="AST"><data key="type">AST</data></edge><edge id="1871" source="977" target="978" label="AST"><data key="type">AST</data></edge><edge id="1870" source="977" target="991" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1886" source="978" target="988" label="AST"><data key="type">AST</data></edge><edge id="1884" source="978" target="987" label="AST"><data key="type">AST</data></edge><edge id="1872" source="978" target="979" label="AST"><data key="type">AST</data></edge><edge id="1876" source="979" target="981" label="AST"><data key="type">AST</data></edge><edge id="1874" source="979" target="980" label="AST"><data key="type">AST</data></edge><edge id="1879" source="979" target="983" label="AST"><data key="type">AST</data></edge><edge id="1873" source="979" target="987" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1875" source="980" target="981" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1878" source="981" target="982" label="AST"><data key="type">AST</data></edge><edge id="1877" source="981" target="983" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1882" source="983" target="985" label="AST"><data key="type">AST</data></edge><edge id="1880" source="983" target="984" label="AST"><data key="type">AST</data></edge><edge id="962" source="500" target="502" label="AST"><data key="type">AST</data></edge><edge id="964" source="500" target="503" label="AST"><data key="type">AST</data></edge><edge id="957" source="500" target="501" label="AST"><data key="type">AST</data></edge><edge id="956" source="500" target="506" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1881" source="984" target="985" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="958" source="501" target="478" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="961" source="501" target="485" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="960" source="501" target="485" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="959" source="501" target="502" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1883" source="985" target="986" label="AST"><data key="type">AST</data></edge><edge id="963" source="502" target="503" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="970" source="503" target="505" label="AST"><data key="type">AST</data></edge><edge id="965" source="503" target="504" label="AST"><data key="type">AST</data></edge><edge id="1885" source="987" target="988" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="966" source="504" target="497" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="969" source="504" target="497" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="968" source="504" target="497" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="967" source="504" target="505" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1887" source="988" target="989" label="AST"><data key="type">AST</data></edge><edge id="1889" source="988" target="990" label="AST"><data key="type">AST</data></edge><edge id="1888" source="989" target="990" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="972" source="506" target="507" label="AST"><data key="type">AST</data></edge><edge id="977" source="506" target="508" label="AST"><data key="type">AST</data></edge><edge id="979" source="506" target="509" label="AST"><data key="type">AST</data></edge><edge id="973" source="507" target="478" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="976" source="507" target="501" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="975" source="507" target="501" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="974" source="507" target="508" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="978" source="508" target="509" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1890" source="990" target="964" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1892" source="990" target="964" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1891" source="990" target="964" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1895" source="991" target="992" label="AST"><data key="type">AST</data></edge><edge id="1894" source="991" target="1000" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1899" source="992" target="995" label="AST"><data key="type">AST</data></edge><edge id="1896" source="992" target="993" label="AST"><data key="type">AST</data></edge><edge id="1901" source="992" target="996" label="AST"><data key="type">AST</data></edge><edge id="1898" source="993" target="994" label="AST"><data key="type">AST</data></edge><edge id="1897" source="993" target="995" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="982" source="510" target="511" label="AST"><data key="type">AST</data></edge><edge id="987" source="510" target="512" label="AST"><data key="type">AST</data></edge><edge id="989" source="510" target="513" label="AST"><data key="type">AST</data></edge><edge id="981" source="510" target="518" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="983" source="511" target="478" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="986" source="511" target="507" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="985" source="511" target="507" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="984" source="511" target="512" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1900" source="995" target="996" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="988" source="512" target="513" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1905" source="996" target="999" label="AST"><data key="type">AST</data></edge><edge id="1902" source="996" target="997" label="AST"><data key="type">AST</data></edge><edge id="990" source="513" target="514" label="AST"><data key="type">AST</data></edge><edge id="998" source="513" target="517" label="AST"><data key="type">AST</data></edge><edge id="1904" source="997" target="998" label="AST"><data key="type">AST</data></edge><edge id="1903" source="997" target="999" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="992" source="514" target="515" label="AST"><data key="type">AST</data></edge><edge id="997" source="514" target="516" label="AST"><data key="type">AST</data></edge><edge id="991" source="514" target="517" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="993" source="515" target="478" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="996" source="515" target="511" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="995" source="515" target="511" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="994" source="515" target="516" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1000" source="518" target="519" label="AST"><data key="type">AST</data></edge><edge id="1004" source="519" target="522" label="AST"><data key="type">AST</data></edge><edge id="1001" source="519" target="520" label="AST"><data key="type">AST</data></edge><edge id="1003" source="520" target="521" label="AST"><data key="type">AST</data></edge><edge id="1002" source="520" target="522" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1005" source="522" target="523" label="AST"><data key="type">AST</data></edge><edge id="1010" source="522" target="524" label="AST"><data key="type">AST</data></edge><edge id="1006" source="523" target="478" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1009" source="523" target="515" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1008" source="523" target="515" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1007" source="523" target="524" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1012" source="525" target="526" label="AST"><data key="type">AST</data></edge><edge id="1031" source="525" target="379" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="1018" source="526" target="528" label="AST"><data key="type">AST</data></edge><edge id="1025" source="526" target="530" label="AST"><data key="type">AST</data></edge><edge id="1013" source="526" target="527" label="AST"><data key="type">AST</data></edge><edge id="1020" source="526" target="529" label="AST"><data key="type">AST</data></edge><edge id="1014" source="527" target="461" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1017" source="527" target="471" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1016" source="527" target="471" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1015" source="527" target="528" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1019" source="528" target="529" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1021" source="529" target="388" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1024" source="529" target="465" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1023" source="529" target="465" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1022" source="529" target="530" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1027" source="530" target="409" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1026" source="530" target="397" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1030" source="530" target="452" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1029" source="530" target="452" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1028" source="530" target="438" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1034" source="531" target="532" label="AST"><data key="type">AST</data></edge><edge id="1040" source="531" target="536" label="AST"><data key="type">AST</data></edge><edge id="1033" source="531" target="542" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1039" source="532" target="535" label="AST"><data key="type">AST</data></edge><edge id="1036" source="532" target="533" label="AST"><data key="type">AST</data></edge><edge id="1035" source="532" target="536" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1038" source="533" target="534" label="AST"><data key="type">AST</data></edge><edge id="1037" source="533" target="535" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1041" source="536" target="537" label="AST"><data key="type">AST</data></edge><edge id="1042" source="537" target="538" label="AST"><data key="type">AST</data></edge><edge id="1046" source="538" target="541" label="AST"><data key="type">AST</data></edge><edge id="1043" source="538" target="539" label="AST"><data key="type">AST</data></edge><edge id="1045" source="539" target="540" label="AST"><data key="type">AST</data></edge><edge id="1044" source="539" target="541" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1047" source="541" target="535" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1049" source="542" target="543" label="AST"><data key="type">AST</data></edge><edge id="1055" source="542" target="547" label="AST"><data key="type">AST</data></edge><edge id="1054" source="543" target="546" label="AST"><data key="type">AST</data></edge><edge id="1051" source="543" target="544" label="AST"><data key="type">AST</data></edge><edge id="1050" source="543" target="547" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1053" source="544" target="545" label="AST"><data key="type">AST</data></edge><edge id="1052" source="544" target="546" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1056" source="547" target="548" label="AST"><data key="type">AST</data></edge><edge id="1057" source="548" target="549" label="AST"><data key="type">AST</data></edge><edge id="1058" source="549" target="550" label="AST"><data key="type">AST</data></edge><edge id="1061" source="549" target="552" label="AST"><data key="type">AST</data></edge><edge id="1060" source="550" target="551" label="AST"><data key="type">AST</data></edge><edge id="1059" source="550" target="552" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1062" source="552" target="546" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1091" source="553" target="571" label="AST"><data key="type">AST</data></edge><edge id="1079" source="553" target="563" label="AST"><data key="type">AST</data></edge><edge id="1088" source="553" target="569" label="AST"><data key="type">AST</data></edge><edge id="1065" source="553" target="554" label="AST"><data key="type">AST</data></edge><edge id="1085" source="553" target="567" label="AST"><data key="type">AST</data></edge><edge id="1073" source="553" target="559" label="AST"><data key="type">AST</data></edge><edge id="1071" source="553" target="558" label="AST"><data key="type">AST</data></edge><edge id="1064" source="553" target="632" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1069" source="554" target="556" label="AST"><data key="type">AST</data></edge><edge id="1067" source="554" target="555" label="AST"><data key="type">AST</data></edge><edge id="1066" source="554" target="558" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1068" source="555" target="556" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1070" source="556" target="557" label="AST"><data key="type">AST</data></edge><edge id="1072" source="558" target="559" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1078" source="559" target="562" label="AST"><data key="type">AST</data></edge><edge id="1075" source="559" target="560" label="AST"><data key="type">AST</data></edge><edge id="1074" source="559" target="563" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1077" source="560" target="561" label="AST"><data key="type">AST</data></edge><edge id="1076" source="560" target="562" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1084" source="563" target="566" label="AST"><data key="type">AST</data></edge><edge id="1081" source="563" target="564" label="AST"><data key="type">AST</data></edge><edge id="1080" source="563" target="567" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1083" source="564" target="565" label="AST"><data key="type">AST</data></edge><edge id="1082" source="564" target="566" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1087" source="567" target="568" label="AST"><data key="type">AST</data></edge><edge id="1086" source="567" target="569" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1090" source="569" target="570" label="AST"><data key="type">AST</data></edge><edge id="1089" source="569" target="571" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1092" source="571" target="572" label="AST"><data key="type">AST</data></edge><edge id="1126" source="572" target="588" label="AST"><data key="type">AST</data></edge><edge id="1158" source="572" target="610" label="AST"><data key="type">AST</data></edge><edge id="1142" source="572" target="599" label="AST"><data key="type">AST</data></edge><edge id="1174" source="572" target="621" label="AST"><data key="type">AST</data></edge><edge id="1093" source="572" target="573" label="AST"><data key="type">AST</data></edge><edge id="1115" source="573" target="583" label="AST"><data key="type">AST</data></edge><edge id="1095" source="573" target="574" label="AST"><data key="type">AST</data></edge><edge id="1094" source="573" target="588" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1097" source="574" target="575" label="AST"><data key="type">AST</data></edge><edge id="1096" source="574" target="583" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1103" source="575" target="579" label="AST"><data key="type">AST</data></edge><edge id="1101" source="575" target="578" label="AST"><data key="type">AST</data></edge><edge id="1098" source="575" target="576" label="AST"><data key="type">AST</data></edge><edge id="1100" source="576" target="577" label="AST"><data key="type">AST</data></edge><edge id="1099" source="576" target="578" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1102" source="578" target="579" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1104" source="579" target="580" label="AST"><data key="type">AST</data></edge><edge id="1111" source="579" target="582" label="AST"><data key="type">AST</data></edge><edge id="1109" source="579" target="581" label="AST"><data key="type">AST</data></edge><edge id="1105" source="580" target="562" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1108" source="580" target="562" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1107" source="580" target="562" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1106" source="580" target="581" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1110" source="581" target="582" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1112" source="582" target="566" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1114" source="582" target="566" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1113" source="582" target="566" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1116" source="583" target="584" label="AST"><data key="type">AST</data></edge><edge id="1125" source="583" target="553" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="140" source="100" target="101" label="AST"><data key="type">AST</data></edge><edge id="139" source="100" target="103" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1117" source="584" target="585" label="AST"><data key="type">AST</data></edge><edge id="1124" source="584" target="587" label="AST"><data key="type">AST</data></edge><edge id="1122" source="584" target="586" label="AST"><data key="type">AST</data></edge><edge id="141" source="101" target="102" label="AST"><data key="type">AST</data></edge><edge id="1118" source="585" target="578" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1121" source="585" target="578" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1120" source="585" target="578" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1119" source="585" target="586" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1123" source="586" target="587" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="145" source="104" target="105" label="AST"><data key="type">AST</data></edge><edge id="144" source="104" target="106" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1128" source="588" target="589" label="AST"><data key="type">AST</data></edge><edge id="1134" source="588" target="593" label="AST"><data key="type">AST</data></edge><edge id="1127" source="588" target="599" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1133" source="589" target="592" label="AST"><data key="type">AST</data></edge><edge id="1130" source="589" target="590" label="AST"><data key="type">AST</data></edge><edge id="1129" source="589" target="593" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="148" source="106" target="107" label="AST"><data key="type">AST</data></edge><edge id="147" source="106" target="108" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="150" source="108" target="109" label="AST"><data key="type">AST</data></edge><edge id="173" source="108" target="121" label="AST"><data key="type">AST</data></edge><edge id="195" source="108" target="134" label="AST"><data key="type">AST</data></edge><edge id="272" source="108" target="161" label="AST"><data key="type">AST</data></edge><edge id="160" source="109" target="113" label="AST"><data key="type">AST</data></edge><edge id="152" source="109" target="110" label="AST"><data key="type">AST</data></edge><edge id="151" source="109" target="121" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1132" source="590" target="591" label="AST"><data key="type">AST</data></edge><edge id="1131" source="590" target="592" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1135" source="593" target="594" label="AST"><data key="type">AST</data></edge><edge id="154" source="110" target="111" label="AST"><data key="type">AST</data></edge><edge id="159" source="110" target="112" label="AST"><data key="type">AST</data></edge><edge id="153" source="110" target="113" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1136" source="594" target="595" label="AST"><data key="type">AST</data></edge><edge id="155" source="111" target="103" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="158" source="111" target="103" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="157" source="111" target="103" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="156" source="111" target="112" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1137" source="595" target="596" label="AST"><data key="type">AST</data></edge><edge id="1140" source="595" target="598" label="AST"><data key="type">AST</data></edge><edge id="1139" source="596" target="597" label="AST"><data key="type">AST</data></edge><edge id="1138" source="596" target="598" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="161" source="113" target="114" label="AST"><data key="type">AST</data></edge><edge id="167" source="114" target="116" label="AST"><data key="type">AST</data></edge><edge id="162" source="114" target="115" label="AST"><data key="type">AST</data></edge><edge id="1141" source="598" target="592" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="163" source="115" target="103" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="166" source="115" target="111" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="165" source="115" target="111" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="164" source="115" target="116" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1144" source="599" target="600" label="AST"><data key="type">AST</data></edge><edge id="1150" source="599" target="604" label="AST"><data key="type">AST</data></edge><edge id="1143" source="599" target="610" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="168" source="116" target="117" label="AST"><data key="type">AST</data></edge><edge id="171" source="116" target="119" label="AST"><data key="type">AST</data></edge><edge id="170" source="117" target="118" label="AST"><data key="type">AST</data></edge><edge id="169" source="117" target="119" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="172" source="119" target="120" label="AST"><data key="type">AST</data></edge><edge id="175" source="121" target="122" label="AST"><data key="type">AST</data></edge><edge id="174" source="121" target="134" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="176" source="122" target="123" label="AST"><data key="type">AST</data></edge><edge id="180" source="122" target="126" label="AST"><data key="type">AST</data></edge><edge id="182" source="122" target="127" label="AST"><data key="type">AST</data></edge><edge id="178" source="123" target="124" label="AST"><data key="type">AST</data></edge><edge id="177" source="123" target="126" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="179" source="124" target="125" label="AST"><data key="type">AST</data></edge><edge id="181" source="126" target="127" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="183" source="127" target="128" label="AST"><data key="type">AST</data></edge><edge id="186" source="127" target="130" label="AST"><data key="type">AST</data></edge><edge id="185" source="128" target="129" label="AST"><data key="type">AST</data></edge><edge id="184" source="128" target="130" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="187" source="130" target="131" label="AST"><data key="type">AST</data></edge><edge id="188" source="131" target="132" label="AST"><data key="type">AST</data></edge><edge id="194" source="131" target="133" label="AST"><data key="type">AST</data></edge><edge id="189" source="132" target="103" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="190" source="132" target="115" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="192" source="132" target="111" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="193" source="132" target="115" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="191" source="132" target="133" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="233" source="134" target="149" label="AST"><data key="type">AST</data></edge><edge id="239" source="134" target="151" label="AST"><data key="type">AST</data></edge><edge id="219" source="134" target="146" label="AST"><data key="type">AST</data></edge><edge id="197" source="134" target="135" label="AST"><data key="type">AST</data></edge><edge id="196" source="134" target="161" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="199" source="135" target="136" label="AST"><data key="type">AST</data></edge><edge id="206" source="135" target="140" label="AST"><data key="type">AST</data></edge><edge id="198" source="135" target="146" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="201" source="136" target="137" label="AST"><data key="type">AST</data></edge><edge id="203" source="136" target="138" label="AST"><data key="type">AST</data></edge><edge id="205" source="136" target="139" label="AST"><data key="type">AST</data></edge><edge id="200" source="136" target="140" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="202" source="137" target="138" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="204" source="138" target="139" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3580" source="1809" target="1810" label="AST"><data key="type">AST</data></edge><edge id="211" source="140" target="143" label="AST"><data key="type">AST</data></edge><edge id="207" source="140" target="141" label="AST"><data key="type">AST</data></edge><edge id="209" source="140" target="142" label="AST"><data key="type">AST</data></edge><edge id="208" source="141" target="142" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="210" source="142" target="143" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="212" source="143" target="144" label="AST"><data key="type">AST</data></edge><edge id="217" source="143" target="145" label="AST"><data key="type">AST</data></edge><edge id="218" source="143" target="131" label="LAST_FIELD_LEX"><data key="type">LAST_FIELD_LEX</data></edge><edge id="3564" source="1800" target="1801" label="AST"><data key="type">AST</data></edge><edge id="213" source="144" target="103" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="214" source="144" target="115" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="216" source="144" target="132" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="215" source="144" target="145" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="221" source="146" target="147" label="AST"><data key="type">AST</data></edge><edge id="228" source="146" target="148" label="AST"><data key="type">AST</data></edge><edge id="220" source="146" target="149" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="222" source="147" target="138" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="223" source="147" target="150" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="227" source="147" target="138" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="225" source="147" target="138" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="226" source="147" target="150" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="224" source="147" target="148" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="229" source="148" target="142" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="232" source="148" target="142" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="231" source="148" target="148" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="230" source="148" target="142" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="235" source="149" target="150" label="AST"><data key="type">AST</data></edge><edge id="234" source="149" target="151" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3578" source="1807" target="1808" label="AST"><data key="type">AST</data></edge><edge id="3577" source="1807" target="1809" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3575" source="1806" target="1807" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3579" source="1805" target="1809" label="AST"><data key="type">AST</data></edge><edge id="3576" source="1805" target="1807" label="AST"><data key="type">AST</data></edge><edge id="3574" source="1805" target="1806" label="AST"><data key="type">AST</data></edge><edge id="3573" source="1804" target="1805" label="AST"><data key="type">AST</data></edge><edge id="3568" source="1803" target="1746" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3571" source="1803" target="1746" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3570" source="1803" target="1746" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3569" source="1803" target="1804" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3567" source="1802" target="1803" label="AST"><data key="type">AST</data></edge><edge id="3572" source="1802" target="1804" label="AST"><data key="type">AST</data></edge><edge id="3566" source="1802" target="1811" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="236" source="150" target="155" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="238" source="150" target="147" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="237" source="150" target="155" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="240" source="151" target="152" label="AST"><data key="type">AST</data></edge><edge id="257" source="152" target="156" label="AST"><data key="type">AST</data></edge><edge id="241" source="152" target="153" label="AST"><data key="type">AST</data></edge><edge id="243" source="153" target="154" label="AST"><data key="type">AST</data></edge><edge id="252" source="153" target="155" label="AST"><data key="type">AST</data></edge><edge id="242" source="153" target="156" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="244" source="154" target="126" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="245" source="154" target="154" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="251" source="154" target="126" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="249" source="154" target="158" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="250" source="154" target="159" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="247" source="154" target="126" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="248" source="154" target="154" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="246" source="154" target="155" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3588" source="1811" target="1813" label="AST"><data key="type">AST</data></edge><edge id="3595" source="1811" target="1815" label="AST"><data key="type">AST</data></edge><edge id="3583" source="1811" target="1812" label="AST"><data key="type">AST</data></edge><edge id="3590" source="1811" target="1814" label="AST"><data key="type">AST</data></edge><edge id="3582" source="1811" target="1816" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="253" source="155" target="138" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="254" source="155" target="150" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="256" source="155" target="150" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="255" source="155" target="159" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="258" source="156" target="157" label="AST"><data key="type">AST</data></edge><edge id="271" source="156" target="160" label="AST"><data key="type">AST</data></edge><edge id="267" source="157" target="159" label="AST"><data key="type">AST</data></edge><edge id="260" source="157" target="158" label="AST"><data key="type">AST</data></edge><edge id="259" source="157" target="160" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="261" source="158" target="103" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="262" source="158" target="115" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="266" source="158" target="115" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="264" source="158" target="144" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="265" source="158" target="158" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="263" source="158" target="159" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="268" source="159" target="138" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="270" source="159" target="155" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="269" source="159" target="147" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3605" source="1819" target="1758" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3608" source="1819" target="1783" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3607" source="1819" target="1783" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3606" source="1819" target="1820" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3603" source="1818" target="1819" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3601" source="1817" target="1818" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3604" source="1816" target="1819" label="AST"><data key="type">AST</data></edge><edge id="3602" source="1816" target="1818" label="AST"><data key="type">AST</data></edge><edge id="3600" source="1816" target="1817" label="AST"><data key="type">AST</data></edge><edge id="3609" source="1816" target="1820" label="AST"><data key="type">AST</data></edge><edge id="3596" source="1815" target="1803" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3598" source="1815" target="1803" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3597" source="1815" target="1803" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3591" source="1814" target="1729" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3594" source="1814" target="1729" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3593" source="1814" target="1729" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3592" source="1814" target="1815" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3589" source="1813" target="1814" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3584" source="1812" target="1790" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3587" source="1812" target="1790" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3586" source="1812" target="1790" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3585" source="1812" target="1813" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="462" source="161" target="250" label="AST"><data key="type">AST</data></edge><edge id="478" source="161" target="261" label="AST"><data key="type">AST</data></edge><edge id="446" source="161" target="239" label="AST"><data key="type">AST</data></edge><edge id="273" source="161" target="162" label="AST"><data key="type">AST</data></edge><edge id="275" source="162" target="163" label="AST"><data key="type">AST</data></edge><edge id="430" source="162" target="234" label="AST"><data key="type">AST</data></edge><edge id="300" source="162" target="174" label="AST"><data key="type">AST</data></edge><edge id="274" source="162" target="239" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="277" source="163" target="164" label="AST"><data key="type">AST</data></edge><edge id="276" source="163" target="174" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="286" source="164" target="170" label="AST"><data key="type">AST</data></edge><edge id="278" source="164" target="165" label="AST"><data key="type">AST</data></edge><edge id="284" source="164" target="169" label="AST"><data key="type">AST</data></edge><edge id="280" source="165" target="166" label="AST"><data key="type">AST</data></edge><edge id="282" source="165" target="167" label="AST"><data key="type">AST</data></edge><edge id="279" source="165" target="169" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3616" source="1822" target="1823" label="AST"><data key="type">AST</data></edge><edge id="3615" source="1822" target="1832" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="281" source="166" target="167" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3614" source="1821" target="1822" label="AST"><data key="type">AST</data></edge><edge id="3635" source="1821" target="1832" label="AST"><data key="type">AST</data></edge><edge id="283" source="167" target="168" label="AST"><data key="type">AST</data></edge><edge id="3610" source="1820" target="1790" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3612" source="1820" target="1812" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3611" source="1820" target="1812" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="285" source="169" target="170" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3626" source="1829" target="1758" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3629" source="1829" target="1819" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3628" source="1829" target="1783" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3627" source="1829" target="1830" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3625" source="1828" target="1829" label="AST"><data key="type">AST</data></edge><edge id="3630" source="1828" target="1830" label="AST"><data key="type">AST</data></edge><edge id="3624" source="1828" target="1831" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3623" source="1827" target="1828" label="AST"><data key="type">AST</data></edge><edge id="3631" source="1827" target="1831" label="AST"><data key="type">AST</data></edge><edge id="3621" source="1826" target="1827" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3619" source="1824" target="1825" label="AST"><data key="type">AST</data></edge><edge id="3618" source="1824" target="1826" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3622" source="1823" target="1827" label="AST"><data key="type">AST</data></edge><edge id="3620" source="1823" target="1826" label="AST"><data key="type">AST</data></edge><edge id="3617" source="1823" target="1824" label="AST"><data key="type">AST</data></edge><edge id="287" source="170" target="171" label="AST"><data key="type">AST</data></edge><edge id="289" source="170" target="172" label="AST"><data key="type">AST</data></edge><edge id="294" source="170" target="173" label="AST"><data key="type">AST</data></edge><edge id="288" source="171" target="172" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="290" source="172" target="98" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="293" source="172" target="98" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="292" source="172" target="98" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="291" source="172" target="173" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="295" source="173" target="126" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="296" source="173" target="154" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="299" source="173" target="154" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="297" source="173" target="126" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="298" source="173" target="154" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="310" source="174" target="178" label="AST"><data key="type">AST</data></edge><edge id="302" source="174" target="175" label="AST"><data key="type">AST</data></edge><edge id="301" source="174" target="234" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="304" source="175" target="176" label="AST"><data key="type">AST</data></edge><edge id="309" source="175" target="177" label="AST"><data key="type">AST</data></edge><edge id="303" source="175" target="178" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="305" source="176" target="169" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="308" source="176" target="169" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="307" source="176" target="169" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="306" source="176" target="177" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3638" source="1833" target="1834" label="AST"><data key="type">AST</data></edge><edge id="3643" source="1833" target="1835" label="AST"><data key="type">AST</data></edge><edge id="3637" source="1833" target="1836" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3644" source="1832" target="1836" label="AST"><data key="type">AST</data></edge><edge id="3636" source="1832" target="1833" label="AST"><data key="type">AST</data></edge><edge id="332" source="178" target="191" label="AST"><data key="type">AST</data></edge><edge id="311" source="178" target="179" label="AST"><data key="type">AST</data></edge><edge id="322" source="178" target="187" label="AST"><data key="type">AST</data></edge><edge id="399" source="178" target="219" label="AST"><data key="type">AST</data></edge><edge id="358" source="178" target="201" label="AST"><data key="type">AST</data></edge><edge id="348" source="178" target="197" label="AST"><data key="type">AST</data></edge><edge id="418" source="178" target="227" label="AST"><data key="type">AST</data></edge><edge id="3632" source="1831" target="1729" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3634" source="1831" target="1814" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3633" source="1831" target="1729" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="313" source="179" target="180" label="AST"><data key="type">AST</data></edge><edge id="312" source="179" target="187" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3660" source="1839" target="1841" label="AST"><data key="type">AST</data></edge><edge id="3662" source="1839" target="1842" label="AST"><data key="type">AST</data></edge><edge id="3655" source="1839" target="1840" label="AST"><data key="type">AST</data></edge><edge id="3648" source="1838" target="1746" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3653" source="1838" target="1815" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3651" source="1838" target="1840" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="3652" source="1838" target="1842" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="3650" source="1838" target="1746" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3649" source="1838" target="1839" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3654" source="1837" target="1839" label="AST"><data key="type">AST</data></edge><edge id="3647" source="1837" target="1838" label="AST"><data key="type">AST</data></edge><edge id="3646" source="1837" target="1843" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3666" source="1836" target="1843" label="AST"><data key="type">AST</data></edge><edge id="3645" source="1836" target="1837" label="AST"><data key="type">AST</data></edge><edge id="3639" source="1834" target="1826" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3642" source="1834" target="1826" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3641" source="1834" target="1826" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3640" source="1834" target="1835" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="314" source="180" target="181" label="AST"><data key="type">AST</data></edge><edge id="317" source="180" target="183" label="AST"><data key="type">AST</data></edge><edge id="319" source="180" target="184" label="AST"><data key="type">AST</data></edge><edge id="316" source="181" target="182" label="AST"><data key="type">AST</data></edge><edge id="315" source="181" target="183" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="318" source="183" target="184" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="320" source="184" target="185" label="AST"><data key="type">AST</data></edge><edge id="321" source="185" target="186" label="AST"><data key="type">AST</data></edge><edge id="331" source="187" target="190" label="AST"><data key="type">AST</data></edge><edge id="324" source="187" target="188" label="AST"><data key="type">AST</data></edge><edge id="329" source="187" target="189" label="AST"><data key="type">AST</data></edge><edge id="323" source="187" target="191" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3674" source="1844" target="1846" label="AST"><data key="type">AST</data></edge><edge id="3669" source="1844" target="1845" label="AST"><data key="type">AST</data></edge><edge id="3668" source="1844" target="1847" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="325" source="188" target="183" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="328" source="188" target="183" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="327" source="188" target="183" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="326" source="188" target="189" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3675" source="1843" target="1847" label="AST"><data key="type">AST</data></edge><edge id="3667" source="1843" target="1844" label="AST"><data key="type">AST</data></edge><edge id="330" source="189" target="190" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3663" source="1842" target="1729" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3665" source="1842" target="1831" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3664" source="1842" target="1831" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3661" source="1841" target="1842" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3656" source="1840" target="1779" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3659" source="1840" target="1820" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3658" source="1840" target="1786" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3657" source="1840" target="1841" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3679" source="1849" target="1838" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3682" source="1849" target="1845" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3681" source="1849" target="1845" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3680" source="1849" target="1850" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3683" source="1848" target="1850" label="AST"><data key="type">AST</data></edge><edge id="3678" source="1848" target="1849" label="AST"><data key="type">AST</data></edge><edge id="3677" source="1848" target="1857" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3692" source="1847" target="1857" label="AST"><data key="type">AST</data></edge><edge id="3676" source="1847" target="1848" label="AST"><data key="type">AST</data></edge><edge id="3670" source="1845" target="1838" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3673" source="1845" target="1838" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3672" source="1845" target="1838" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3671" source="1845" target="1846" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="341" source="191" target="194" label="AST"><data key="type">AST</data></edge><edge id="334" source="191" target="192" label="AST"><data key="type">AST</data></edge><edge id="339" source="191" target="193" label="AST"><data key="type">AST</data></edge><edge id="333" source="191" target="197" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="335" source="192" target="183" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="338" source="192" target="188" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="337" source="192" target="188" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="336" source="192" target="193" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="340" source="193" target="194" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="342" source="194" target="195" label="AST"><data key="type">AST</data></edge><edge id="347" source="194" target="196" label="AST"><data key="type">AST</data></edge><edge id="343" source="195" target="98" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="346" source="195" target="172" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="345" source="195" target="172" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="344" source="195" target="196" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="355" source="197" target="199" label="AST"><data key="type">AST</data></edge><edge id="357" source="197" target="200" label="AST"><data key="type">AST</data></edge><edge id="350" source="197" target="198" label="AST"><data key="type">AST</data></edge><edge id="349" source="197" target="201" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="351" source="198" target="183" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="354" source="198" target="192" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="353" source="198" target="192" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="352" source="198" target="199" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3691" source="1855" target="1856" label="AST"><data key="type">AST</data></edge><edge id="356" source="199" target="200" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3689" source="1853" target="1854" label="AST"><data key="type">AST</data></edge><edge id="3688" source="1853" target="1855" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3686" source="1852" target="1853" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3690" source="1851" target="1855" label="AST"><data key="type">AST</data></edge><edge id="3685" source="1851" target="1852" label="AST"><data key="type">AST</data></edge><edge id="3687" source="1851" target="1853" label="AST"><data key="type">AST</data></edge><edge id="3684" source="1850" target="1851" label="AST"><data key="type">AST</data></edge><edge id="3699" source="1859" target="1860" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3694" source="1858" target="1779" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3697" source="1858" target="1840" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3696" source="1858" target="1840" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3695" source="1858" target="1859" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="3705" source="1857" target="1861" label="AST"><data key="type">AST</data></edge><edge id="3693" source="1857" target="1858" label="AST"><data key="type">AST</data></edge><edge id="3698" source="1857" target="1859" label="AST"><data key="type">AST</data></edge><edge id="3700" source="1857" target="1860" label="AST"><data key="type">AST</data></edge><edge id="3711" source="1863" target="1803" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3712" source="1863" target="1838" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3713" source="1863" target="1849" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3717" source="1863" target="1861" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3715" source="1863" target="1845" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3716" source="1863" target="1861" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3714" source="1863" target="1815" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3710" source="1862" target="1863" label="AST"><data key="type">AST</data></edge><edge id="3718" source="1862" target="1720" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="3706" source="1861" target="1849" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3708" source="1861" target="1849" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3707" source="1861" target="1849" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3701" source="1860" target="1729" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="3704" source="1860" target="1842" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="3703" source="1860" target="1842" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="3702" source="1860" target="1861" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2772" source="1404" target="1405" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2779" source="1403" target="1406" label="AST"><data key="type">AST</data></edge><edge id="2787" source="1403" target="1407" label="AST"><data key="type">AST</data></edge><edge id="2773" source="1403" target="1405" label="AST"><data key="type">AST</data></edge><edge id="2771" source="1403" target="1404" label="AST"><data key="type">AST</data></edge><edge id="2763" source="1402" target="1292" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2762" source="1402" target="1197" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2769" source="1402" target="1350" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2768" source="1402" target="1406" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="2767" source="1402" target="1405" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="2766" source="1402" target="1292" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2765" source="1402" target="1197" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2764" source="1402" target="1403" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2761" source="1401" target="1402" label="AST"><data key="type">AST</data></edge><edge id="2770" source="1401" target="1403" label="AST"><data key="type">AST</data></edge><edge id="2760" source="1401" target="1408" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2788" source="1400" target="1408" label="AST"><data key="type">AST</data></edge><edge id="2759" source="1400" target="1401" label="AST"><data key="type">AST</data></edge><edge id="2796" source="1409" target="1411" label="AST"><data key="type">AST</data></edge><edge id="2791" source="1409" target="1410" label="AST"><data key="type">AST</data></edge><edge id="2790" source="1409" target="1412" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2789" source="1408" target="1409" label="AST"><data key="type">AST</data></edge><edge id="2797" source="1408" target="1412" label="AST"><data key="type">AST</data></edge><edge id="2780" source="1406" target="1187" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2786" source="1406" target="1395" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2785" source="1406" target="1337" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2784" source="1406" target="1282" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2783" source="1406" target="1243" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2782" source="1406" target="1234" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2781" source="1406" target="1407" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2774" source="1405" target="1183" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2778" source="1405" target="1354" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2777" source="1405" target="1296" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2776" source="1405" target="1253" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2775" source="1405" target="1406" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2802" source="1415" target="1416" label="AST"><data key="type">AST</data></edge><edge id="2801" source="1415" target="1417" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2800" source="1414" target="1415" label="AST"><data key="type">AST</data></edge><edge id="2803" source="1414" target="1417" label="AST"><data key="type">AST</data></edge><edge id="2799" source="1413" target="1414" label="AST"><data key="type">AST</data></edge><edge id="2798" source="1412" target="1413" label="AST"><data key="type">AST</data></edge><edge id="2792" source="1410" target="1402" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2795" source="1410" target="1402" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2794" source="1410" target="1402" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2793" source="1410" target="1411" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2808" source="1419" target="1420" label="AST"><data key="type">AST</data></edge><edge id="2837" source="1419" target="1431" label="AST"><data key="type">AST</data></edge><edge id="2807" source="1419" target="1432" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2806" source="1418" target="1419" label="AST"><data key="type">AST</data></edge><edge id="2838" source="1418" target="1432" label="AST"><data key="type">AST</data></edge><edge id="2805" source="1418" target="1433" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2842" source="1417" target="1433" label="AST"><data key="type">AST</data></edge><edge id="2804" source="1417" target="1418" label="AST"><data key="type">AST</data></edge><edge id="2821" source="1426" target="1187" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2823" source="1426" target="1406" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2822" source="1426" target="1406" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2819" source="1425" target="1426" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2820" source="1424" target="1426" label="AST"><data key="type">AST</data></edge><edge id="2818" source="1424" target="1425" label="AST"><data key="type">AST</data></edge><edge id="2817" source="1424" target="1427" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2816" source="1423" target="1424" label="AST"><data key="type">AST</data></edge><edge id="2824" source="1423" target="1427" label="AST"><data key="type">AST</data></edge><edge id="2815" source="1423" target="1428" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2814" source="1422" target="1423" label="AST"><data key="type">AST</data></edge><edge id="2825" source="1422" target="1428" label="AST"><data key="type">AST</data></edge><edge id="2813" source="1422" target="1429" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2812" source="1421" target="1422" label="AST"><data key="type">AST</data></edge><edge id="2830" source="1421" target="1429" label="AST"><data key="type">AST</data></edge><edge id="2811" source="1421" target="1430" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2810" source="1420" target="1421" label="AST"><data key="type">AST</data></edge><edge id="2831" source="1420" target="1430" label="AST"><data key="type">AST</data></edge><edge id="2809" source="1420" target="1431" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2827" source="1428" target="1240" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2826" source="1428" target="1220" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2829" source="1428" target="1270" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2828" source="1428" target="1270" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2854" source="1437" target="1438" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2867" source="1436" target="1446" label="AST"><data key="type">AST</data></edge><edge id="2855" source="1436" target="1438" label="AST"><data key="type">AST</data></edge><edge id="2877" source="1436" target="1453" label="AST"><data key="type">AST</data></edge><edge id="2853" source="1436" target="1437" label="AST"><data key="type">AST</data></edge><edge id="2874" source="1436" target="1451" label="AST"><data key="type">AST</data></edge><edge id="2861" source="1436" target="1442" label="AST"><data key="type">AST</data></edge><edge id="2880" source="1436" target="1455" label="AST"><data key="type">AST</data></edge><edge id="2852" source="1436" target="1486" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2845" source="1435" target="1350" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2846" source="1435" target="1402" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2849" source="1435" target="1410" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2848" source="1435" target="1410" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2847" source="1435" target="1350" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2844" source="1434" target="1435" label="AST"><data key="type">AST</data></edge><edge id="2850" source="1434" target="1178" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="2839" source="1432" target="1187" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2841" source="1432" target="1426" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2840" source="1432" target="1426" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2832" source="1430" target="1251" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="2836" source="1430" target="1397" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="2834" source="1430" target="1281" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2833" source="1430" target="1269" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2835" source="1430" target="1339" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="2859" source="1439" target="1440" label="AST"><data key="type">AST</data></edge><edge id="2858" source="1439" target="1441" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2860" source="1438" target="1441" label="AST"><data key="type">AST</data></edge><edge id="2857" source="1438" target="1439" label="AST"><data key="type">AST</data></edge><edge id="2856" source="1438" target="1442" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2876" source="1451" target="1452" label="AST"><data key="type">AST</data></edge><edge id="2875" source="1451" target="1453" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2872" source="1448" target="1449" label="AST"><data key="type">AST</data></edge><edge id="2871" source="1447" target="1448" label="AST"><data key="type">AST</data></edge><edge id="2870" source="1447" target="1450" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2873" source="1446" target="1450" label="AST"><data key="type">AST</data></edge><edge id="2869" source="1446" target="1447" label="AST"><data key="type">AST</data></edge><edge id="2868" source="1446" target="1451" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2865" source="1443" target="1444" label="AST"><data key="type">AST</data></edge><edge id="2864" source="1443" target="1445" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2866" source="1442" target="1445" label="AST"><data key="type">AST</data></edge><edge id="2863" source="1442" target="1443" label="AST"><data key="type">AST</data></edge><edge id="2862" source="1442" target="1446" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge></graph></graphml>