<?xml version="1.0" ?><graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.1/graphml.xsd"><key id="reference" for="node" attr.name="reference" attr.type="string"></key><key id="identifier" for="node" attr.name="identifier" attr.type="string"></key><key id="modifier" for="node" attr.name="modifier" attr.type="string"></key><key id="text" for="node" attr.name="text" attr.type="string"></key><key id="type" for="node" attr.name="type" attr.type="string"></key><key id="parentType" for="node" attr.name="parentType" attr.type="string"></key><key id="type" for="edge" attr.name="type" attr.type="string"></key><graph id="G" edgedefault="directed"><node id="1"><data key="reference"></data><data key="text">package org.reflections.adapters;

import com.google.common.base.Joiner;
import com.google.common.collect.Lists;
import javassist.bytecode.*;
import javassist.bytecode.annotation.Annotation;
import org.reflections.ReflectionsException;
import org.reflections.util.Utils;
import org.reflections.vfs.Vfs;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.List;
import static javassist.bytecode.AccessFlag.isPrivate;
import static javassist.bytecode.AccessFlag.isProtected;

/**
 */
public class JavassistAdapter implements MetadataAdapter&lt;ClassFile, FieldInfo, MethodInfo&gt; {

    /**
     *setting this to false will result in returning only visible annotations from the relevant methods here (only {@link java.lang.annotation.RetentionPolicy#RUNTIME})
     */
    public static boolean includeInvisibleTag = true;

    public List&lt;FieldInfo&gt; getFields(final ClassFile cls) {
        // noinspection unchecked
        return cls.getFields();
    }

    public List&lt;MethodInfo&gt; getMethods(final ClassFile cls) {
        // noinspection unchecked
        return cls.getMethods();
    }

    public String getMethodName(final MethodInfo method) {
        return method.getName();
    }

    public List&lt;String&gt; getParameterNames(final MethodInfo method) {
        String descriptor = method.getDescriptor();
        descriptor = descriptor.substring(descriptor.indexOf("(") + 1, descriptor.lastIndexOf(")"));
        return splitDescriptorToTypeNames(descriptor);
    }

    public List&lt;String&gt; getClassAnnotationNames(final ClassFile aClass) {
        return getAnnotationNames((AnnotationsAttribute) aClass.getAttribute(AnnotationsAttribute.visibleTag), includeInvisibleTag ? (AnnotationsAttribute) aClass.getAttribute(AnnotationsAttribute.invisibleTag) : null);
    }

    public List&lt;String&gt; getFieldAnnotationNames(final FieldInfo field) {
        return getAnnotationNames((AnnotationsAttribute) field.getAttribute(AnnotationsAttribute.visibleTag), includeInvisibleTag ? (AnnotationsAttribute) field.getAttribute(AnnotationsAttribute.invisibleTag) : null);
    }

    public List&lt;String&gt; getMethodAnnotationNames(final MethodInfo method) {
        return getAnnotationNames((AnnotationsAttribute) method.getAttribute(AnnotationsAttribute.visibleTag), includeInvisibleTag ? (AnnotationsAttribute) method.getAttribute(AnnotationsAttribute.invisibleTag) : null);
    }

    public List&lt;String&gt; getParameterAnnotationNames(final MethodInfo method, final int parameterIndex) {
        List&lt;String&gt; result = Lists.newArrayList();
        List&lt;ParameterAnnotationsAttribute&gt; parameterAnnotationsAttributes = Lists.newArrayList((ParameterAnnotationsAttribute) method.getAttribute(ParameterAnnotationsAttribute.visibleTag), (ParameterAnnotationsAttribute) method.getAttribute(ParameterAnnotationsAttribute.invisibleTag));
        if (parameterAnnotationsAttributes != null) {
            for (ParameterAnnotationsAttribute parameterAnnotationsAttribute : parameterAnnotationsAttributes) {
                if (parameterAnnotationsAttribute != null) {
                    Annotation[][] annotations = parameterAnnotationsAttribute.getAnnotations();
                    if (parameterIndex &lt; annotations.length) {
                        Annotation[] annotation = annotations[parameterIndex];
                        result.addAll(getAnnotationNames(annotation));
                    }
                }
            }
        }
        return result;
    }

    public String getReturnTypeName(final MethodInfo method) {
        String descriptor = method.getDescriptor();
        descriptor = descriptor.substring(descriptor.lastIndexOf(")") + 1);
        return splitDescriptorToTypeNames(descriptor).get(0);
    }

    public String getFieldName(final FieldInfo field) {
        return field.getName();
    }

    public ClassFile getOfCreateClassObject(final Vfs.File file) {
        InputStream inputStream = null;
        try {
            inputStream = file.openInputStream();
            DataInputStream dis = new DataInputStream(new BufferedInputStream(inputStream));
            return new ClassFile(dis);
        } catch (IOException e) {
            throw new ReflectionsException("could not create class file from " + file.getName(), e);
        } finally {
            Utils.close(inputStream);
        }
    }

    public String getMethodModifier(MethodInfo method) {
        int accessFlags = method.getAccessFlags();
        return isPrivate(accessFlags) ? "private" : isProtected(accessFlags) ? "protected" : isPublic(accessFlags) ? "public" : "";
    }

    public String getMethodKey(ClassFile cls, MethodInfo method) {
        return getMethodName(method) + "(" + Joiner.on(", ").join(getParameterNames(method)) + ")";
    }

    public String getMethodFullKey(ClassFile cls, MethodInfo method) {
        return getClassName(cls) + "." + getMethodKey(cls, method);
    }

    public boolean isPublic(Object o) {
        Integer accessFlags = o instanceof ClassFile ? ((ClassFile) o).getAccessFlags() : o instanceof FieldInfo ? ((FieldInfo) o).getAccessFlags() : o instanceof MethodInfo ? ((MethodInfo) o).getAccessFlags() : null;
        return accessFlags != null &amp;&amp; AccessFlag.isPublic(accessFlags);
    }

    // 
    public String getClassName(final ClassFile cls) {
        return cls.getName();
    }

    public String getSuperclassName(final ClassFile cls) {
        return cls.getSuperclass();
    }

    public List&lt;String&gt; getInterfacesNames(final ClassFile cls) {
        return Arrays.asList(cls.getInterfaces());
    }

    public boolean acceptsInput(String file) {
        return file.endsWith(".class");
    }

    // 
    private List&lt;String&gt; getAnnotationNames(final AnnotationsAttribute... annotationsAttributes) {
        List&lt;String&gt; result = Lists.newArrayList();
        if (annotationsAttributes != null) {
            for (AnnotationsAttribute annotationsAttribute : annotationsAttributes) {
                if (annotationsAttribute != null) {
                    for (Annotation annotation : annotationsAttribute.getAnnotations()) {
                        result.add(annotation.getTypeName());
                    }
                }
            }
        }
        return result;
    }

    private List&lt;String&gt; getAnnotationNames(final Annotation[] annotations) {
        List&lt;String&gt; result = Lists.newArrayList();
        for (Annotation annotation : annotations) {
            result.add(annotation.getTypeName());
        }
        return result;
    }

    private List&lt;String&gt; splitDescriptorToTypeNames(final String descriptors) {
        List&lt;String&gt; result = Lists.newArrayList();
        if (descriptors != null &amp;&amp; descriptors.length() != 0) {
            List&lt;Integer&gt; indices = Lists.newArrayList();
            Descriptor.Iterator iterator = new Descriptor.Iterator(descriptors);
            while (iterator.hasNext()) {
                indices.add(iterator.next());
            }
            indices.add(descriptors.length());
            for (int i = 0; i &lt; indices.size() - 1; i++) {
                String s1 = Descriptor.toString(descriptors.substring(indices.get(i), indices.get(i + 1)));
                result.add(s1);
            }
        }
        return result;
    }
}
</data><data key="type">CompilationUnit</data></node><node id="2"><data key="reference"></data><data key="text">package org.reflections.adapters;

</data><data key="type">PackageDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="3"><data key="reference"></data><data key="identifier">adapters</data><data key="text">org.reflections.adapters</data><data key="type">Name</data><data key="parentType">PackageDeclaration</data></node><node id="4"><data key="reference"></data><data key="identifier">reflections</data><data key="text">org.reflections</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="5"><data key="reference"></data><data key="identifier">org</data><data key="text">org</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="6"><data key="reference"></data><data key="text">import com.google.common.base.Joiner;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="7"><data key="reference"></data><data key="identifier">Joiner</data><data key="text">com.google.common.base.Joiner</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="8"><data key="reference"></data><data key="identifier">base</data><data key="text">com.google.common.base</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="800"><data key="reference">otherMethodCall</data><data key="identifier">newArrayList</data><data key="text">newArrayList</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="9"><data key="reference"></data><data key="identifier">common</data><data key="text">com.google.common</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="801"><data key="reference"></data><data key="text">if (descriptors != null &amp;&amp; descriptors.length() != 0) {
    List&lt;Integer&gt; indices = Lists.newArrayList();
    Descriptor.Iterator iterator = new Descriptor.Iterator(descriptors);
    while (iterator.hasNext()) {
        indices.add(iterator.next());
    }
    indices.add(descriptors.length());
    for (int i = 0; i &lt; indices.size() - 1; i++) {
        String s1 = Descriptor.toString(descriptors.substring(indices.get(i), indices.get(i + 1)));
        result.add(s1);
    }
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="802"><data key="reference"></data><data key="text">descriptors != null &amp;&amp; descriptors.length() != 0</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="803"><data key="reference"></data><data key="text">descriptors != null</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="804"><data key="reference">java.lang.String</data><data key="identifier">descriptors</data><data key="text">descriptors</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="805"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="806"><data key="reference"></data><data key="text">descriptors.length() != 0</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="807"><data key="reference"></data><data key="text">descriptors.length()</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="808"><data key="reference">java.lang.String</data><data key="identifier">descriptors</data><data key="text">descriptors</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="809"><data key="reference">otherMethodCall</data><data key="identifier">length</data><data key="text">length</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="810"><data key="reference"></data><data key="identifier">0</data><data key="text">0</data><data key="type">IntegerLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="811"><data key="reference"></data><data key="text">{
    List&lt;Integer&gt; indices = Lists.newArrayList();
    Descriptor.Iterator iterator = new Descriptor.Iterator(descriptors);
    while (iterator.hasNext()) {
        indices.add(iterator.next());
    }
    indices.add(descriptors.length());
    for (int i = 0; i &lt; indices.size() - 1; i++) {
        String s1 = Descriptor.toString(descriptors.substring(indices.get(i), indices.get(i + 1)));
        result.add(s1);
    }
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="812"><data key="reference"></data><data key="modifier"></data><data key="text">List&lt;Integer&gt; indices = Lists.newArrayList()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="813"><data key="reference"></data><data key="text">indices = Lists.newArrayList()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="814"><data key="reference"></data><data key="text">List&lt;Integer&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="815"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="816"><data key="reference"></data><data key="text">Integer</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="817"><data key="reference">nonQualifiedClassName</data><data key="identifier">Integer</data><data key="text">Integer</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="818"><data key="reference">java.util.List</data><data key="identifier">indices</data><data key="text">indices</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="819"><data key="reference"></data><data key="text">Lists.newArrayList()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="820"><data key="reference">UnknownType</data><data key="identifier">Lists</data><data key="text">Lists</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="821"><data key="reference">otherMethodCall</data><data key="identifier">newArrayList</data><data key="text">newArrayList</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="822"><data key="reference"></data><data key="modifier"></data><data key="text">Descriptor.Iterator iterator = new Descriptor.Iterator(descriptors)</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="823"><data key="reference"></data><data key="text">iterator = new Descriptor.Iterator(descriptors)</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="824"><data key="reference"></data><data key="text">Descriptor.Iterator</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="825"><data key="reference"></data><data key="text">Descriptor</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="826"><data key="reference">nonQualifiedClassName</data><data key="identifier">Descriptor</data><data key="text">Descriptor</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="827"><data key="reference">nonQualifiedClassName</data><data key="identifier">Iterator</data><data key="text">Iterator</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="828"><data key="reference">javassist.bytecode.Descriptor.Iterator</data><data key="identifier">iterator</data><data key="text">iterator</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="829"><data key="reference"></data><data key="text">new Descriptor.Iterator(descriptors)</data><data key="type">ObjectCreationExpr</data><data key="parentType">VariableDeclarator</data></node><node id="830"><data key="reference"></data><data key="text">Descriptor.Iterator</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="831"><data key="reference"></data><data key="text">Descriptor</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="832"><data key="reference">nonQualifiedClassName</data><data key="identifier">Descriptor</data><data key="text">Descriptor</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="833"><data key="reference">nonQualifiedClassName</data><data key="identifier">Iterator</data><data key="text">Iterator</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="834"><data key="reference">java.lang.String</data><data key="identifier">descriptors</data><data key="text">descriptors</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="835"><data key="reference"></data><data key="text">while (iterator.hasNext()) {
    indices.add(iterator.next());
}</data><data key="type">WhileStmt</data><data key="parentType">BlockStmt</data></node><node id="836"><data key="reference"></data><data key="text">iterator.hasNext()</data><data key="type">MethodCallExpr</data><data key="parentType">WhileStmt</data></node><node id="837"><data key="reference">javassist.bytecode.Descriptor.Iterator</data><data key="identifier">iterator</data><data key="text">iterator</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="838"><data key="reference">otherMethodCall</data><data key="identifier">hasNext</data><data key="text">hasNext</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="839"><data key="reference"></data><data key="text">{
    indices.add(iterator.next());
}</data><data key="type">BlockStmt</data><data key="parentType">WhileStmt</data></node><node id="840"><data key="reference"></data><data key="text">indices.add(iterator.next())</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="841"><data key="reference">java.util.List</data><data key="identifier">indices</data><data key="text">indices</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="600"><data key="reference"></data><data key="text">((FieldInfo) o)</data><data key="type">EnclosedExpr</data><data key="parentType">MethodCallExpr</data></node><node id="842"><data key="reference">otherMethodCall</data><data key="identifier">add</data><data key="text">add</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="601"><data key="reference"></data><data key="text">(FieldInfo) o</data><data key="type">CastExpr</data><data key="parentType">EnclosedExpr</data></node><node id="843"><data key="reference"></data><data key="text">iterator.next()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="602"><data key="reference"></data><data key="text">FieldInfo</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="844"><data key="reference">javassist.bytecode.Descriptor.Iterator</data><data key="identifier">iterator</data><data key="text">iterator</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="603"><data key="reference">nonQualifiedClassName</data><data key="identifier">FieldInfo</data><data key="text">FieldInfo</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="845"><data key="reference">otherMethodCall</data><data key="identifier">next</data><data key="text">next</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="604"><data key="reference">java.lang.Object</data><data key="identifier">o</data><data key="text">o</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="846"><data key="reference"></data><data key="text">indices.add(descriptors.length())</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="605"><data key="reference">otherMethodCall</data><data key="identifier">getAccessFlags</data><data key="text">getAccessFlags</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="847"><data key="reference">java.util.List</data><data key="identifier">indices</data><data key="text">indices</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="606"><data key="reference"></data><data key="text">o instanceof MethodInfo ? ((MethodInfo) o).getAccessFlags() : null</data><data key="type">ConditionalExpr</data><data key="parentType">ConditionalExpr</data></node><node id="848"><data key="reference">otherMethodCall</data><data key="identifier">add</data><data key="text">add</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="607"><data key="reference"></data><data key="text">o instanceof MethodInfo</data><data key="type">InstanceOfExpr</data><data key="parentType">ConditionalExpr</data></node><node id="849"><data key="reference"></data><data key="text">descriptors.length()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="608"><data key="reference">java.lang.Object</data><data key="identifier">o</data><data key="text">o</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="609"><data key="reference"></data><data key="text">MethodInfo</data><data key="type">ClassOrInterfaceType</data><data key="parentType">InstanceOfExpr</data></node><node id="850"><data key="reference">java.lang.String</data><data key="identifier">descriptors</data><data key="text">descriptors</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="851"><data key="reference">otherMethodCall</data><data key="identifier">length</data><data key="text">length</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="610"><data key="reference">nonQualifiedClassName</data><data key="identifier">MethodInfo</data><data key="text">MethodInfo</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="852"><data key="reference"></data><data key="text">for (int i = 0; i &lt; indices.size() - 1; i++) {
    String s1 = Descriptor.toString(descriptors.substring(indices.get(i), indices.get(i + 1)));
    result.add(s1);
}</data><data key="type">ForStmt</data><data key="parentType">BlockStmt</data></node><node id="611"><data key="reference"></data><data key="text">((MethodInfo) o).getAccessFlags()</data><data key="type">MethodCallExpr</data><data key="parentType">ConditionalExpr</data></node><node id="853"><data key="reference"></data><data key="modifier"></data><data key="text">int i = 0</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForStmt</data></node><node id="612"><data key="reference"></data><data key="text">((MethodInfo) o)</data><data key="type">EnclosedExpr</data><data key="parentType">MethodCallExpr</data></node><node id="854"><data key="reference"></data><data key="text">i = 0</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="613"><data key="reference"></data><data key="text">(MethodInfo) o</data><data key="type">CastExpr</data><data key="parentType">EnclosedExpr</data></node><node id="855"><data key="reference"></data><data key="identifier">int</data><data key="text">int</data><data key="type">PrimitiveType</data><data key="parentType">VariableDeclarator</data></node><node id="614"><data key="reference"></data><data key="text">MethodInfo</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="856"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="615"><data key="reference">nonQualifiedClassName</data><data key="identifier">MethodInfo</data><data key="text">MethodInfo</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="857"><data key="reference"></data><data key="identifier">0</data><data key="text">0</data><data key="type">IntegerLiteralExpr</data><data key="parentType">VariableDeclarator</data></node><node id="616"><data key="reference">java.lang.Object</data><data key="identifier">o</data><data key="text">o</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="858"><data key="reference"></data><data key="text">i &lt; indices.size() - 1</data><data key="type">BinaryExpr</data><data key="parentType">ForStmt</data></node><node id="617"><data key="reference">otherMethodCall</data><data key="identifier">getAccessFlags</data><data key="text">getAccessFlags</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="859"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="618"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">ConditionalExpr</data></node><node id="619"><data key="reference"></data><data key="text">return accessFlags != null &amp;&amp; AccessFlag.isPublic(accessFlags);</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="860"><data key="reference"></data><data key="text">indices.size() - 1</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="861"><data key="reference"></data><data key="text">indices.size()</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="620"><data key="reference"></data><data key="text">accessFlags != null &amp;&amp; AccessFlag.isPublic(accessFlags)</data><data key="type">BinaryExpr</data><data key="parentType">ReturnStmt</data></node><node id="862"><data key="reference">java.util.List</data><data key="identifier">indices</data><data key="text">indices</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="621"><data key="reference"></data><data key="text">accessFlags != null</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="863"><data key="reference">otherMethodCall</data><data key="identifier">size</data><data key="text">size</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="622"><data key="reference">java.lang.Integer</data><data key="identifier">accessFlags</data><data key="text">accessFlags</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="864"><data key="reference"></data><data key="identifier">1</data><data key="text">1</data><data key="type">IntegerLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="623"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="865"><data key="reference"></data><data key="text">i++</data><data key="type">UnaryExpr</data><data key="parentType">ForStmt</data></node><node id="624"><data key="reference"></data><data key="text">AccessFlag.isPublic(accessFlags)</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="866"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="625"><data key="reference">UnknownType</data><data key="identifier">AccessFlag</data><data key="text">AccessFlag</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="867"><data key="reference"></data><data key="text">{
    String s1 = Descriptor.toString(descriptors.substring(indices.get(i), indices.get(i + 1)));
    result.add(s1);
}</data><data key="type">BlockStmt</data><data key="parentType">ForStmt</data></node><node id="626"><data key="reference">otherMethodCall</data><data key="identifier">isPublic</data><data key="text">isPublic</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="868"><data key="reference"></data><data key="modifier"></data><data key="text">String s1 = Descriptor.toString(descriptors.substring(indices.get(i), indices.get(i + 1)))</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="627"><data key="reference">java.lang.Integer</data><data key="identifier">accessFlags</data><data key="text">accessFlags</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="869"><data key="reference"></data><data key="text">s1 = Descriptor.toString(descriptors.substring(indices.get(i), indices.get(i + 1)))</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="628"><data key="reference"></data><data key="modifier">public</data><data key="text">// 
public String getClassName(final ClassFile cls) {
    return cls.getName();
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="629"><data key="reference">userDefinedMethodName</data><data key="identifier">getClassName</data><data key="text">getClassName</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="870"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="871"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="630"><data key="reference"></data><data key="modifier">final</data><data key="text">final ClassFile cls</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="872"><data key="reference">java.lang.String</data><data key="identifier">s1</data><data key="text">s1</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="631"><data key="reference"></data><data key="text">ClassFile</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="873"><data key="reference"></data><data key="text">Descriptor.toString(descriptors.substring(indices.get(i), indices.get(i + 1)))</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="632"><data key="reference">nonQualifiedClassName</data><data key="identifier">ClassFile</data><data key="text">ClassFile</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="874"><data key="reference">UnknownType</data><data key="identifier">Descriptor</data><data key="text">Descriptor</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="633"><data key="reference">javassist.bytecode.ClassFile</data><data key="identifier">cls</data><data key="text">cls</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="875"><data key="reference">otherMethodCall</data><data key="identifier">toString</data><data key="text">toString</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="634"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="876"><data key="reference"></data><data key="text">descriptors.substring(indices.get(i), indices.get(i + 1))</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="635"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="877"><data key="reference">java.lang.String</data><data key="identifier">descriptors</data><data key="text">descriptors</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="636"><data key="reference"></data><data key="text">{
    return cls.getName();
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="878"><data key="reference">otherMethodCall</data><data key="identifier">substring</data><data key="text">substring</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="637"><data key="reference"></data><data key="text">return cls.getName();</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="879"><data key="reference"></data><data key="text">indices.get(i)</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="638"><data key="reference"></data><data key="text">cls.getName()</data><data key="type">MethodCallExpr</data><data key="parentType">ReturnStmt</data></node><node id="639"><data key="reference">javassist.bytecode.ClassFile</data><data key="identifier">cls</data><data key="text">cls</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="880"><data key="reference">java.util.List</data><data key="identifier">indices</data><data key="text">indices</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="881"><data key="reference">otherMethodCall</data><data key="identifier">get</data><data key="text">get</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="640"><data key="reference">otherMethodCall</data><data key="identifier">getName</data><data key="text">getName</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="882"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="641"><data key="reference"></data><data key="modifier">public</data><data key="text">public String getSuperclassName(final ClassFile cls) {
    return cls.getSuperclass();
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="883"><data key="reference"></data><data key="text">indices.get(i + 1)</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="400"><data key="reference"></data><data key="text">splitDescriptorToTypeNames(descriptor).get(0)</data><data key="type">MethodCallExpr</data><data key="parentType">ReturnStmt</data></node><node id="642"><data key="reference">userDefinedMethodName</data><data key="identifier">getSuperclassName</data><data key="text">getSuperclassName</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="884"><data key="reference">java.util.List</data><data key="identifier">indices</data><data key="text">indices</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="401"><data key="reference"></data><data key="text">splitDescriptorToTypeNames(descriptor)</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="643"><data key="reference"></data><data key="modifier">final</data><data key="text">final ClassFile cls</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="885"><data key="reference">otherMethodCall</data><data key="identifier">get</data><data key="text">get</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="402"><data key="reference">otherMethodCall</data><data key="identifier">splitDescriptorToTypeNames</data><data key="text">splitDescriptorToTypeNames</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="644"><data key="reference"></data><data key="text">ClassFile</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="886"><data key="reference"></data><data key="text">i + 1</data><data key="type">BinaryExpr</data><data key="parentType">MethodCallExpr</data></node><node id="403"><data key="reference">java.lang.String</data><data key="identifier">descriptor</data><data key="text">descriptor</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="645"><data key="reference">nonQualifiedClassName</data><data key="identifier">ClassFile</data><data key="text">ClassFile</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="887"><data key="reference">int</data><data key="identifier">i</data><data key="text">i</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="404"><data key="reference">otherMethodCall</data><data key="identifier">get</data><data key="text">get</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="646"><data key="reference">javassist.bytecode.ClassFile</data><data key="identifier">cls</data><data key="text">cls</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="888"><data key="reference"></data><data key="identifier">1</data><data key="text">1</data><data key="type">IntegerLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="405"><data key="reference"></data><data key="identifier">0</data><data key="text">0</data><data key="type">IntegerLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="647"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="889"><data key="reference"></data><data key="text">result.add(s1)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="406"><data key="reference"></data><data key="modifier">public</data><data key="text">public String getFieldName(final FieldInfo field) {
    return field.getName();
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="648"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="407"><data key="reference">userDefinedMethodName</data><data key="identifier">getFieldName</data><data key="text">getFieldName</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="649"><data key="reference"></data><data key="text">{
    return cls.getSuperclass();
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="408"><data key="reference"></data><data key="modifier">final</data><data key="text">final FieldInfo field</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="409"><data key="reference"></data><data key="text">FieldInfo</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="890"><data key="reference">java.util.List</data><data key="identifier">result</data><data key="text">result</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="891"><data key="reference">otherMethodCall</data><data key="identifier">add</data><data key="text">add</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="650"><data key="reference"></data><data key="text">return cls.getSuperclass();</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="892"><data key="reference">java.lang.String</data><data key="identifier">s1</data><data key="text">s1</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="651"><data key="reference"></data><data key="text">cls.getSuperclass()</data><data key="type">MethodCallExpr</data><data key="parentType">ReturnStmt</data></node><node id="893"><data key="reference"></data><data key="text">return result;</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="410"><data key="reference">nonQualifiedClassName</data><data key="identifier">FieldInfo</data><data key="text">FieldInfo</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="652"><data key="reference">javassist.bytecode.ClassFile</data><data key="identifier">cls</data><data key="text">cls</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="894"><data key="reference">java.util.List</data><data key="identifier">result</data><data key="text">result</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="411"><data key="reference">javassist.bytecode.FieldInfo</data><data key="identifier">field</data><data key="text">field</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="653"><data key="reference">otherMethodCall</data><data key="identifier">getSuperclass</data><data key="text">getSuperclass</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="895"><data key="reference"></data><data key="text">MetadataAdapter&lt;ClassFile, FieldInfo, MethodInfo&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="412"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="654"><data key="reference"></data><data key="modifier">public</data><data key="text">public List&lt;String&gt; getInterfacesNames(final ClassFile cls) {
    return Arrays.asList(cls.getInterfaces());
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="896"><data key="reference">nonQualifiedClassName</data><data key="identifier">MetadataAdapter</data><data key="text">MetadataAdapter</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="413"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="655"><data key="reference">userDefinedMethodName</data><data key="identifier">getInterfacesNames</data><data key="text">getInterfacesNames</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="897"><data key="reference"></data><data key="text">ClassFile</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="414"><data key="reference"></data><data key="text">{
    return field.getName();
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="656"><data key="reference"></data><data key="modifier">final</data><data key="text">final ClassFile cls</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="898"><data key="reference">nonQualifiedClassName</data><data key="identifier">ClassFile</data><data key="text">ClassFile</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="415"><data key="reference"></data><data key="text">return field.getName();</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="657"><data key="reference"></data><data key="text">ClassFile</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="899"><data key="reference"></data><data key="text">FieldInfo</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="416"><data key="reference"></data><data key="text">field.getName()</data><data key="type">MethodCallExpr</data><data key="parentType">ReturnStmt</data></node><node id="658"><data key="reference">nonQualifiedClassName</data><data key="identifier">ClassFile</data><data key="text">ClassFile</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="417"><data key="reference">javassist.bytecode.FieldInfo</data><data key="identifier">field</data><data key="text">field</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="659"><data key="reference">javassist.bytecode.ClassFile</data><data key="identifier">cls</data><data key="text">cls</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="418"><data key="reference">otherMethodCall</data><data key="identifier">getName</data><data key="text">getName</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="419"><data key="reference"></data><data key="modifier">public</data><data key="text">public ClassFile getOfCreateClassObject(final Vfs.File file) {
    InputStream inputStream = null;
    try {
        inputStream = file.openInputStream();
        DataInputStream dis = new DataInputStream(new BufferedInputStream(inputStream));
        return new ClassFile(dis);
    } catch (IOException e) {
        throw new ReflectionsException("could not create class file from " + file.getName(), e);
    } finally {
        Utils.close(inputStream);
    }
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="660"><data key="reference"></data><data key="text">List&lt;String&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="661"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="420"><data key="reference">userDefinedMethodName</data><data key="identifier">getOfCreateClassObject</data><data key="text">getOfCreateClassObject</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="662"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="421"><data key="reference"></data><data key="modifier">final</data><data key="text">final Vfs.File file</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="663"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="422"><data key="reference"></data><data key="text">Vfs.File</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="664"><data key="reference"></data><data key="text">{
    return Arrays.asList(cls.getInterfaces());
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="423"><data key="reference"></data><data key="text">Vfs</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="665"><data key="reference"></data><data key="text">return Arrays.asList(cls.getInterfaces());</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="424"><data key="reference">nonQualifiedClassName</data><data key="identifier">Vfs</data><data key="text">Vfs</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="666"><data key="reference"></data><data key="text">Arrays.asList(cls.getInterfaces())</data><data key="type">MethodCallExpr</data><data key="parentType">ReturnStmt</data></node><node id="425"><data key="reference">nonQualifiedClassName</data><data key="identifier">File</data><data key="text">File</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="667"><data key="reference">UnknownType</data><data key="identifier">Arrays</data><data key="text">Arrays</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="426"><data key="reference">org.reflections.vfs.Vfs.File</data><data key="identifier">file</data><data key="text">file</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="668"><data key="reference">otherMethodCall</data><data key="identifier">asList</data><data key="text">asList</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="427"><data key="reference"></data><data key="text">ClassFile</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="669"><data key="reference"></data><data key="text">cls.getInterfaces()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="428"><data key="reference">nonQualifiedClassName</data><data key="identifier">ClassFile</data><data key="text">ClassFile</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="429"><data key="reference"></data><data key="text">{
    InputStream inputStream = null;
    try {
        inputStream = file.openInputStream();
        DataInputStream dis = new DataInputStream(new BufferedInputStream(inputStream));
        return new ClassFile(dis);
    } catch (IOException e) {
        throw new ReflectionsException("could not create class file from " + file.getName(), e);
    } finally {
        Utils.close(inputStream);
    }
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="670"><data key="reference">javassist.bytecode.ClassFile</data><data key="identifier">cls</data><data key="text">cls</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="671"><data key="reference">otherMethodCall</data><data key="identifier">getInterfaces</data><data key="text">getInterfaces</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="430"><data key="reference"></data><data key="modifier"></data><data key="text">InputStream inputStream = null</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="672"><data key="reference"></data><data key="modifier">public</data><data key="text">public boolean acceptsInput(String file) {
    return file.endsWith(".class");
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="431"><data key="reference"></data><data key="text">inputStream = null</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="673"><data key="reference">userDefinedMethodName</data><data key="identifier">acceptsInput</data><data key="text">acceptsInput</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="432"><data key="reference"></data><data key="text">InputStream</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="674"><data key="reference"></data><data key="modifier"></data><data key="text">String file</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="433"><data key="reference">nonQualifiedClassName</data><data key="identifier">InputStream</data><data key="text">InputStream</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="675"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="434"><data key="reference">java.io.InputStream</data><data key="identifier">inputStream</data><data key="text">inputStream</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="676"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="435"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">VariableDeclarator</data></node><node id="677"><data key="reference">java.lang.String</data><data key="identifier">file</data><data key="text">file</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="436"><data key="reference"></data><data key="text">try {
    inputStream = file.openInputStream();
    DataInputStream dis = new DataInputStream(new BufferedInputStream(inputStream));
    return new ClassFile(dis);
} catch (IOException e) {
    throw new ReflectionsException("could not create class file from " + file.getName(), e);
} finally {
    Utils.close(inputStream);
}</data><data key="type">TryStmt</data><data key="parentType">BlockStmt</data></node><node id="678"><data key="reference"></data><data key="identifier">boolean</data><data key="text">boolean</data><data key="type">PrimitiveType</data><data key="parentType">MethodDeclaration</data></node><node id="437"><data key="reference"></data><data key="text">{
    inputStream = file.openInputStream();
    DataInputStream dis = new DataInputStream(new BufferedInputStream(inputStream));
    return new ClassFile(dis);
}</data><data key="type">BlockStmt</data><data key="parentType">TryStmt</data></node><node id="679"><data key="reference"></data><data key="text">{
    return file.endsWith(".class");
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="438"><data key="reference"></data><data key="identifier">=</data><data key="text">inputStream = file.openInputStream()</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="439"><data key="reference">java.io.InputStream</data><data key="identifier">inputStream</data><data key="text">inputStream</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="680"><data key="reference"></data><data key="text">return file.endsWith(".class");</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="681"><data key="reference"></data><data key="text">file.endsWith(".class")</data><data key="type">MethodCallExpr</data><data key="parentType">ReturnStmt</data></node><node id="440"><data key="reference"></data><data key="text">file.openInputStream()</data><data key="type">MethodCallExpr</data><data key="parentType">AssignExpr</data></node><node id="682"><data key="reference">java.lang.String</data><data key="identifier">file</data><data key="text">file</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="441"><data key="reference">org.reflections.vfs.Vfs.File</data><data key="identifier">file</data><data key="text">file</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="683"><data key="reference">otherMethodCall</data><data key="identifier">endsWith</data><data key="text">endsWith</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="200"><data key="reference"></data><data key="text">FieldInfo</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="442"><data key="reference">otherMethodCall</data><data key="identifier">openInputStream</data><data key="text">openInputStream</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="684"><data key="reference"></data><data key="identifier">.class</data><data key="text">".class"</data><data key="type">StringLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="201"><data key="reference">nonQualifiedClassName</data><data key="identifier">FieldInfo</data><data key="text">FieldInfo</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="443"><data key="reference"></data><data key="modifier"></data><data key="text">DataInputStream dis = new DataInputStream(new BufferedInputStream(inputStream))</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="685"><data key="reference"></data><data key="modifier">private</data><data key="text">// 
private List&lt;String&gt; getAnnotationNames(final AnnotationsAttribute... annotationsAttributes) {
    List&lt;String&gt; result = Lists.newArrayList();
    if (annotationsAttributes != null) {
        for (AnnotationsAttribute annotationsAttribute : annotationsAttributes) {
            if (annotationsAttribute != null) {
                for (Annotation annotation : annotationsAttribute.getAnnotations()) {
                    result.add(annotation.getTypeName());
                }
            }
        }
    }
    return result;
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="202"><data key="reference">javassist.bytecode.FieldInfo</data><data key="identifier">field</data><data key="text">field</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="444"><data key="reference"></data><data key="text">dis = new DataInputStream(new BufferedInputStream(inputStream))</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="686"><data key="reference">userDefinedMethodName</data><data key="identifier">getAnnotationNames</data><data key="text">getAnnotationNames</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="203"><data key="reference"></data><data key="text">List&lt;String&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="445"><data key="reference"></data><data key="text">DataInputStream</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="687"><data key="reference"></data><data key="modifier">final</data><data key="text">final AnnotationsAttribute... annotationsAttributes</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="204"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="446"><data key="reference">nonQualifiedClassName</data><data key="identifier">DataInputStream</data><data key="text">DataInputStream</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="688"><data key="reference"></data><data key="text">AnnotationsAttribute</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="205"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="447"><data key="reference">java.io.DataInputStream</data><data key="identifier">dis</data><data key="text">dis</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="689"><data key="reference">nonQualifiedClassName</data><data key="identifier">AnnotationsAttribute</data><data key="text">AnnotationsAttribute</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="206"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="448"><data key="reference"></data><data key="text">new DataInputStream(new BufferedInputStream(inputStream))</data><data key="type">ObjectCreationExpr</data><data key="parentType">VariableDeclarator</data></node><node id="207"><data key="reference"></data><data key="text">{
    return getAnnotationNames((AnnotationsAttribute) field.getAttribute(AnnotationsAttribute.visibleTag), includeInvisibleTag ? (AnnotationsAttribute) field.getAttribute(AnnotationsAttribute.invisibleTag) : null);
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="449"><data key="reference"></data><data key="text">DataInputStream</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="208"><data key="reference"></data><data key="text">return getAnnotationNames((AnnotationsAttribute) field.getAttribute(AnnotationsAttribute.visibleTag), includeInvisibleTag ? (AnnotationsAttribute) field.getAttribute(AnnotationsAttribute.invisibleTag) : null);</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="209"><data key="reference"></data><data key="text">getAnnotationNames((AnnotationsAttribute) field.getAttribute(AnnotationsAttribute.visibleTag), includeInvisibleTag ? (AnnotationsAttribute) field.getAttribute(AnnotationsAttribute.invisibleTag) : null)</data><data key="type">MethodCallExpr</data><data key="parentType">ReturnStmt</data></node><node id="690"><data key="reference">javassist.bytecode.AnnotationsAttribute</data><data key="identifier">annotationsAttributes</data><data key="text">annotationsAttributes</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="691"><data key="reference"></data><data key="text">List&lt;String&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="450"><data key="reference">nonQualifiedClassName</data><data key="identifier">DataInputStream</data><data key="text">DataInputStream</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="692"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="451"><data key="reference"></data><data key="text">new BufferedInputStream(inputStream)</data><data key="type">ObjectCreationExpr</data><data key="parentType">ObjectCreationExpr</data></node><node id="693"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="210"><data key="reference">otherMethodCall</data><data key="identifier">getAnnotationNames</data><data key="text">getAnnotationNames</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="452"><data key="reference"></data><data key="text">BufferedInputStream</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="694"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="211"><data key="reference"></data><data key="text">(AnnotationsAttribute) field.getAttribute(AnnotationsAttribute.visibleTag)</data><data key="type">CastExpr</data><data key="parentType">MethodCallExpr</data></node><node id="453"><data key="reference">nonQualifiedClassName</data><data key="identifier">BufferedInputStream</data><data key="text">BufferedInputStream</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="695"><data key="reference"></data><data key="text">{
    List&lt;String&gt; result = Lists.newArrayList();
    if (annotationsAttributes != null) {
        for (AnnotationsAttribute annotationsAttribute : annotationsAttributes) {
            if (annotationsAttribute != null) {
                for (Annotation annotation : annotationsAttribute.getAnnotations()) {
                    result.add(annotation.getTypeName());
                }
            }
        }
    }
    return result;
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="212"><data key="reference"></data><data key="text">AnnotationsAttribute</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="454"><data key="reference">java.io.InputStream</data><data key="identifier">inputStream</data><data key="text">inputStream</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="696"><data key="reference"></data><data key="modifier"></data><data key="text">List&lt;String&gt; result = Lists.newArrayList()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="213"><data key="reference">nonQualifiedClassName</data><data key="identifier">AnnotationsAttribute</data><data key="text">AnnotationsAttribute</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="455"><data key="reference"></data><data key="text">return new ClassFile(dis);</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="697"><data key="reference"></data><data key="text">result = Lists.newArrayList()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="214"><data key="reference"></data><data key="text">field.getAttribute(AnnotationsAttribute.visibleTag)</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="456"><data key="reference"></data><data key="text">new ClassFile(dis)</data><data key="type">ObjectCreationExpr</data><data key="parentType">ReturnStmt</data></node><node id="698"><data key="reference"></data><data key="text">List&lt;String&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="215"><data key="reference">javassist.bytecode.FieldInfo</data><data key="identifier">field</data><data key="text">field</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="457"><data key="reference"></data><data key="text">ClassFile</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="699"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="216"><data key="reference">otherMethodCall</data><data key="identifier">getAttribute</data><data key="text">getAttribute</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="458"><data key="reference">nonQualifiedClassName</data><data key="identifier">ClassFile</data><data key="text">ClassFile</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="217"><data key="reference"></data><data key="text">AnnotationsAttribute.visibleTag</data><data key="type">FieldAccessExpr</data><data key="parentType">MethodCallExpr</data></node><node id="459"><data key="reference">java.io.DataInputStream</data><data key="identifier">dis</data><data key="text">dis</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="218"><data key="reference">UnknownType</data><data key="identifier">AnnotationsAttribute</data><data key="text">AnnotationsAttribute</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="219"><data key="reference">java.lang.String</data><data key="identifier">visibleTag</data><data key="text">visibleTag</data><data key="type">SimpleName</data><data key="parentType">FieldAccessExpr</data></node><node id="460"><data key="reference"></data><data key="text"> catch (IOException e) {
    throw new ReflectionsException("could not create class file from " + file.getName(), e);
}</data><data key="type">CatchClause</data><data key="parentType">TryStmt</data></node><node id="461"><data key="reference"></data><data key="modifier"></data><data key="text">IOException e</data><data key="type">Parameter</data><data key="parentType">CatchClause</data></node><node id="220"><data key="reference"></data><data key="text">includeInvisibleTag ? (AnnotationsAttribute) field.getAttribute(AnnotationsAttribute.invisibleTag) : null</data><data key="type">ConditionalExpr</data><data key="parentType">MethodCallExpr</data></node><node id="462"><data key="reference"></data><data key="text">IOException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="221"><data key="reference">boolean</data><data key="identifier">includeInvisibleTag</data><data key="text">includeInvisibleTag</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="463"><data key="reference">nonQualifiedClassName</data><data key="identifier">IOException</data><data key="text">IOException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="222"><data key="reference"></data><data key="text">(AnnotationsAttribute) field.getAttribute(AnnotationsAttribute.invisibleTag)</data><data key="type">CastExpr</data><data key="parentType">ConditionalExpr</data></node><node id="464"><data key="reference">java.io.IOException</data><data key="identifier">e</data><data key="text">e</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="223"><data key="reference"></data><data key="text">AnnotationsAttribute</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="465"><data key="reference"></data><data key="text">{
    throw new ReflectionsException("could not create class file from " + file.getName(), e);
}</data><data key="type">BlockStmt</data><data key="parentType">CatchClause</data></node><node id="224"><data key="reference">nonQualifiedClassName</data><data key="identifier">AnnotationsAttribute</data><data key="text">AnnotationsAttribute</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="466"><data key="reference"></data><data key="text">throw new ReflectionsException("could not create class file from " + file.getName(), e);</data><data key="type">ThrowStmt</data><data key="parentType">BlockStmt</data></node><node id="225"><data key="reference"></data><data key="text">field.getAttribute(AnnotationsAttribute.invisibleTag)</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="467"><data key="reference"></data><data key="text">new ReflectionsException("could not create class file from " + file.getName(), e)</data><data key="type">ObjectCreationExpr</data><data key="parentType">ThrowStmt</data></node><node id="226"><data key="reference">javassist.bytecode.FieldInfo</data><data key="identifier">field</data><data key="text">field</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="468"><data key="reference"></data><data key="text">ReflectionsException</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ObjectCreationExpr</data></node><node id="227"><data key="reference">otherMethodCall</data><data key="identifier">getAttribute</data><data key="text">getAttribute</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="469"><data key="reference">nonQualifiedClassName</data><data key="identifier">ReflectionsException</data><data key="text">ReflectionsException</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="228"><data key="reference"></data><data key="text">AnnotationsAttribute.invisibleTag</data><data key="type">FieldAccessExpr</data><data key="parentType">MethodCallExpr</data></node><node id="229"><data key="reference">UnknownType</data><data key="identifier">AnnotationsAttribute</data><data key="text">AnnotationsAttribute</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="470"><data key="reference"></data><data key="text">"could not create class file from " + file.getName()</data><data key="type">BinaryExpr</data><data key="parentType">ObjectCreationExpr</data></node><node id="471"><data key="reference"></data><data key="identifier">could not create class file from </data><data key="text">"could not create class file from "</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="230"><data key="reference">java.lang.String</data><data key="identifier">invisibleTag</data><data key="text">invisibleTag</data><data key="type">SimpleName</data><data key="parentType">FieldAccessExpr</data></node><node id="472"><data key="reference"></data><data key="text">file.getName()</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="231"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">ConditionalExpr</data></node><node id="473"><data key="reference">org.reflections.vfs.Vfs.File</data><data key="identifier">file</data><data key="text">file</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="232"><data key="reference"></data><data key="modifier">public</data><data key="text">public List&lt;String&gt; getMethodAnnotationNames(final MethodInfo method) {
    return getAnnotationNames((AnnotationsAttribute) method.getAttribute(AnnotationsAttribute.visibleTag), includeInvisibleTag ? (AnnotationsAttribute) method.getAttribute(AnnotationsAttribute.invisibleTag) : null);
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="474"><data key="reference">otherMethodCall</data><data key="identifier">getName</data><data key="text">getName</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="233"><data key="reference">userDefinedMethodName</data><data key="identifier">getMethodAnnotationNames</data><data key="text">getMethodAnnotationNames</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="475"><data key="reference">java.io.IOException</data><data key="identifier">e</data><data key="text">e</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="234"><data key="reference"></data><data key="modifier">final</data><data key="text">final MethodInfo method</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="476"><data key="reference"></data><data key="text">{
    Utils.close(inputStream);
}</data><data key="type">BlockStmt</data><data key="parentType">TryStmt</data></node><node id="235"><data key="reference"></data><data key="text">MethodInfo</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="477"><data key="reference"></data><data key="text">Utils.close(inputStream)</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="236"><data key="reference">nonQualifiedClassName</data><data key="identifier">MethodInfo</data><data key="text">MethodInfo</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="478"><data key="reference">UnknownType</data><data key="identifier">Utils</data><data key="text">Utils</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="237"><data key="reference">javassist.bytecode.MethodInfo</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="479"><data key="reference">otherMethodCall</data><data key="identifier">close</data><data key="text">close</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="238"><data key="reference"></data><data key="text">List&lt;String&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="239"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="480"><data key="reference">java.io.InputStream</data><data key="identifier">inputStream</data><data key="text">inputStream</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="481"><data key="reference"></data><data key="modifier">public</data><data key="text">public String getMethodModifier(MethodInfo method) {
    int accessFlags = method.getAccessFlags();
    return isPrivate(accessFlags) ? "private" : isProtected(accessFlags) ? "protected" : isPublic(accessFlags) ? "public" : "";
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="240"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="482"><data key="reference">userDefinedMethodName</data><data key="identifier">getMethodModifier</data><data key="text">getMethodModifier</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="241"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="483"><data key="reference"></data><data key="modifier"></data><data key="text">MethodInfo method</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="242"><data key="reference"></data><data key="text">{
    return getAnnotationNames((AnnotationsAttribute) method.getAttribute(AnnotationsAttribute.visibleTag), includeInvisibleTag ? (AnnotationsAttribute) method.getAttribute(AnnotationsAttribute.invisibleTag) : null);
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="484"><data key="reference"></data><data key="text">MethodInfo</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="243"><data key="reference"></data><data key="text">return getAnnotationNames((AnnotationsAttribute) method.getAttribute(AnnotationsAttribute.visibleTag), includeInvisibleTag ? (AnnotationsAttribute) method.getAttribute(AnnotationsAttribute.invisibleTag) : null);</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="485"><data key="reference">nonQualifiedClassName</data><data key="identifier">MethodInfo</data><data key="text">MethodInfo</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="244"><data key="reference"></data><data key="text">getAnnotationNames((AnnotationsAttribute) method.getAttribute(AnnotationsAttribute.visibleTag), includeInvisibleTag ? (AnnotationsAttribute) method.getAttribute(AnnotationsAttribute.invisibleTag) : null)</data><data key="type">MethodCallExpr</data><data key="parentType">ReturnStmt</data></node><node id="486"><data key="reference">javassist.bytecode.MethodInfo</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="245"><data key="reference">otherMethodCall</data><data key="identifier">getAnnotationNames</data><data key="text">getAnnotationNames</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="487"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="246"><data key="reference"></data><data key="text">(AnnotationsAttribute) method.getAttribute(AnnotationsAttribute.visibleTag)</data><data key="type">CastExpr</data><data key="parentType">MethodCallExpr</data></node><node id="488"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="247"><data key="reference"></data><data key="text">AnnotationsAttribute</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="489"><data key="reference"></data><data key="text">{
    int accessFlags = method.getAccessFlags();
    return isPrivate(accessFlags) ? "private" : isProtected(accessFlags) ? "protected" : isPublic(accessFlags) ? "public" : "";
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="248"><data key="reference">nonQualifiedClassName</data><data key="identifier">AnnotationsAttribute</data><data key="text">AnnotationsAttribute</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="249"><data key="reference"></data><data key="text">method.getAttribute(AnnotationsAttribute.visibleTag)</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="490"><data key="reference"></data><data key="modifier"></data><data key="text">int accessFlags = method.getAccessFlags()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="491"><data key="reference"></data><data key="text">accessFlags = method.getAccessFlags()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="250"><data key="reference">javassist.bytecode.MethodInfo</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="492"><data key="reference"></data><data key="identifier">int</data><data key="text">int</data><data key="type">PrimitiveType</data><data key="parentType">VariableDeclarator</data></node><node id="251"><data key="reference">otherMethodCall</data><data key="identifier">getAttribute</data><data key="text">getAttribute</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="493"><data key="reference">int</data><data key="identifier">accessFlags</data><data key="text">accessFlags</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="252"><data key="reference"></data><data key="text">AnnotationsAttribute.visibleTag</data><data key="type">FieldAccessExpr</data><data key="parentType">MethodCallExpr</data></node><node id="494"><data key="reference"></data><data key="text">method.getAccessFlags()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="253"><data key="reference">UnknownType</data><data key="identifier">AnnotationsAttribute</data><data key="text">AnnotationsAttribute</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="495"><data key="reference">javassist.bytecode.MethodInfo</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="254"><data key="reference">java.lang.String</data><data key="identifier">visibleTag</data><data key="text">visibleTag</data><data key="type">SimpleName</data><data key="parentType">FieldAccessExpr</data></node><node id="496"><data key="reference">otherMethodCall</data><data key="identifier">getAccessFlags</data><data key="text">getAccessFlags</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="255"><data key="reference"></data><data key="text">includeInvisibleTag ? (AnnotationsAttribute) method.getAttribute(AnnotationsAttribute.invisibleTag) : null</data><data key="type">ConditionalExpr</data><data key="parentType">MethodCallExpr</data></node><node id="497"><data key="reference"></data><data key="text">return isPrivate(accessFlags) ? "private" : isProtected(accessFlags) ? "protected" : isPublic(accessFlags) ? "public" : "";</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="256"><data key="reference">boolean</data><data key="identifier">includeInvisibleTag</data><data key="text">includeInvisibleTag</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="498"><data key="reference"></data><data key="text">isPrivate(accessFlags) ? "private" : isProtected(accessFlags) ? "protected" : isPublic(accessFlags) ? "public" : ""</data><data key="type">ConditionalExpr</data><data key="parentType">ReturnStmt</data></node><node id="257"><data key="reference"></data><data key="text">(AnnotationsAttribute) method.getAttribute(AnnotationsAttribute.invisibleTag)</data><data key="type">CastExpr</data><data key="parentType">ConditionalExpr</data></node><node id="499"><data key="reference"></data><data key="text">isPrivate(accessFlags)</data><data key="type">MethodCallExpr</data><data key="parentType">ConditionalExpr</data></node><node id="258"><data key="reference"></data><data key="text">AnnotationsAttribute</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="259"><data key="reference">nonQualifiedClassName</data><data key="identifier">AnnotationsAttribute</data><data key="text">AnnotationsAttribute</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="260"><data key="reference"></data><data key="text">method.getAttribute(AnnotationsAttribute.invisibleTag)</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="261"><data key="reference">javassist.bytecode.MethodInfo</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="262"><data key="reference">otherMethodCall</data><data key="identifier">getAttribute</data><data key="text">getAttribute</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="263"><data key="reference"></data><data key="text">AnnotationsAttribute.invisibleTag</data><data key="type">FieldAccessExpr</data><data key="parentType">MethodCallExpr</data></node><node id="264"><data key="reference">UnknownType</data><data key="identifier">AnnotationsAttribute</data><data key="text">AnnotationsAttribute</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="265"><data key="reference">java.lang.String</data><data key="identifier">invisibleTag</data><data key="text">invisibleTag</data><data key="type">SimpleName</data><data key="parentType">FieldAccessExpr</data></node><node id="266"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">ConditionalExpr</data></node><node id="267"><data key="reference"></data><data key="modifier">public</data><data key="text">public List&lt;String&gt; getParameterAnnotationNames(final MethodInfo method, final int parameterIndex) {
    List&lt;String&gt; result = Lists.newArrayList();
    List&lt;ParameterAnnotationsAttribute&gt; parameterAnnotationsAttributes = Lists.newArrayList((ParameterAnnotationsAttribute) method.getAttribute(ParameterAnnotationsAttribute.visibleTag), (ParameterAnnotationsAttribute) method.getAttribute(ParameterAnnotationsAttribute.invisibleTag));
    if (parameterAnnotationsAttributes != null) {
        for (ParameterAnnotationsAttribute parameterAnnotationsAttribute : parameterAnnotationsAttributes) {
            if (parameterAnnotationsAttribute != null) {
                Annotation[][] annotations = parameterAnnotationsAttribute.getAnnotations();
                if (parameterIndex &lt; annotations.length) {
                    Annotation[] annotation = annotations[parameterIndex];
                    result.addAll(getAnnotationNames(annotation));
                }
            }
        }
    }
    return result;
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="268"><data key="reference">userDefinedMethodName</data><data key="identifier">getParameterAnnotationNames</data><data key="text">getParameterAnnotationNames</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="269"><data key="reference"></data><data key="modifier">final</data><data key="text">final MethodInfo method</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="270"><data key="reference"></data><data key="text">MethodInfo</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="271"><data key="reference">nonQualifiedClassName</data><data key="identifier">MethodInfo</data><data key="text">MethodInfo</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="272"><data key="reference">javassist.bytecode.MethodInfo</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="273"><data key="reference"></data><data key="modifier">final</data><data key="text">final int parameterIndex</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="274"><data key="reference"></data><data key="identifier">int</data><data key="text">int</data><data key="type">PrimitiveType</data><data key="parentType">Parameter</data></node><node id="275"><data key="reference">int</data><data key="identifier">parameterIndex</data><data key="text">parameterIndex</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="276"><data key="reference"></data><data key="text">List&lt;String&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="277"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="278"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="279"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="280"><data key="reference"></data><data key="text">{
    List&lt;String&gt; result = Lists.newArrayList();
    List&lt;ParameterAnnotationsAttribute&gt; parameterAnnotationsAttributes = Lists.newArrayList((ParameterAnnotationsAttribute) method.getAttribute(ParameterAnnotationsAttribute.visibleTag), (ParameterAnnotationsAttribute) method.getAttribute(ParameterAnnotationsAttribute.invisibleTag));
    if (parameterAnnotationsAttributes != null) {
        for (ParameterAnnotationsAttribute parameterAnnotationsAttribute : parameterAnnotationsAttributes) {
            if (parameterAnnotationsAttribute != null) {
                Annotation[][] annotations = parameterAnnotationsAttribute.getAnnotations();
                if (parameterIndex &lt; annotations.length) {
                    Annotation[] annotation = annotations[parameterIndex];
                    result.addAll(getAnnotationNames(annotation));
                }
            }
        }
    }
    return result;
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="281"><data key="reference"></data><data key="modifier"></data><data key="text">List&lt;String&gt; result = Lists.newArrayList()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="282"><data key="reference"></data><data key="text">result = Lists.newArrayList()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="283"><data key="reference"></data><data key="text">List&lt;String&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="284"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="285"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="286"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="287"><data key="reference">java.util.List</data><data key="identifier">result</data><data key="text">result</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="288"><data key="reference"></data><data key="text">Lists.newArrayList()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="289"><data key="reference">UnknownType</data><data key="identifier">Lists</data><data key="text">Lists</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="290"><data key="reference">otherMethodCall</data><data key="identifier">newArrayList</data><data key="text">newArrayList</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="291"><data key="reference"></data><data key="modifier"></data><data key="text">List&lt;ParameterAnnotationsAttribute&gt; parameterAnnotationsAttributes = Lists.newArrayList((ParameterAnnotationsAttribute) method.getAttribute(ParameterAnnotationsAttribute.visibleTag), (ParameterAnnotationsAttribute) method.getAttribute(ParameterAnnotationsAttribute.invisibleTag))</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="292"><data key="reference"></data><data key="text">parameterAnnotationsAttributes = Lists.newArrayList((ParameterAnnotationsAttribute) method.getAttribute(ParameterAnnotationsAttribute.visibleTag), (ParameterAnnotationsAttribute) method.getAttribute(ParameterAnnotationsAttribute.invisibleTag))</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="293"><data key="reference"></data><data key="text">List&lt;ParameterAnnotationsAttribute&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="294"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="295"><data key="reference"></data><data key="text">ParameterAnnotationsAttribute</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="296"><data key="reference">nonQualifiedClassName</data><data key="identifier">ParameterAnnotationsAttribute</data><data key="text">ParameterAnnotationsAttribute</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="297"><data key="reference">java.util.List</data><data key="identifier">parameterAnnotationsAttributes</data><data key="text">parameterAnnotationsAttributes</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="298"><data key="reference"></data><data key="text">Lists.newArrayList((ParameterAnnotationsAttribute) method.getAttribute(ParameterAnnotationsAttribute.visibleTag), (ParameterAnnotationsAttribute) method.getAttribute(ParameterAnnotationsAttribute.invisibleTag))</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="299"><data key="reference">UnknownType</data><data key="identifier">Lists</data><data key="text">Lists</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="900"><data key="reference">nonQualifiedClassName</data><data key="identifier">FieldInfo</data><data key="text">FieldInfo</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="901"><data key="reference"></data><data key="text">MethodInfo</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="902"><data key="reference">nonQualifiedClassName</data><data key="identifier">MethodInfo</data><data key="text">MethodInfo</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="700"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="701"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="702"><data key="reference">java.util.List</data><data key="identifier">result</data><data key="text">result</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="703"><data key="reference"></data><data key="text">Lists.newArrayList()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="704"><data key="reference">UnknownType</data><data key="identifier">Lists</data><data key="text">Lists</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="705"><data key="reference">otherMethodCall</data><data key="identifier">newArrayList</data><data key="text">newArrayList</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="706"><data key="reference"></data><data key="text">if (annotationsAttributes != null) {
    for (AnnotationsAttribute annotationsAttribute : annotationsAttributes) {
        if (annotationsAttribute != null) {
            for (Annotation annotation : annotationsAttribute.getAnnotations()) {
                result.add(annotation.getTypeName());
            }
        }
    }
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="707"><data key="reference"></data><data key="text">annotationsAttributes != null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="708"><data key="reference">javassist.bytecode.AnnotationsAttribute[]</data><data key="identifier">annotationsAttributes</data><data key="text">annotationsAttributes</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="709"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="710"><data key="reference"></data><data key="text">{
    for (AnnotationsAttribute annotationsAttribute : annotationsAttributes) {
        if (annotationsAttribute != null) {
            for (Annotation annotation : annotationsAttribute.getAnnotations()) {
                result.add(annotation.getTypeName());
            }
        }
    }
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="711"><data key="reference"></data><data key="text">for (AnnotationsAttribute annotationsAttribute : annotationsAttributes) {
    if (annotationsAttribute != null) {
        for (Annotation annotation : annotationsAttribute.getAnnotations()) {
            result.add(annotation.getTypeName());
        }
    }
}</data><data key="type">ForeachStmt</data><data key="parentType">BlockStmt</data></node><node id="712"><data key="reference"></data><data key="modifier"></data><data key="text">AnnotationsAttribute annotationsAttribute</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForeachStmt</data></node><node id="713"><data key="reference"></data><data key="text">annotationsAttribute</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="714"><data key="reference"></data><data key="text">AnnotationsAttribute</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="715"><data key="reference">nonQualifiedClassName</data><data key="identifier">AnnotationsAttribute</data><data key="text">AnnotationsAttribute</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="716"><data key="reference">javassist.bytecode.AnnotationsAttribute</data><data key="identifier">annotationsAttribute</data><data key="text">annotationsAttribute</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="717"><data key="reference">javassist.bytecode.AnnotationsAttribute[]</data><data key="identifier">annotationsAttributes</data><data key="text">annotationsAttributes</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="718"><data key="reference"></data><data key="text">{
    if (annotationsAttribute != null) {
        for (Annotation annotation : annotationsAttribute.getAnnotations()) {
            result.add(annotation.getTypeName());
        }
    }
}</data><data key="type">BlockStmt</data><data key="parentType">ForeachStmt</data></node><node id="719"><data key="reference"></data><data key="text">if (annotationsAttribute != null) {
    for (Annotation annotation : annotationsAttribute.getAnnotations()) {
        result.add(annotation.getTypeName());
    }
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="720"><data key="reference"></data><data key="text">annotationsAttribute != null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="721"><data key="reference">javassist.bytecode.AnnotationsAttribute</data><data key="identifier">annotationsAttribute</data><data key="text">annotationsAttribute</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="722"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="723"><data key="reference"></data><data key="text">{
    for (Annotation annotation : annotationsAttribute.getAnnotations()) {
        result.add(annotation.getTypeName());
    }
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="724"><data key="reference"></data><data key="text">for (Annotation annotation : annotationsAttribute.getAnnotations()) {
    result.add(annotation.getTypeName());
}</data><data key="type">ForeachStmt</data><data key="parentType">BlockStmt</data></node><node id="725"><data key="reference"></data><data key="modifier"></data><data key="text">Annotation annotation</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForeachStmt</data></node><node id="726"><data key="reference"></data><data key="text">annotation</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="727"><data key="reference"></data><data key="text">Annotation</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="728"><data key="reference">nonQualifiedClassName</data><data key="identifier">Annotation</data><data key="text">Annotation</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="729"><data key="reference">javassist.bytecode.annotation.Annotation</data><data key="identifier">annotation</data><data key="text">annotation</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="730"><data key="reference"></data><data key="text">annotationsAttribute.getAnnotations()</data><data key="type">MethodCallExpr</data><data key="parentType">ForeachStmt</data></node><node id="731"><data key="reference">javassist.bytecode.AnnotationsAttribute</data><data key="identifier">annotationsAttribute</data><data key="text">annotationsAttribute</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="732"><data key="reference">otherMethodCall</data><data key="identifier">getAnnotations</data><data key="text">getAnnotations</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="733"><data key="reference"></data><data key="text">{
    result.add(annotation.getTypeName());
}</data><data key="type">BlockStmt</data><data key="parentType">ForeachStmt</data></node><node id="734"><data key="reference"></data><data key="text">result.add(annotation.getTypeName())</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="735"><data key="reference">java.util.List</data><data key="identifier">result</data><data key="text">result</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="736"><data key="reference">otherMethodCall</data><data key="identifier">add</data><data key="text">add</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="737"><data key="reference"></data><data key="text">annotation.getTypeName()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="738"><data key="reference">javassist.bytecode.annotation.Annotation</data><data key="identifier">annotation</data><data key="text">annotation</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="739"><data key="reference">otherMethodCall</data><data key="identifier">getTypeName</data><data key="text">getTypeName</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="740"><data key="reference"></data><data key="text">return result;</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="741"><data key="reference">java.util.List</data><data key="identifier">result</data><data key="text">result</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="500"><data key="reference">otherMethodCall</data><data key="identifier">isPrivate</data><data key="text">isPrivate</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="742"><data key="reference"></data><data key="modifier">private</data><data key="text">private List&lt;String&gt; getAnnotationNames(final Annotation[] annotations) {
    List&lt;String&gt; result = Lists.newArrayList();
    for (Annotation annotation : annotations) {
        result.add(annotation.getTypeName());
    }
    return result;
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="501"><data key="reference">int</data><data key="identifier">accessFlags</data><data key="text">accessFlags</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="743"><data key="reference">userDefinedMethodName</data><data key="identifier">getAnnotationNames</data><data key="text">getAnnotationNames</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="502"><data key="reference"></data><data key="identifier">private</data><data key="text">"private"</data><data key="type">StringLiteralExpr</data><data key="parentType">ConditionalExpr</data></node><node id="744"><data key="reference"></data><data key="modifier">final</data><data key="text">final Annotation[] annotations</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="503"><data key="reference"></data><data key="text">isProtected(accessFlags) ? "protected" : isPublic(accessFlags) ? "public" : ""</data><data key="type">ConditionalExpr</data><data key="parentType">ConditionalExpr</data></node><node id="745"><data key="reference"></data><data key="text">Annotation[]</data><data key="type">ArrayType</data><data key="parentType">Parameter</data></node><node id="504"><data key="reference"></data><data key="text">isProtected(accessFlags)</data><data key="type">MethodCallExpr</data><data key="parentType">ConditionalExpr</data></node><node id="746"><data key="reference"></data><data key="text">Annotation</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayType</data></node><node id="505"><data key="reference">otherMethodCall</data><data key="identifier">isProtected</data><data key="text">isProtected</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="747"><data key="reference">nonQualifiedClassName</data><data key="identifier">Annotation</data><data key="text">Annotation</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="506"><data key="reference">int</data><data key="identifier">accessFlags</data><data key="text">accessFlags</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="748"><data key="reference">javassist.bytecode.annotation.Annotation[]</data><data key="identifier">annotations</data><data key="text">annotations</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="507"><data key="reference"></data><data key="identifier">protected</data><data key="text">"protected"</data><data key="type">StringLiteralExpr</data><data key="parentType">ConditionalExpr</data></node><node id="749"><data key="reference"></data><data key="text">List&lt;String&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="508"><data key="reference"></data><data key="text">isPublic(accessFlags) ? "public" : ""</data><data key="type">ConditionalExpr</data><data key="parentType">ConditionalExpr</data></node><node id="509"><data key="reference"></data><data key="text">isPublic(accessFlags)</data><data key="type">MethodCallExpr</data><data key="parentType">ConditionalExpr</data></node><node id="750"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="751"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="510"><data key="reference">otherMethodCall</data><data key="identifier">isPublic</data><data key="text">isPublic</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="752"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="511"><data key="reference">int</data><data key="identifier">accessFlags</data><data key="text">accessFlags</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="753"><data key="reference"></data><data key="text">{
    List&lt;String&gt; result = Lists.newArrayList();
    for (Annotation annotation : annotations) {
        result.add(annotation.getTypeName());
    }
    return result;
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="512"><data key="reference"></data><data key="identifier">public</data><data key="text">"public"</data><data key="type">StringLiteralExpr</data><data key="parentType">ConditionalExpr</data></node><node id="754"><data key="reference"></data><data key="modifier"></data><data key="text">List&lt;String&gt; result = Lists.newArrayList()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="513"><data key="reference"></data><data key="identifier"></data><data key="text">""</data><data key="type">StringLiteralExpr</data><data key="parentType">ConditionalExpr</data></node><node id="755"><data key="reference"></data><data key="text">result = Lists.newArrayList()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="514"><data key="reference"></data><data key="modifier">public</data><data key="text">public String getMethodKey(ClassFile cls, MethodInfo method) {
    return getMethodName(method) + "(" + Joiner.on(", ").join(getParameterNames(method)) + ")";
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="756"><data key="reference"></data><data key="text">List&lt;String&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="515"><data key="reference">userDefinedMethodName</data><data key="identifier">getMethodKey</data><data key="text">getMethodKey</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="757"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="516"><data key="reference"></data><data key="modifier"></data><data key="text">ClassFile cls</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="758"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="517"><data key="reference"></data><data key="text">ClassFile</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="759"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="518"><data key="reference">nonQualifiedClassName</data><data key="identifier">ClassFile</data><data key="text">ClassFile</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="519"><data key="reference">javassist.bytecode.ClassFile</data><data key="identifier">cls</data><data key="text">cls</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="760"><data key="reference">java.util.List</data><data key="identifier">result</data><data key="text">result</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="761"><data key="reference"></data><data key="text">Lists.newArrayList()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="520"><data key="reference"></data><data key="modifier"></data><data key="text">MethodInfo method</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="762"><data key="reference">UnknownType</data><data key="identifier">Lists</data><data key="text">Lists</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="521"><data key="reference"></data><data key="text">MethodInfo</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="763"><data key="reference">otherMethodCall</data><data key="identifier">newArrayList</data><data key="text">newArrayList</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="522"><data key="reference">nonQualifiedClassName</data><data key="identifier">MethodInfo</data><data key="text">MethodInfo</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="764"><data key="reference"></data><data key="text">for (Annotation annotation : annotations) {
    result.add(annotation.getTypeName());
}</data><data key="type">ForeachStmt</data><data key="parentType">BlockStmt</data></node><node id="523"><data key="reference">javassist.bytecode.MethodInfo</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="765"><data key="reference"></data><data key="modifier"></data><data key="text">Annotation annotation</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForeachStmt</data></node><node id="524"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="766"><data key="reference"></data><data key="text">annotation</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="525"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="767"><data key="reference"></data><data key="text">Annotation</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="526"><data key="reference"></data><data key="text">{
    return getMethodName(method) + "(" + Joiner.on(", ").join(getParameterNames(method)) + ")";
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="768"><data key="reference">nonQualifiedClassName</data><data key="identifier">Annotation</data><data key="text">Annotation</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="527"><data key="reference"></data><data key="text">return getMethodName(method) + "(" + Joiner.on(", ").join(getParameterNames(method)) + ")";</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="769"><data key="reference">javassist.bytecode.annotation.Annotation</data><data key="identifier">annotation</data><data key="text">annotation</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="528"><data key="reference"></data><data key="text">getMethodName(method) + "(" + Joiner.on(", ").join(getParameterNames(method)) + ")"</data><data key="type">BinaryExpr</data><data key="parentType">ReturnStmt</data></node><node id="529"><data key="reference"></data><data key="text">getMethodName(method) + "(" + Joiner.on(", ").join(getParameterNames(method))</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="770"><data key="reference">javassist.bytecode.annotation.Annotation[]</data><data key="identifier">annotations</data><data key="text">annotations</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="771"><data key="reference"></data><data key="text">{
    result.add(annotation.getTypeName());
}</data><data key="type">BlockStmt</data><data key="parentType">ForeachStmt</data></node><node id="530"><data key="reference"></data><data key="text">getMethodName(method) + "("</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="772"><data key="reference"></data><data key="text">result.add(annotation.getTypeName())</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="531"><data key="reference"></data><data key="text">getMethodName(method)</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="773"><data key="reference">java.util.List</data><data key="identifier">result</data><data key="text">result</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="532"><data key="reference">otherMethodCall</data><data key="identifier">getMethodName</data><data key="text">getMethodName</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="774"><data key="reference">otherMethodCall</data><data key="identifier">add</data><data key="text">add</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="533"><data key="reference">javassist.bytecode.MethodInfo</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="775"><data key="reference"></data><data key="text">annotation.getTypeName()</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="534"><data key="reference"></data><data key="identifier">(</data><data key="text">"("</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="776"><data key="reference">javassist.bytecode.annotation.Annotation</data><data key="identifier">annotation</data><data key="text">annotation</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="535"><data key="reference"></data><data key="text">Joiner.on(", ").join(getParameterNames(method))</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="777"><data key="reference">otherMethodCall</data><data key="identifier">getTypeName</data><data key="text">getTypeName</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="536"><data key="reference"></data><data key="text">Joiner.on(", ")</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="778"><data key="reference"></data><data key="text">return result;</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="537"><data key="reference">UnknownType</data><data key="identifier">Joiner</data><data key="text">Joiner</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="779"><data key="reference">java.util.List</data><data key="identifier">result</data><data key="text">result</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="538"><data key="reference">otherMethodCall</data><data key="identifier">on</data><data key="text">on</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="539"><data key="reference"></data><data key="identifier">, </data><data key="text">", "</data><data key="type">StringLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="780"><data key="reference"></data><data key="modifier">private</data><data key="text">private List&lt;String&gt; splitDescriptorToTypeNames(final String descriptors) {
    List&lt;String&gt; result = Lists.newArrayList();
    if (descriptors != null &amp;&amp; descriptors.length() != 0) {
        List&lt;Integer&gt; indices = Lists.newArrayList();
        Descriptor.Iterator iterator = new Descriptor.Iterator(descriptors);
        while (iterator.hasNext()) {
            indices.add(iterator.next());
        }
        indices.add(descriptors.length());
        for (int i = 0; i &lt; indices.size() - 1; i++) {
            String s1 = Descriptor.toString(descriptors.substring(indices.get(i), indices.get(i + 1)));
            result.add(s1);
        }
    }
    return result;
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="781"><data key="reference">userDefinedMethodName</data><data key="identifier">splitDescriptorToTypeNames</data><data key="text">splitDescriptorToTypeNames</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="540"><data key="reference">otherMethodCall</data><data key="identifier">join</data><data key="text">join</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="782"><data key="reference"></data><data key="modifier">final</data><data key="text">final String descriptors</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="541"><data key="reference"></data><data key="text">getParameterNames(method)</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="783"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="300"><data key="reference">otherMethodCall</data><data key="identifier">newArrayList</data><data key="text">newArrayList</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="542"><data key="reference">otherMethodCall</data><data key="identifier">getParameterNames</data><data key="text">getParameterNames</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="784"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="301"><data key="reference"></data><data key="text">(ParameterAnnotationsAttribute) method.getAttribute(ParameterAnnotationsAttribute.visibleTag)</data><data key="type">CastExpr</data><data key="parentType">MethodCallExpr</data></node><node id="543"><data key="reference">javassist.bytecode.MethodInfo</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="785"><data key="reference">java.lang.String</data><data key="identifier">descriptors</data><data key="text">descriptors</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="302"><data key="reference"></data><data key="text">ParameterAnnotationsAttribute</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="544"><data key="reference"></data><data key="identifier">)</data><data key="text">")"</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="786"><data key="reference"></data><data key="text">List&lt;String&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="303"><data key="reference">nonQualifiedClassName</data><data key="identifier">ParameterAnnotationsAttribute</data><data key="text">ParameterAnnotationsAttribute</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="545"><data key="reference"></data><data key="modifier">public</data><data key="text">public String getMethodFullKey(ClassFile cls, MethodInfo method) {
    return getClassName(cls) + "." + getMethodKey(cls, method);
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="787"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="304"><data key="reference"></data><data key="text">method.getAttribute(ParameterAnnotationsAttribute.visibleTag)</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="546"><data key="reference">userDefinedMethodName</data><data key="identifier">getMethodFullKey</data><data key="text">getMethodFullKey</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="788"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="305"><data key="reference">javassist.bytecode.MethodInfo</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="547"><data key="reference"></data><data key="modifier"></data><data key="text">ClassFile cls</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="789"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="306"><data key="reference">otherMethodCall</data><data key="identifier">getAttribute</data><data key="text">getAttribute</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="548"><data key="reference"></data><data key="text">ClassFile</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="307"><data key="reference"></data><data key="text">ParameterAnnotationsAttribute.visibleTag</data><data key="type">FieldAccessExpr</data><data key="parentType">MethodCallExpr</data></node><node id="549"><data key="reference">nonQualifiedClassName</data><data key="identifier">ClassFile</data><data key="text">ClassFile</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="308"><data key="reference">UnknownType</data><data key="identifier">ParameterAnnotationsAttribute</data><data key="text">ParameterAnnotationsAttribute</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="309"><data key="reference">java.lang.String</data><data key="identifier">visibleTag</data><data key="text">visibleTag</data><data key="type">SimpleName</data><data key="parentType">FieldAccessExpr</data></node><node id="790"><data key="reference"></data><data key="text">{
    List&lt;String&gt; result = Lists.newArrayList();
    if (descriptors != null &amp;&amp; descriptors.length() != 0) {
        List&lt;Integer&gt; indices = Lists.newArrayList();
        Descriptor.Iterator iterator = new Descriptor.Iterator(descriptors);
        while (iterator.hasNext()) {
            indices.add(iterator.next());
        }
        indices.add(descriptors.length());
        for (int i = 0; i &lt; indices.size() - 1; i++) {
            String s1 = Descriptor.toString(descriptors.substring(indices.get(i), indices.get(i + 1)));
            result.add(s1);
        }
    }
    return result;
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="791"><data key="reference"></data><data key="modifier"></data><data key="text">List&lt;String&gt; result = Lists.newArrayList()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="550"><data key="reference">javassist.bytecode.ClassFile</data><data key="identifier">cls</data><data key="text">cls</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="792"><data key="reference"></data><data key="text">result = Lists.newArrayList()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="551"><data key="reference"></data><data key="modifier"></data><data key="text">MethodInfo method</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="793"><data key="reference"></data><data key="text">List&lt;String&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="310"><data key="reference"></data><data key="text">(ParameterAnnotationsAttribute) method.getAttribute(ParameterAnnotationsAttribute.invisibleTag)</data><data key="type">CastExpr</data><data key="parentType">MethodCallExpr</data></node><node id="552"><data key="reference"></data><data key="text">MethodInfo</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="794"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="311"><data key="reference"></data><data key="text">ParameterAnnotationsAttribute</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="553"><data key="reference">nonQualifiedClassName</data><data key="identifier">MethodInfo</data><data key="text">MethodInfo</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="795"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="312"><data key="reference">nonQualifiedClassName</data><data key="identifier">ParameterAnnotationsAttribute</data><data key="text">ParameterAnnotationsAttribute</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="554"><data key="reference">javassist.bytecode.MethodInfo</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="796"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="313"><data key="reference"></data><data key="text">method.getAttribute(ParameterAnnotationsAttribute.invisibleTag)</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="555"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="797"><data key="reference">java.util.List</data><data key="identifier">result</data><data key="text">result</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="314"><data key="reference">javassist.bytecode.MethodInfo</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="556"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="798"><data key="reference"></data><data key="text">Lists.newArrayList()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="315"><data key="reference">otherMethodCall</data><data key="identifier">getAttribute</data><data key="text">getAttribute</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="557"><data key="reference"></data><data key="text">{
    return getClassName(cls) + "." + getMethodKey(cls, method);
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="799"><data key="reference">UnknownType</data><data key="identifier">Lists</data><data key="text">Lists</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="316"><data key="reference"></data><data key="text">ParameterAnnotationsAttribute.invisibleTag</data><data key="type">FieldAccessExpr</data><data key="parentType">MethodCallExpr</data></node><node id="558"><data key="reference"></data><data key="text">return getClassName(cls) + "." + getMethodKey(cls, method);</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="317"><data key="reference">UnknownType</data><data key="identifier">ParameterAnnotationsAttribute</data><data key="text">ParameterAnnotationsAttribute</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="559"><data key="reference"></data><data key="text">getClassName(cls) + "." + getMethodKey(cls, method)</data><data key="type">BinaryExpr</data><data key="parentType">ReturnStmt</data></node><node id="318"><data key="reference">java.lang.String</data><data key="identifier">invisibleTag</data><data key="text">invisibleTag</data><data key="type">SimpleName</data><data key="parentType">FieldAccessExpr</data></node><node id="319"><data key="reference"></data><data key="text">if (parameterAnnotationsAttributes != null) {
    for (ParameterAnnotationsAttribute parameterAnnotationsAttribute : parameterAnnotationsAttributes) {
        if (parameterAnnotationsAttribute != null) {
            Annotation[][] annotations = parameterAnnotationsAttribute.getAnnotations();
            if (parameterIndex &lt; annotations.length) {
                Annotation[] annotation = annotations[parameterIndex];
                result.addAll(getAnnotationNames(annotation));
            }
        }
    }
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="560"><data key="reference"></data><data key="text">getClassName(cls) + "."</data><data key="type">BinaryExpr</data><data key="parentType">BinaryExpr</data></node><node id="561"><data key="reference"></data><data key="text">getClassName(cls)</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="320"><data key="reference"></data><data key="text">parameterAnnotationsAttributes != null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="562"><data key="reference">otherMethodCall</data><data key="identifier">getClassName</data><data key="text">getClassName</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="321"><data key="reference">java.util.List</data><data key="identifier">parameterAnnotationsAttributes</data><data key="text">parameterAnnotationsAttributes</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="563"><data key="reference">javassist.bytecode.ClassFile</data><data key="identifier">cls</data><data key="text">cls</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="322"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="564"><data key="reference"></data><data key="identifier">.</data><data key="text">"."</data><data key="type">StringLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="323"><data key="reference"></data><data key="text">{
    for (ParameterAnnotationsAttribute parameterAnnotationsAttribute : parameterAnnotationsAttributes) {
        if (parameterAnnotationsAttribute != null) {
            Annotation[][] annotations = parameterAnnotationsAttribute.getAnnotations();
            if (parameterIndex &lt; annotations.length) {
                Annotation[] annotation = annotations[parameterIndex];
                result.addAll(getAnnotationNames(annotation));
            }
        }
    }
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="565"><data key="reference"></data><data key="text">getMethodKey(cls, method)</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="324"><data key="reference"></data><data key="text">for (ParameterAnnotationsAttribute parameterAnnotationsAttribute : parameterAnnotationsAttributes) {
    if (parameterAnnotationsAttribute != null) {
        Annotation[][] annotations = parameterAnnotationsAttribute.getAnnotations();
        if (parameterIndex &lt; annotations.length) {
            Annotation[] annotation = annotations[parameterIndex];
            result.addAll(getAnnotationNames(annotation));
        }
    }
}</data><data key="type">ForeachStmt</data><data key="parentType">BlockStmt</data></node><node id="566"><data key="reference">otherMethodCall</data><data key="identifier">getMethodKey</data><data key="text">getMethodKey</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="325"><data key="reference"></data><data key="modifier"></data><data key="text">ParameterAnnotationsAttribute parameterAnnotationsAttribute</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ForeachStmt</data></node><node id="567"><data key="reference">javassist.bytecode.ClassFile</data><data key="identifier">cls</data><data key="text">cls</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="326"><data key="reference"></data><data key="text">parameterAnnotationsAttribute</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="568"><data key="reference">javassist.bytecode.MethodInfo</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="327"><data key="reference"></data><data key="text">ParameterAnnotationsAttribute</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="569"><data key="reference"></data><data key="modifier">public</data><data key="text">public boolean isPublic(Object o) {
    Integer accessFlags = o instanceof ClassFile ? ((ClassFile) o).getAccessFlags() : o instanceof FieldInfo ? ((FieldInfo) o).getAccessFlags() : o instanceof MethodInfo ? ((MethodInfo) o).getAccessFlags() : null;
    return accessFlags != null &amp;&amp; AccessFlag.isPublic(accessFlags);
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="328"><data key="reference">nonQualifiedClassName</data><data key="identifier">ParameterAnnotationsAttribute</data><data key="text">ParameterAnnotationsAttribute</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="329"><data key="reference">javassist.bytecode.ParameterAnnotationsAttribute</data><data key="identifier">parameterAnnotationsAttribute</data><data key="text">parameterAnnotationsAttribute</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="570"><data key="reference">userDefinedMethodName</data><data key="identifier">isPublic</data><data key="text">isPublic</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="571"><data key="reference"></data><data key="modifier"></data><data key="text">Object o</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="330"><data key="reference">java.util.List</data><data key="identifier">parameterAnnotationsAttributes</data><data key="text">parameterAnnotationsAttributes</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="572"><data key="reference"></data><data key="text">Object</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="331"><data key="reference"></data><data key="text">{
    if (parameterAnnotationsAttribute != null) {
        Annotation[][] annotations = parameterAnnotationsAttribute.getAnnotations();
        if (parameterIndex &lt; annotations.length) {
            Annotation[] annotation = annotations[parameterIndex];
            result.addAll(getAnnotationNames(annotation));
        }
    }
}</data><data key="type">BlockStmt</data><data key="parentType">ForeachStmt</data></node><node id="573"><data key="reference">nonQualifiedClassName</data><data key="identifier">Object</data><data key="text">Object</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="332"><data key="reference"></data><data key="text">if (parameterAnnotationsAttribute != null) {
    Annotation[][] annotations = parameterAnnotationsAttribute.getAnnotations();
    if (parameterIndex &lt; annotations.length) {
        Annotation[] annotation = annotations[parameterIndex];
        result.addAll(getAnnotationNames(annotation));
    }
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="574"><data key="reference">java.lang.Object</data><data key="identifier">o</data><data key="text">o</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="333"><data key="reference"></data><data key="text">parameterAnnotationsAttribute != null</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="575"><data key="reference"></data><data key="identifier">boolean</data><data key="text">boolean</data><data key="type">PrimitiveType</data><data key="parentType">MethodDeclaration</data></node><node id="334"><data key="reference">javassist.bytecode.ParameterAnnotationsAttribute</data><data key="identifier">parameterAnnotationsAttribute</data><data key="text">parameterAnnotationsAttribute</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="576"><data key="reference"></data><data key="text">{
    Integer accessFlags = o instanceof ClassFile ? ((ClassFile) o).getAccessFlags() : o instanceof FieldInfo ? ((FieldInfo) o).getAccessFlags() : o instanceof MethodInfo ? ((MethodInfo) o).getAccessFlags() : null;
    return accessFlags != null &amp;&amp; AccessFlag.isPublic(accessFlags);
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="335"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="577"><data key="reference"></data><data key="modifier"></data><data key="text">Integer accessFlags = o instanceof ClassFile ? ((ClassFile) o).getAccessFlags() : o instanceof FieldInfo ? ((FieldInfo) o).getAccessFlags() : o instanceof MethodInfo ? ((MethodInfo) o).getAccessFlags() : null</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="336"><data key="reference"></data><data key="text">{
    Annotation[][] annotations = parameterAnnotationsAttribute.getAnnotations();
    if (parameterIndex &lt; annotations.length) {
        Annotation[] annotation = annotations[parameterIndex];
        result.addAll(getAnnotationNames(annotation));
    }
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="578"><data key="reference"></data><data key="text">accessFlags = o instanceof ClassFile ? ((ClassFile) o).getAccessFlags() : o instanceof FieldInfo ? ((FieldInfo) o).getAccessFlags() : o instanceof MethodInfo ? ((MethodInfo) o).getAccessFlags() : null</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="337"><data key="reference"></data><data key="modifier"></data><data key="text">Annotation[][] annotations = parameterAnnotationsAttribute.getAnnotations()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="579"><data key="reference"></data><data key="text">Integer</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="338"><data key="reference"></data><data key="text">annotations = parameterAnnotationsAttribute.getAnnotations()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="339"><data key="reference"></data><data key="text">Annotation[][]</data><data key="type">ArrayType</data><data key="parentType">VariableDeclarator</data></node><node id="580"><data key="reference">nonQualifiedClassName</data><data key="identifier">Integer</data><data key="text">Integer</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="581"><data key="reference">java.lang.Integer</data><data key="identifier">accessFlags</data><data key="text">accessFlags</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="340"><data key="reference"></data><data key="text">Annotation[]</data><data key="type">ArrayType</data><data key="parentType">ArrayType</data></node><node id="582"><data key="reference"></data><data key="text">o instanceof ClassFile ? ((ClassFile) o).getAccessFlags() : o instanceof FieldInfo ? ((FieldInfo) o).getAccessFlags() : o instanceof MethodInfo ? ((MethodInfo) o).getAccessFlags() : null</data><data key="type">ConditionalExpr</data><data key="parentType">VariableDeclarator</data></node><node id="341"><data key="reference"></data><data key="text">Annotation</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayType</data></node><node id="583"><data key="reference"></data><data key="text">o instanceof ClassFile</data><data key="type">InstanceOfExpr</data><data key="parentType">ConditionalExpr</data></node><node id="100"><data key="reference">nonQualifiedClassName</data><data key="identifier">ClassFile</data><data key="text">ClassFile</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="342"><data key="reference">nonQualifiedClassName</data><data key="identifier">Annotation</data><data key="text">Annotation</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="584"><data key="reference">java.lang.Object</data><data key="identifier">o</data><data key="text">o</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="101"><data key="reference">javassist.bytecode.ClassFile</data><data key="identifier">cls</data><data key="text">cls</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="343"><data key="reference">javassist.bytecode.annotation.Annotation[][]</data><data key="identifier">annotations</data><data key="text">annotations</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="585"><data key="reference"></data><data key="text">ClassFile</data><data key="type">ClassOrInterfaceType</data><data key="parentType">InstanceOfExpr</data></node><node id="102"><data key="reference"></data><data key="text">List&lt;MethodInfo&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="344"><data key="reference"></data><data key="text">parameterAnnotationsAttribute.getAnnotations()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="586"><data key="reference">nonQualifiedClassName</data><data key="identifier">ClassFile</data><data key="text">ClassFile</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="103"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="345"><data key="reference">javassist.bytecode.ParameterAnnotationsAttribute</data><data key="identifier">parameterAnnotationsAttribute</data><data key="text">parameterAnnotationsAttribute</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="587"><data key="reference"></data><data key="text">((ClassFile) o).getAccessFlags()</data><data key="type">MethodCallExpr</data><data key="parentType">ConditionalExpr</data></node><node id="104"><data key="reference"></data><data key="text">MethodInfo</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="346"><data key="reference">otherMethodCall</data><data key="identifier">getAnnotations</data><data key="text">getAnnotations</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="588"><data key="reference"></data><data key="text">((ClassFile) o)</data><data key="type">EnclosedExpr</data><data key="parentType">MethodCallExpr</data></node><node id="105"><data key="reference">nonQualifiedClassName</data><data key="identifier">MethodInfo</data><data key="text">MethodInfo</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="347"><data key="reference"></data><data key="text">if (parameterIndex &lt; annotations.length) {
    Annotation[] annotation = annotations[parameterIndex];
    result.addAll(getAnnotationNames(annotation));
}</data><data key="type">IfStmt</data><data key="parentType">BlockStmt</data></node><node id="589"><data key="reference"></data><data key="text">(ClassFile) o</data><data key="type">CastExpr</data><data key="parentType">EnclosedExpr</data></node><node id="106"><data key="reference"></data><data key="text">{
    // noinspection unchecked
    return cls.getMethods();
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="348"><data key="reference"></data><data key="text">parameterIndex &lt; annotations.length</data><data key="type">BinaryExpr</data><data key="parentType">IfStmt</data></node><node id="107"><data key="reference"></data><data key="text">// noinspection unchecked
return cls.getMethods();</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="349"><data key="reference">int</data><data key="identifier">parameterIndex</data><data key="text">parameterIndex</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="108"><data key="reference"></data><data key="text">cls.getMethods()</data><data key="type">MethodCallExpr</data><data key="parentType">ReturnStmt</data></node><node id="109"><data key="reference">javassist.bytecode.ClassFile</data><data key="identifier">cls</data><data key="text">cls</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="590"><data key="reference"></data><data key="text">ClassFile</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="591"><data key="reference">nonQualifiedClassName</data><data key="identifier">ClassFile</data><data key="text">ClassFile</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="350"><data key="reference"></data><data key="text">annotations.length</data><data key="type">FieldAccessExpr</data><data key="parentType">BinaryExpr</data></node><node id="592"><data key="reference">java.lang.Object</data><data key="identifier">o</data><data key="text">o</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="351"><data key="reference">javassist.bytecode.annotation.Annotation[][]</data><data key="identifier">annotations</data><data key="text">annotations</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="593"><data key="reference">otherMethodCall</data><data key="identifier">getAccessFlags</data><data key="text">getAccessFlags</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="110"><data key="reference">otherMethodCall</data><data key="identifier">getMethods</data><data key="text">getMethods</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="352"><data key="reference">int</data><data key="identifier">length</data><data key="text">length</data><data key="type">SimpleName</data><data key="parentType">FieldAccessExpr</data></node><node id="594"><data key="reference"></data><data key="text">o instanceof FieldInfo ? ((FieldInfo) o).getAccessFlags() : o instanceof MethodInfo ? ((MethodInfo) o).getAccessFlags() : null</data><data key="type">ConditionalExpr</data><data key="parentType">ConditionalExpr</data></node><node id="111"><data key="reference"></data><data key="modifier">public</data><data key="text">public String getMethodName(final MethodInfo method) {
    return method.getName();
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="353"><data key="reference"></data><data key="text">{
    Annotation[] annotation = annotations[parameterIndex];
    result.addAll(getAnnotationNames(annotation));
}</data><data key="type">BlockStmt</data><data key="parentType">IfStmt</data></node><node id="595"><data key="reference"></data><data key="text">o instanceof FieldInfo</data><data key="type">InstanceOfExpr</data><data key="parentType">ConditionalExpr</data></node><node id="112"><data key="reference">userDefinedMethodName</data><data key="identifier">getMethodName</data><data key="text">getMethodName</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="354"><data key="reference"></data><data key="modifier"></data><data key="text">Annotation[] annotation = annotations[parameterIndex]</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="596"><data key="reference">java.lang.Object</data><data key="identifier">o</data><data key="text">o</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="113"><data key="reference"></data><data key="modifier">final</data><data key="text">final MethodInfo method</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="355"><data key="reference"></data><data key="text">annotation = annotations[parameterIndex]</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="597"><data key="reference"></data><data key="text">FieldInfo</data><data key="type">ClassOrInterfaceType</data><data key="parentType">InstanceOfExpr</data></node><node id="114"><data key="reference"></data><data key="text">MethodInfo</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="356"><data key="reference"></data><data key="text">Annotation[]</data><data key="type">ArrayType</data><data key="parentType">VariableDeclarator</data></node><node id="598"><data key="reference">nonQualifiedClassName</data><data key="identifier">FieldInfo</data><data key="text">FieldInfo</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="115"><data key="reference">nonQualifiedClassName</data><data key="identifier">MethodInfo</data><data key="text">MethodInfo</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="357"><data key="reference"></data><data key="text">Annotation</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ArrayType</data></node><node id="599"><data key="reference"></data><data key="text">((FieldInfo) o).getAccessFlags()</data><data key="type">MethodCallExpr</data><data key="parentType">ConditionalExpr</data></node><node id="116"><data key="reference">javassist.bytecode.MethodInfo</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="358"><data key="reference">nonQualifiedClassName</data><data key="identifier">Annotation</data><data key="text">Annotation</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="117"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="359"><data key="reference">javassist.bytecode.annotation.Annotation[]</data><data key="identifier">annotation</data><data key="text">annotation</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="118"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="119"><data key="reference"></data><data key="text">{
    return method.getName();
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="10"><data key="reference"></data><data key="identifier">google</data><data key="text">com.google</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="11"><data key="reference"></data><data key="identifier">com</data><data key="text">com</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="12"><data key="reference"></data><data key="text">import com.google.common.collect.Lists;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="13"><data key="reference"></data><data key="identifier">Lists</data><data key="text">com.google.common.collect.Lists</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="14"><data key="reference"></data><data key="identifier">collect</data><data key="text">com.google.common.collect</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="15"><data key="reference"></data><data key="identifier">common</data><data key="text">com.google.common</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="16"><data key="reference"></data><data key="identifier">google</data><data key="text">com.google</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="17"><data key="reference"></data><data key="identifier">com</data><data key="text">com</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="18"><data key="reference"></data><data key="modifier">*</data><data key="text">import javassist.bytecode.*;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="19"><data key="reference"></data><data key="identifier">bytecode</data><data key="text">javassist.bytecode</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="360"><data key="reference"></data><data key="text">annotations[parameterIndex]</data><data key="type">ArrayAccessExpr</data><data key="parentType">VariableDeclarator</data></node><node id="361"><data key="reference">javassist.bytecode.annotation.Annotation[][]</data><data key="identifier">annotations</data><data key="text">annotations</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="120"><data key="reference"></data><data key="text">return method.getName();</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="362"><data key="reference">int</data><data key="identifier">parameterIndex</data><data key="text">parameterIndex</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="121"><data key="reference"></data><data key="text">method.getName()</data><data key="type">MethodCallExpr</data><data key="parentType">ReturnStmt</data></node><node id="363"><data key="reference"></data><data key="text">result.addAll(getAnnotationNames(annotation))</data><data key="type">MethodCallExpr</data><data key="parentType">ExpressionStmt</data></node><node id="122"><data key="reference">javassist.bytecode.MethodInfo</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="364"><data key="reference">java.util.List</data><data key="identifier">result</data><data key="text">result</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="123"><data key="reference">otherMethodCall</data><data key="identifier">getName</data><data key="text">getName</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="365"><data key="reference">otherMethodCall</data><data key="identifier">addAll</data><data key="text">addAll</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="124"><data key="reference"></data><data key="modifier">public</data><data key="text">public List&lt;String&gt; getParameterNames(final MethodInfo method) {
    String descriptor = method.getDescriptor();
    descriptor = descriptor.substring(descriptor.indexOf("(") + 1, descriptor.lastIndexOf(")"));
    return splitDescriptorToTypeNames(descriptor);
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="366"><data key="reference"></data><data key="text">getAnnotationNames(annotation)</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="125"><data key="reference">userDefinedMethodName</data><data key="identifier">getParameterNames</data><data key="text">getParameterNames</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="367"><data key="reference">otherMethodCall</data><data key="identifier">getAnnotationNames</data><data key="text">getAnnotationNames</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="126"><data key="reference"></data><data key="modifier">final</data><data key="text">final MethodInfo method</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="368"><data key="reference">javassist.bytecode.annotation.Annotation[]</data><data key="identifier">annotation</data><data key="text">annotation</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="127"><data key="reference"></data><data key="text">MethodInfo</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="369"><data key="reference"></data><data key="text">return result;</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="128"><data key="reference">nonQualifiedClassName</data><data key="identifier">MethodInfo</data><data key="text">MethodInfo</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="129"><data key="reference">javassist.bytecode.MethodInfo</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="20"><data key="reference"></data><data key="identifier">javassist</data><data key="text">javassist</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="21"><data key="reference"></data><data key="text">import javassist.bytecode.annotation.Annotation;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="22"><data key="reference"></data><data key="identifier">Annotation</data><data key="text">javassist.bytecode.annotation.Annotation</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="23"><data key="reference"></data><data key="identifier">annotation</data><data key="text">javassist.bytecode.annotation</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="24"><data key="reference"></data><data key="identifier">bytecode</data><data key="text">javassist.bytecode</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="25"><data key="reference"></data><data key="identifier">javassist</data><data key="text">javassist</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="26"><data key="reference"></data><data key="text">import org.reflections.ReflectionsException;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="27"><data key="reference"></data><data key="identifier">ReflectionsException</data><data key="text">org.reflections.ReflectionsException</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="28"><data key="reference"></data><data key="identifier">reflections</data><data key="text">org.reflections</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="29"><data key="reference"></data><data key="identifier">org</data><data key="text">org</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="370"><data key="reference">java.util.List</data><data key="identifier">result</data><data key="text">result</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="371"><data key="reference"></data><data key="modifier">public</data><data key="text">public String getReturnTypeName(final MethodInfo method) {
    String descriptor = method.getDescriptor();
    descriptor = descriptor.substring(descriptor.lastIndexOf(")") + 1);
    return splitDescriptorToTypeNames(descriptor).get(0);
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="130"><data key="reference"></data><data key="text">List&lt;String&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="372"><data key="reference">userDefinedMethodName</data><data key="identifier">getReturnTypeName</data><data key="text">getReturnTypeName</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="131"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="373"><data key="reference"></data><data key="modifier">final</data><data key="text">final MethodInfo method</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="132"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="374"><data key="reference"></data><data key="text">MethodInfo</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="133"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="375"><data key="reference">nonQualifiedClassName</data><data key="identifier">MethodInfo</data><data key="text">MethodInfo</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="134"><data key="reference"></data><data key="text">{
    String descriptor = method.getDescriptor();
    descriptor = descriptor.substring(descriptor.indexOf("(") + 1, descriptor.lastIndexOf(")"));
    return splitDescriptorToTypeNames(descriptor);
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="376"><data key="reference">javassist.bytecode.MethodInfo</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="135"><data key="reference"></data><data key="modifier"></data><data key="text">String descriptor = method.getDescriptor()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="377"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="136"><data key="reference"></data><data key="text">descriptor = method.getDescriptor()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="378"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="137"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="379"><data key="reference"></data><data key="text">{
    String descriptor = method.getDescriptor();
    descriptor = descriptor.substring(descriptor.lastIndexOf(")") + 1);
    return splitDescriptorToTypeNames(descriptor).get(0);
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="138"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="139"><data key="reference">java.lang.String</data><data key="identifier">descriptor</data><data key="text">descriptor</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="30"><data key="reference"></data><data key="text">import org.reflections.util.Utils;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="31"><data key="reference"></data><data key="identifier">Utils</data><data key="text">org.reflections.util.Utils</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="32"><data key="reference"></data><data key="identifier">util</data><data key="text">org.reflections.util</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="33"><data key="reference"></data><data key="identifier">reflections</data><data key="text">org.reflections</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="34"><data key="reference"></data><data key="identifier">org</data><data key="text">org</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="35"><data key="reference"></data><data key="text">import org.reflections.vfs.Vfs;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="36"><data key="reference"></data><data key="identifier">Vfs</data><data key="text">org.reflections.vfs.Vfs</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="37"><data key="reference"></data><data key="identifier">vfs</data><data key="text">org.reflections.vfs</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="38"><data key="reference"></data><data key="identifier">reflections</data><data key="text">org.reflections</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="39"><data key="reference"></data><data key="identifier">org</data><data key="text">org</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="380"><data key="reference"></data><data key="modifier"></data><data key="text">String descriptor = method.getDescriptor()</data><data key="type">VariableDeclarationExpr</data><data key="parentType">ExpressionStmt</data></node><node id="381"><data key="reference"></data><data key="text">descriptor = method.getDescriptor()</data><data key="type">VariableDeclarator</data><data key="parentType">VariableDeclarationExpr</data></node><node id="140"><data key="reference"></data><data key="text">method.getDescriptor()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="382"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">VariableDeclarator</data></node><node id="141"><data key="reference">javassist.bytecode.MethodInfo</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="383"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="142"><data key="reference">otherMethodCall</data><data key="identifier">getDescriptor</data><data key="text">getDescriptor</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="384"><data key="reference">java.lang.String</data><data key="identifier">descriptor</data><data key="text">descriptor</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="143"><data key="reference"></data><data key="identifier">=</data><data key="text">descriptor = descriptor.substring(descriptor.indexOf("(") + 1, descriptor.lastIndexOf(")"))</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="385"><data key="reference"></data><data key="text">method.getDescriptor()</data><data key="type">MethodCallExpr</data><data key="parentType">VariableDeclarator</data></node><node id="144"><data key="reference">java.lang.String</data><data key="identifier">descriptor</data><data key="text">descriptor</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="386"><data key="reference">javassist.bytecode.MethodInfo</data><data key="identifier">method</data><data key="text">method</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="145"><data key="reference"></data><data key="text">descriptor.substring(descriptor.indexOf("(") + 1, descriptor.lastIndexOf(")"))</data><data key="type">MethodCallExpr</data><data key="parentType">AssignExpr</data></node><node id="387"><data key="reference">otherMethodCall</data><data key="identifier">getDescriptor</data><data key="text">getDescriptor</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="146"><data key="reference">java.lang.String</data><data key="identifier">descriptor</data><data key="text">descriptor</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="388"><data key="reference"></data><data key="identifier">=</data><data key="text">descriptor = descriptor.substring(descriptor.lastIndexOf(")") + 1)</data><data key="type">AssignExpr</data><data key="parentType">ExpressionStmt</data></node><node id="147"><data key="reference">otherMethodCall</data><data key="identifier">substring</data><data key="text">substring</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="389"><data key="reference">java.lang.String</data><data key="identifier">descriptor</data><data key="text">descriptor</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="148"><data key="reference"></data><data key="text">descriptor.indexOf("(") + 1</data><data key="type">BinaryExpr</data><data key="parentType">MethodCallExpr</data></node><node id="149"><data key="reference"></data><data key="text">descriptor.indexOf("(")</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="40"><data key="reference"></data><data key="text">import java.io.BufferedInputStream;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="41"><data key="reference"></data><data key="identifier">BufferedInputStream</data><data key="text">java.io.BufferedInputStream</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="42"><data key="reference"></data><data key="identifier">io</data><data key="text">java.io</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="43"><data key="reference"></data><data key="identifier">java</data><data key="text">java</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="44"><data key="reference"></data><data key="text">import java.io.DataInputStream;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="45"><data key="reference"></data><data key="identifier">DataInputStream</data><data key="text">java.io.DataInputStream</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="46"><data key="reference"></data><data key="identifier">io</data><data key="text">java.io</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="47"><data key="reference"></data><data key="identifier">java</data><data key="text">java</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="48"><data key="reference"></data><data key="text">import java.io.IOException;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="49"><data key="reference"></data><data key="identifier">IOException</data><data key="text">java.io.IOException</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="390"><data key="reference"></data><data key="text">descriptor.substring(descriptor.lastIndexOf(")") + 1)</data><data key="type">MethodCallExpr</data><data key="parentType">AssignExpr</data></node><node id="391"><data key="reference">java.lang.String</data><data key="identifier">descriptor</data><data key="text">descriptor</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="150"><data key="reference">java.lang.String</data><data key="identifier">descriptor</data><data key="text">descriptor</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="392"><data key="reference">otherMethodCall</data><data key="identifier">substring</data><data key="text">substring</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="151"><data key="reference">otherMethodCall</data><data key="identifier">indexOf</data><data key="text">indexOf</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="393"><data key="reference"></data><data key="text">descriptor.lastIndexOf(")") + 1</data><data key="type">BinaryExpr</data><data key="parentType">MethodCallExpr</data></node><node id="152"><data key="reference"></data><data key="identifier">(</data><data key="text">"("</data><data key="type">StringLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="394"><data key="reference"></data><data key="text">descriptor.lastIndexOf(")")</data><data key="type">MethodCallExpr</data><data key="parentType">BinaryExpr</data></node><node id="153"><data key="reference"></data><data key="identifier">1</data><data key="text">1</data><data key="type">IntegerLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="395"><data key="reference">java.lang.String</data><data key="identifier">descriptor</data><data key="text">descriptor</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="154"><data key="reference"></data><data key="text">descriptor.lastIndexOf(")")</data><data key="type">MethodCallExpr</data><data key="parentType">MethodCallExpr</data></node><node id="396"><data key="reference">otherMethodCall</data><data key="identifier">lastIndexOf</data><data key="text">lastIndexOf</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="155"><data key="reference">java.lang.String</data><data key="identifier">descriptor</data><data key="text">descriptor</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="397"><data key="reference"></data><data key="identifier">)</data><data key="text">")"</data><data key="type">StringLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="156"><data key="reference">otherMethodCall</data><data key="identifier">lastIndexOf</data><data key="text">lastIndexOf</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="398"><data key="reference"></data><data key="identifier">1</data><data key="text">1</data><data key="type">IntegerLiteralExpr</data><data key="parentType">BinaryExpr</data></node><node id="157"><data key="reference"></data><data key="identifier">)</data><data key="text">")"</data><data key="type">StringLiteralExpr</data><data key="parentType">MethodCallExpr</data></node><node id="399"><data key="reference"></data><data key="text">return splitDescriptorToTypeNames(descriptor).get(0);</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="158"><data key="reference"></data><data key="text">return splitDescriptorToTypeNames(descriptor);</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="159"><data key="reference"></data><data key="text">splitDescriptorToTypeNames(descriptor)</data><data key="type">MethodCallExpr</data><data key="parentType">ReturnStmt</data></node><node id="50"><data key="reference"></data><data key="identifier">io</data><data key="text">java.io</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="51"><data key="reference"></data><data key="identifier">java</data><data key="text">java</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="52"><data key="reference"></data><data key="text">import java.io.InputStream;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="53"><data key="reference"></data><data key="identifier">InputStream</data><data key="text">java.io.InputStream</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="54"><data key="reference"></data><data key="identifier">io</data><data key="text">java.io</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="55"><data key="reference"></data><data key="identifier">java</data><data key="text">java</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="56"><data key="reference"></data><data key="text">import java.util.Arrays;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="57"><data key="reference"></data><data key="identifier">Arrays</data><data key="text">java.util.Arrays</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="58"><data key="reference"></data><data key="identifier">util</data><data key="text">java.util</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="59"><data key="reference"></data><data key="identifier">java</data><data key="text">java</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="160"><data key="reference">otherMethodCall</data><data key="identifier">splitDescriptorToTypeNames</data><data key="text">splitDescriptorToTypeNames</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="161"><data key="reference">java.lang.String</data><data key="identifier">descriptor</data><data key="text">descriptor</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="162"><data key="reference"></data><data key="modifier">public</data><data key="text">public List&lt;String&gt; getClassAnnotationNames(final ClassFile aClass) {
    return getAnnotationNames((AnnotationsAttribute) aClass.getAttribute(AnnotationsAttribute.visibleTag), includeInvisibleTag ? (AnnotationsAttribute) aClass.getAttribute(AnnotationsAttribute.invisibleTag) : null);
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="163"><data key="reference">userDefinedMethodName</data><data key="identifier">getClassAnnotationNames</data><data key="text">getClassAnnotationNames</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="164"><data key="reference"></data><data key="modifier">final</data><data key="text">final ClassFile aClass</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="165"><data key="reference"></data><data key="text">ClassFile</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="166"><data key="reference">nonQualifiedClassName</data><data key="identifier">ClassFile</data><data key="text">ClassFile</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="167"><data key="reference">javassist.bytecode.ClassFile</data><data key="identifier">aClass</data><data key="text">aClass</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="168"><data key="reference"></data><data key="text">List&lt;String&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="169"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="60"><data key="reference"></data><data key="text">import java.util.List;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="61"><data key="reference"></data><data key="identifier">List</data><data key="text">java.util.List</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="62"><data key="reference"></data><data key="identifier">util</data><data key="text">java.util</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="63"><data key="reference"></data><data key="identifier">java</data><data key="text">java</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="64"><data key="reference"></data><data key="modifier">static</data><data key="text">import static javassist.bytecode.AccessFlag.isPrivate;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="65"><data key="reference"></data><data key="identifier">isPrivate</data><data key="text">javassist.bytecode.AccessFlag.isPrivate</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="66"><data key="reference"></data><data key="identifier">AccessFlag</data><data key="text">javassist.bytecode.AccessFlag</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="67"><data key="reference"></data><data key="identifier">bytecode</data><data key="text">javassist.bytecode</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="68"><data key="reference"></data><data key="identifier">javassist</data><data key="text">javassist</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="69"><data key="reference"></data><data key="modifier">static</data><data key="text">import static javassist.bytecode.AccessFlag.isProtected;
</data><data key="type">ImportDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="170"><data key="reference"></data><data key="text">String</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="171"><data key="reference">nonQualifiedClassName</data><data key="identifier">String</data><data key="text">String</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="172"><data key="reference"></data><data key="text">{
    return getAnnotationNames((AnnotationsAttribute) aClass.getAttribute(AnnotationsAttribute.visibleTag), includeInvisibleTag ? (AnnotationsAttribute) aClass.getAttribute(AnnotationsAttribute.invisibleTag) : null);
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="173"><data key="reference"></data><data key="text">return getAnnotationNames((AnnotationsAttribute) aClass.getAttribute(AnnotationsAttribute.visibleTag), includeInvisibleTag ? (AnnotationsAttribute) aClass.getAttribute(AnnotationsAttribute.invisibleTag) : null);</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="174"><data key="reference"></data><data key="text">getAnnotationNames((AnnotationsAttribute) aClass.getAttribute(AnnotationsAttribute.visibleTag), includeInvisibleTag ? (AnnotationsAttribute) aClass.getAttribute(AnnotationsAttribute.invisibleTag) : null)</data><data key="type">MethodCallExpr</data><data key="parentType">ReturnStmt</data></node><node id="175"><data key="reference">otherMethodCall</data><data key="identifier">getAnnotationNames</data><data key="text">getAnnotationNames</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="176"><data key="reference"></data><data key="text">(AnnotationsAttribute) aClass.getAttribute(AnnotationsAttribute.visibleTag)</data><data key="type">CastExpr</data><data key="parentType">MethodCallExpr</data></node><node id="177"><data key="reference"></data><data key="text">AnnotationsAttribute</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="178"><data key="reference">nonQualifiedClassName</data><data key="identifier">AnnotationsAttribute</data><data key="text">AnnotationsAttribute</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="179"><data key="reference"></data><data key="text">aClass.getAttribute(AnnotationsAttribute.visibleTag)</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="70"><data key="reference"></data><data key="identifier">isProtected</data><data key="text">javassist.bytecode.AccessFlag.isProtected</data><data key="type">Name</data><data key="parentType">ImportDeclaration</data></node><node id="71"><data key="reference"></data><data key="identifier">AccessFlag</data><data key="text">javassist.bytecode.AccessFlag</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="72"><data key="reference"></data><data key="identifier">bytecode</data><data key="text">javassist.bytecode</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="73"><data key="reference"></data><data key="identifier">javassist</data><data key="text">javassist</data><data key="type">Name</data><data key="parentType">Name</data></node><node id="74"><data key="reference"></data><data key="modifier">public</data><data key="text">/**
 */
public class JavassistAdapter implements MetadataAdapter&lt;ClassFile, FieldInfo, MethodInfo&gt; {

    /**
     *setting this to false will result in returning only visible annotations from the relevant methods here (only {@link java.lang.annotation.RetentionPolicy#RUNTIME})
     */
    public static boolean includeInvisibleTag = true;

    public List&lt;FieldInfo&gt; getFields(final ClassFile cls) {
        // noinspection unchecked
        return cls.getFields();
    }

    public List&lt;MethodInfo&gt; getMethods(final ClassFile cls) {
        // noinspection unchecked
        return cls.getMethods();
    }

    public String getMethodName(final MethodInfo method) {
        return method.getName();
    }

    public List&lt;String&gt; getParameterNames(final MethodInfo method) {
        String descriptor = method.getDescriptor();
        descriptor = descriptor.substring(descriptor.indexOf("(") + 1, descriptor.lastIndexOf(")"));
        return splitDescriptorToTypeNames(descriptor);
    }

    public List&lt;String&gt; getClassAnnotationNames(final ClassFile aClass) {
        return getAnnotationNames((AnnotationsAttribute) aClass.getAttribute(AnnotationsAttribute.visibleTag), includeInvisibleTag ? (AnnotationsAttribute) aClass.getAttribute(AnnotationsAttribute.invisibleTag) : null);
    }

    public List&lt;String&gt; getFieldAnnotationNames(final FieldInfo field) {
        return getAnnotationNames((AnnotationsAttribute) field.getAttribute(AnnotationsAttribute.visibleTag), includeInvisibleTag ? (AnnotationsAttribute) field.getAttribute(AnnotationsAttribute.invisibleTag) : null);
    }

    public List&lt;String&gt; getMethodAnnotationNames(final MethodInfo method) {
        return getAnnotationNames((AnnotationsAttribute) method.getAttribute(AnnotationsAttribute.visibleTag), includeInvisibleTag ? (AnnotationsAttribute) method.getAttribute(AnnotationsAttribute.invisibleTag) : null);
    }

    public List&lt;String&gt; getParameterAnnotationNames(final MethodInfo method, final int parameterIndex) {
        List&lt;String&gt; result = Lists.newArrayList();
        List&lt;ParameterAnnotationsAttribute&gt; parameterAnnotationsAttributes = Lists.newArrayList((ParameterAnnotationsAttribute) method.getAttribute(ParameterAnnotationsAttribute.visibleTag), (ParameterAnnotationsAttribute) method.getAttribute(ParameterAnnotationsAttribute.invisibleTag));
        if (parameterAnnotationsAttributes != null) {
            for (ParameterAnnotationsAttribute parameterAnnotationsAttribute : parameterAnnotationsAttributes) {
                if (parameterAnnotationsAttribute != null) {
                    Annotation[][] annotations = parameterAnnotationsAttribute.getAnnotations();
                    if (parameterIndex &lt; annotations.length) {
                        Annotation[] annotation = annotations[parameterIndex];
                        result.addAll(getAnnotationNames(annotation));
                    }
                }
            }
        }
        return result;
    }

    public String getReturnTypeName(final MethodInfo method) {
        String descriptor = method.getDescriptor();
        descriptor = descriptor.substring(descriptor.lastIndexOf(")") + 1);
        return splitDescriptorToTypeNames(descriptor).get(0);
    }

    public String getFieldName(final FieldInfo field) {
        return field.getName();
    }

    public ClassFile getOfCreateClassObject(final Vfs.File file) {
        InputStream inputStream = null;
        try {
            inputStream = file.openInputStream();
            DataInputStream dis = new DataInputStream(new BufferedInputStream(inputStream));
            return new ClassFile(dis);
        } catch (IOException e) {
            throw new ReflectionsException("could not create class file from " + file.getName(), e);
        } finally {
            Utils.close(inputStream);
        }
    }

    public String getMethodModifier(MethodInfo method) {
        int accessFlags = method.getAccessFlags();
        return isPrivate(accessFlags) ? "private" : isProtected(accessFlags) ? "protected" : isPublic(accessFlags) ? "public" : "";
    }

    public String getMethodKey(ClassFile cls, MethodInfo method) {
        return getMethodName(method) + "(" + Joiner.on(", ").join(getParameterNames(method)) + ")";
    }

    public String getMethodFullKey(ClassFile cls, MethodInfo method) {
        return getClassName(cls) + "." + getMethodKey(cls, method);
    }

    public boolean isPublic(Object o) {
        Integer accessFlags = o instanceof ClassFile ? ((ClassFile) o).getAccessFlags() : o instanceof FieldInfo ? ((FieldInfo) o).getAccessFlags() : o instanceof MethodInfo ? ((MethodInfo) o).getAccessFlags() : null;
        return accessFlags != null &amp;&amp; AccessFlag.isPublic(accessFlags);
    }

    // 
    public String getClassName(final ClassFile cls) {
        return cls.getName();
    }

    public String getSuperclassName(final ClassFile cls) {
        return cls.getSuperclass();
    }

    public List&lt;String&gt; getInterfacesNames(final ClassFile cls) {
        return Arrays.asList(cls.getInterfaces());
    }

    public boolean acceptsInput(String file) {
        return file.endsWith(".class");
    }

    // 
    private List&lt;String&gt; getAnnotationNames(final AnnotationsAttribute... annotationsAttributes) {
        List&lt;String&gt; result = Lists.newArrayList();
        if (annotationsAttributes != null) {
            for (AnnotationsAttribute annotationsAttribute : annotationsAttributes) {
                if (annotationsAttribute != null) {
                    for (Annotation annotation : annotationsAttribute.getAnnotations()) {
                        result.add(annotation.getTypeName());
                    }
                }
            }
        }
        return result;
    }

    private List&lt;String&gt; getAnnotationNames(final Annotation[] annotations) {
        List&lt;String&gt; result = Lists.newArrayList();
        for (Annotation annotation : annotations) {
            result.add(annotation.getTypeName());
        }
        return result;
    }

    private List&lt;String&gt; splitDescriptorToTypeNames(final String descriptors) {
        List&lt;String&gt; result = Lists.newArrayList();
        if (descriptors != null &amp;&amp; descriptors.length() != 0) {
            List&lt;Integer&gt; indices = Lists.newArrayList();
            Descriptor.Iterator iterator = new Descriptor.Iterator(descriptors);
            while (iterator.hasNext()) {
                indices.add(iterator.next());
            }
            indices.add(descriptors.length());
            for (int i = 0; i &lt; indices.size() - 1; i++) {
                String s1 = Descriptor.toString(descriptors.substring(indices.get(i), indices.get(i + 1)));
                result.add(s1);
            }
        }
        return result;
    }
}</data><data key="type">ClassOrInterfaceDeclaration</data><data key="parentType">CompilationUnit</data></node><node id="75"><data key="reference">java.lang.Object,org.reflections.adapters.MetadataAdapter</data><data key="identifier">JavassistAdapter</data><data key="text">JavassistAdapter</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="76"><data key="reference"></data><data key="modifier">public,static</data><data key="text">/**
 *setting this to false will result in returning only visible annotations from the relevant methods here (only {@link java.lang.annotation.RetentionPolicy#RUNTIME})
 */
public static boolean includeInvisibleTag = true;</data><data key="type">FieldDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="77"><data key="reference"></data><data key="text">includeInvisibleTag = true</data><data key="type">VariableDeclarator</data><data key="parentType">FieldDeclaration</data></node><node id="78"><data key="reference"></data><data key="identifier">boolean</data><data key="text">boolean</data><data key="type">PrimitiveType</data><data key="parentType">VariableDeclarator</data></node><node id="79"><data key="reference">boolean</data><data key="identifier">includeInvisibleTag</data><data key="text">includeInvisibleTag</data><data key="type">SimpleName</data><data key="parentType">VariableDeclarator</data></node><node id="180"><data key="reference">javassist.bytecode.ClassFile</data><data key="identifier">aClass</data><data key="text">aClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="181"><data key="reference">otherMethodCall</data><data key="identifier">getAttribute</data><data key="text">getAttribute</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="182"><data key="reference"></data><data key="text">AnnotationsAttribute.visibleTag</data><data key="type">FieldAccessExpr</data><data key="parentType">MethodCallExpr</data></node><node id="183"><data key="reference">UnknownType</data><data key="identifier">AnnotationsAttribute</data><data key="text">AnnotationsAttribute</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="184"><data key="reference">java.lang.String</data><data key="identifier">visibleTag</data><data key="text">visibleTag</data><data key="type">SimpleName</data><data key="parentType">FieldAccessExpr</data></node><node id="185"><data key="reference"></data><data key="text">includeInvisibleTag ? (AnnotationsAttribute) aClass.getAttribute(AnnotationsAttribute.invisibleTag) : null</data><data key="type">ConditionalExpr</data><data key="parentType">MethodCallExpr</data></node><node id="186"><data key="reference">boolean</data><data key="identifier">includeInvisibleTag</data><data key="text">includeInvisibleTag</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="187"><data key="reference"></data><data key="text">(AnnotationsAttribute) aClass.getAttribute(AnnotationsAttribute.invisibleTag)</data><data key="type">CastExpr</data><data key="parentType">ConditionalExpr</data></node><node id="188"><data key="reference"></data><data key="text">AnnotationsAttribute</data><data key="type">ClassOrInterfaceType</data><data key="parentType">CastExpr</data></node><node id="189"><data key="reference">nonQualifiedClassName</data><data key="identifier">AnnotationsAttribute</data><data key="text">AnnotationsAttribute</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="80"><data key="reference"></data><data key="identifier">true</data><data key="text">true</data><data key="type">BooleanLiteralExpr</data><data key="parentType">VariableDeclarator</data></node><node id="81"><data key="reference"></data><data key="modifier">public</data><data key="text">public List&lt;FieldInfo&gt; getFields(final ClassFile cls) {
    // noinspection unchecked
    return cls.getFields();
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="82"><data key="reference">userDefinedMethodName</data><data key="identifier">getFields</data><data key="text">getFields</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="83"><data key="reference"></data><data key="modifier">final</data><data key="text">final ClassFile cls</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="84"><data key="reference"></data><data key="text">ClassFile</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><node id="85"><data key="reference">nonQualifiedClassName</data><data key="identifier">ClassFile</data><data key="text">ClassFile</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="86"><data key="reference">javassist.bytecode.ClassFile</data><data key="identifier">cls</data><data key="text">cls</data><data key="type">SimpleName</data><data key="parentType">Parameter</data></node><node id="87"><data key="reference"></data><data key="text">List&lt;FieldInfo&gt;</data><data key="type">ClassOrInterfaceType</data><data key="parentType">MethodDeclaration</data></node><node id="88"><data key="reference">nonQualifiedClassName</data><data key="identifier">List</data><data key="text">List</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="89"><data key="reference"></data><data key="text">FieldInfo</data><data key="type">ClassOrInterfaceType</data><data key="parentType">ClassOrInterfaceType</data></node><node id="190"><data key="reference"></data><data key="text">aClass.getAttribute(AnnotationsAttribute.invisibleTag)</data><data key="type">MethodCallExpr</data><data key="parentType">CastExpr</data></node><node id="191"><data key="reference">javassist.bytecode.ClassFile</data><data key="identifier">aClass</data><data key="text">aClass</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="192"><data key="reference">otherMethodCall</data><data key="identifier">getAttribute</data><data key="text">getAttribute</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="193"><data key="reference"></data><data key="text">AnnotationsAttribute.invisibleTag</data><data key="type">FieldAccessExpr</data><data key="parentType">MethodCallExpr</data></node><node id="194"><data key="reference">UnknownType</data><data key="identifier">AnnotationsAttribute</data><data key="text">AnnotationsAttribute</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="195"><data key="reference">java.lang.String</data><data key="identifier">invisibleTag</data><data key="text">invisibleTag</data><data key="type">SimpleName</data><data key="parentType">FieldAccessExpr</data></node><node id="196"><data key="reference"></data><data key="text">null</data><data key="type">NullLiteralExpr</data><data key="parentType">ConditionalExpr</data></node><node id="197"><data key="reference"></data><data key="modifier">public</data><data key="text">public List&lt;String&gt; getFieldAnnotationNames(final FieldInfo field) {
    return getAnnotationNames((AnnotationsAttribute) field.getAttribute(AnnotationsAttribute.visibleTag), includeInvisibleTag ? (AnnotationsAttribute) field.getAttribute(AnnotationsAttribute.invisibleTag) : null);
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="198"><data key="reference">userDefinedMethodName</data><data key="identifier">getFieldAnnotationNames</data><data key="text">getFieldAnnotationNames</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="199"><data key="reference"></data><data key="modifier">final</data><data key="text">final FieldInfo field</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="90"><data key="reference">nonQualifiedClassName</data><data key="identifier">FieldInfo</data><data key="text">FieldInfo</data><data key="type">SimpleName</data><data key="parentType">ClassOrInterfaceType</data></node><node id="91"><data key="reference"></data><data key="text">{
    // noinspection unchecked
    return cls.getFields();
}</data><data key="type">BlockStmt</data><data key="parentType">MethodDeclaration</data></node><node id="92"><data key="reference"></data><data key="text">// noinspection unchecked
return cls.getFields();</data><data key="type">ReturnStmt</data><data key="parentType">BlockStmt</data></node><node id="93"><data key="reference"></data><data key="text">cls.getFields()</data><data key="type">MethodCallExpr</data><data key="parentType">ReturnStmt</data></node><node id="94"><data key="reference">javassist.bytecode.ClassFile</data><data key="identifier">cls</data><data key="text">cls</data><data key="type">SimpleName</data><data key="parentType">NameExpr</data></node><node id="95"><data key="reference">otherMethodCall</data><data key="identifier">getFields</data><data key="text">getFields</data><data key="type">SimpleName</data><data key="parentType">MethodCallExpr</data></node><node id="96"><data key="reference"></data><data key="modifier">public</data><data key="text">public List&lt;MethodInfo&gt; getMethods(final ClassFile cls) {
    // noinspection unchecked
    return cls.getMethods();
}</data><data key="type">MethodDeclaration</data><data key="parentType">ClassOrInterfaceDeclaration</data></node><node id="97"><data key="reference">userDefinedMethodName</data><data key="identifier">getMethods</data><data key="text">getMethods</data><data key="type">SimpleName</data><data key="parentType">MethodDeclaration</data></node><node id="98"><data key="reference"></data><data key="modifier">final</data><data key="text">final ClassFile cls</data><data key="type">Parameter</data><data key="parentType">MethodDeclaration</data></node><node id="99"><data key="reference"></data><data key="text">ClassFile</data><data key="type">ClassOrInterfaceType</data><data key="parentType">Parameter</data></node><edge id="66" source="1" target="56" label="AST"><data key="type">AST</data></edge><edge id="88" source="1" target="74" label="AST"><data key="type">AST</data></edge><edge id="12" source="1" target="12" label="AST"><data key="type">AST</data></edge><edge id="23" source="1" target="21" label="AST"><data key="type">AST</data></edge><edge id="34" source="1" target="30" label="AST"><data key="type">AST</data></edge><edge id="56" source="1" target="48" label="AST"><data key="type">AST</data></edge><edge id="46" source="1" target="40" label="AST"><data key="type">AST</data></edge><edge id="29" source="1" target="26" label="AST"><data key="type">AST</data></edge><edge id="19" source="1" target="18" label="AST"><data key="type">AST</data></edge><edge id="0" source="1" target="2" label="AST"><data key="type">AST</data></edge><edge id="5" source="1" target="6" label="AST"><data key="type">AST</data></edge><edge id="71" source="1" target="60" label="AST"><data key="type">AST</data></edge><edge id="82" source="1" target="69" label="AST"><data key="type">AST</data></edge><edge id="61" source="1" target="52" label="AST"><data key="type">AST</data></edge><edge id="40" source="1" target="35" label="AST"><data key="type">AST</data></edge><edge id="51" source="1" target="44" label="AST"><data key="type">AST</data></edge><edge id="76" source="1" target="64" label="AST"><data key="type">AST</data></edge><edge id="1" source="2" target="3" label="AST"><data key="type">AST</data></edge><edge id="4" source="2" target="6" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="2" source="3" target="4" label="AST"><data key="type">AST</data></edge><edge id="3" source="4" target="5" label="AST"><data key="type">AST</data></edge><edge id="6" source="6" target="7" label="AST"><data key="type">AST</data></edge><edge id="11" source="6" target="12" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="7" source="7" target="8" label="AST"><data key="type">AST</data></edge><edge id="8" source="8" target="9" label="AST"><data key="type">AST</data></edge><edge id="9" source="9" target="10" label="AST"><data key="type">AST</data></edge><edge id="1418" source="801" target="802" label="AST"><data key="type">AST</data></edge><edge id="1438" source="801" target="811" label="AST"><data key="type">AST</data></edge><edge id="1621" source="801" target="893" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1419" source="802" target="803" label="AST"><data key="type">AST</data></edge><edge id="1427" source="802" target="806" label="AST"><data key="type">AST</data></edge><edge id="1437" source="802" target="811" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1425" source="803" target="805" label="AST"><data key="type">AST</data></edge><edge id="1420" source="803" target="804" label="AST"><data key="type">AST</data></edge><edge id="1426" source="803" target="806" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1422" source="804" target="785" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1421" source="804" target="785" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1423" source="804" target="785" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1424" source="804" target="805" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1436" source="806" target="810" label="AST"><data key="type">AST</data></edge><edge id="1428" source="806" target="807" label="AST"><data key="type">AST</data></edge><edge id="1434" source="807" target="809" label="AST"><data key="type">AST</data></edge><edge id="1429" source="807" target="808" label="AST"><data key="type">AST</data></edge><edge id="1435" source="807" target="810" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1431" source="808" target="785" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1430" source="808" target="804" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1432" source="808" target="804" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1433" source="808" target="809" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1521" source="811" target="852" label="AST"><data key="type">AST</data></edge><edge id="1454" source="811" target="822" label="AST"><data key="type">AST</data></edge><edge id="1476" source="811" target="835" label="AST"><data key="type">AST</data></edge><edge id="1439" source="811" target="812" label="AST"><data key="type">AST</data></edge><edge id="1504" source="811" target="846" label="AST"><data key="type">AST</data></edge><edge id="1440" source="812" target="813" label="AST"><data key="type">AST</data></edge><edge id="1453" source="812" target="822" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1447" source="813" target="818" label="AST"><data key="type">AST</data></edge><edge id="1441" source="813" target="814" label="AST"><data key="type">AST</data></edge><edge id="1449" source="813" target="819" label="AST"><data key="type">AST</data></edge><edge id="1444" source="814" target="816" label="AST"><data key="type">AST</data></edge><edge id="1442" source="814" target="815" label="AST"><data key="type">AST</data></edge><edge id="1446" source="814" target="818" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1443" source="815" target="816" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1445" source="816" target="817" label="AST"><data key="type">AST</data></edge><edge id="1448" source="818" target="819" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1452" source="819" target="821" label="AST"><data key="type">AST</data></edge><edge id="1450" source="819" target="820" label="AST"><data key="type">AST</data></edge><edge id="1451" source="820" target="821" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1455" source="822" target="823" label="AST"><data key="type">AST</data></edge><edge id="1475" source="822" target="835" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1456" source="823" target="824" label="AST"><data key="type">AST</data></edge><edge id="1464" source="823" target="829" label="AST"><data key="type">AST</data></edge><edge id="1462" source="823" target="828" label="AST"><data key="type">AST</data></edge><edge id="1457" source="824" target="825" label="AST"><data key="type">AST</data></edge><edge id="1460" source="824" target="827" label="AST"><data key="type">AST</data></edge><edge id="1461" source="824" target="828" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1458" source="825" target="826" label="AST"><data key="type">AST</data></edge><edge id="1459" source="825" target="827" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1463" source="828" target="829" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1465" source="829" target="830" label="AST"><data key="type">AST</data></edge><edge id="1471" source="829" target="834" label="AST"><data key="type">AST</data></edge><edge id="1469" source="830" target="833" label="AST"><data key="type">AST</data></edge><edge id="1466" source="830" target="831" label="AST"><data key="type">AST</data></edge><edge id="1470" source="830" target="834" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1467" source="831" target="832" label="AST"><data key="type">AST</data></edge><edge id="1468" source="831" target="833" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1473" source="834" target="785" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1472" source="834" target="808" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1474" source="834" target="808" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1477" source="835" target="836" label="AST"><data key="type">AST</data></edge><edge id="1486" source="835" target="839" label="AST"><data key="type">AST</data></edge><edge id="1503" source="835" target="846" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1478" source="836" target="837" label="AST"><data key="type">AST</data></edge><edge id="1484" source="836" target="838" label="AST"><data key="type">AST</data></edge><edge id="1485" source="836" target="839" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1480" source="837" target="828" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1479" source="837" target="828" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1482" source="837" target="844" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1481" source="837" target="828" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1483" source="837" target="838" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1487" source="839" target="840" label="AST"><data key="type">AST</data></edge><edge id="1488" source="840" target="841" label="AST"><data key="type">AST</data></edge><edge id="1496" source="840" target="843" label="AST"><data key="type">AST</data></edge><edge id="1494" source="840" target="842" label="AST"><data key="type">AST</data></edge><edge id="1490" source="841" target="818" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1489" source="841" target="818" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1492" source="841" target="841" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1491" source="841" target="818" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1493" source="841" target="842" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1053" source="600" target="601" label="AST"><data key="type">AST</data></edge><edge id="1061" source="600" target="605" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1495" source="842" target="843" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1057" source="601" target="604" label="AST"><data key="type">AST</data></edge><edge id="1054" source="601" target="602" label="AST"><data key="type">AST</data></edge><edge id="1502" source="843" target="845" label="AST"><data key="type">AST</data></edge><edge id="1497" source="843" target="844" label="AST"><data key="type">AST</data></edge><edge id="1055" source="602" target="603" label="AST"><data key="type">AST</data></edge><edge id="1056" source="602" target="604" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1499" source="844" target="828" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1498" source="844" target="837" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1500" source="844" target="837" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1501" source="844" target="845" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1059" source="604" target="574" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1058" source="604" target="596" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1060" source="604" target="596" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1513" source="846" target="849" label="AST"><data key="type">AST</data></edge><edge id="1511" source="846" target="848" label="AST"><data key="type">AST</data></edge><edge id="1505" source="846" target="847" label="AST"><data key="type">AST</data></edge><edge id="1520" source="846" target="852" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1507" source="847" target="818" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1506" source="847" target="841" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1509" source="847" target="841" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1508" source="847" target="818" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1510" source="847" target="848" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1065" source="606" target="607" label="AST"><data key="type">AST</data></edge><edge id="1087" source="606" target="618" label="AST"><data key="type">AST</data></edge><edge id="1074" source="606" target="611" label="AST"><data key="type">AST</data></edge><edge id="1512" source="848" target="849" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1066" source="607" target="608" label="AST"><data key="type">AST</data></edge><edge id="1071" source="607" target="609" label="AST"><data key="type">AST</data></edge><edge id="1073" source="607" target="611" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1514" source="849" target="850" label="AST"><data key="type">AST</data></edge><edge id="1519" source="849" target="851" label="AST"><data key="type">AST</data></edge><edge id="1068" source="608" target="574" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1067" source="608" target="604" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1069" source="608" target="604" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1070" source="608" target="609" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1072" source="609" target="610" label="AST"><data key="type">AST</data></edge><edge id="1516" source="850" target="785" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1515" source="850" target="834" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1517" source="850" target="834" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1518" source="850" target="851" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1557" source="852" target="867" label="AST"><data key="type">AST</data></edge><edge id="1522" source="852" target="853" label="AST"><data key="type">AST</data></edge><edge id="1530" source="852" target="858" label="AST"><data key="type">AST</data></edge><edge id="1550" source="852" target="865" label="AST"><data key="type">AST</data></edge><edge id="1075" source="611" target="612" label="AST"><data key="type">AST</data></edge><edge id="1085" source="611" target="617" label="AST"><data key="type">AST</data></edge><edge id="1086" source="611" target="618" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1523" source="853" target="854" label="AST"><data key="type">AST</data></edge><edge id="1529" source="853" target="858" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1076" source="612" target="613" label="AST"><data key="type">AST</data></edge><edge id="1084" source="612" target="617" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1524" source="854" target="855" label="AST"><data key="type">AST</data></edge><edge id="1528" source="854" target="857" label="AST"><data key="type">AST</data></edge><edge id="1526" source="854" target="856" label="AST"><data key="type">AST</data></edge><edge id="1080" source="613" target="616" label="AST"><data key="type">AST</data></edge><edge id="1077" source="613" target="614" label="AST"><data key="type">AST</data></edge><edge id="1525" source="855" target="856" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1078" source="614" target="615" label="AST"><data key="type">AST</data></edge><edge id="1079" source="614" target="616" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1527" source="856" target="857" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1082" source="616" target="574" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1081" source="616" target="608" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1083" source="616" target="608" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1531" source="858" target="859" label="AST"><data key="type">AST</data></edge><edge id="1538" source="858" target="860" label="AST"><data key="type">AST</data></edge><edge id="1549" source="858" target="865" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1534" source="859" target="866" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1533" source="859" target="856" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1532" source="859" target="856" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1536" source="859" target="866" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1535" source="859" target="856" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1537" source="859" target="860" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1090" source="619" target="620" label="AST"><data key="type">AST</data></edge><edge id="1108" source="619" target="569" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="1539" source="860" target="861" label="AST"><data key="type">AST</data></edge><edge id="1548" source="860" target="864" label="AST"><data key="type">AST</data></edge><edge id="1546" source="861" target="863" label="AST"><data key="type">AST</data></edge><edge id="1540" source="861" target="862" label="AST"><data key="type">AST</data></edge><edge id="1547" source="861" target="864" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1091" source="620" target="621" label="AST"><data key="type">AST</data></edge><edge id="1099" source="620" target="624" label="AST"><data key="type">AST</data></edge><edge id="1542" source="862" target="818" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1541" source="862" target="847" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1544" source="862" target="884" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1543" source="862" target="847" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1545" source="862" target="863" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1097" source="621" target="623" label="AST"><data key="type">AST</data></edge><edge id="1092" source="621" target="622" label="AST"><data key="type">AST</data></edge><edge id="1098" source="621" target="624" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1094" source="622" target="581" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1093" source="622" target="581" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1095" source="622" target="581" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1096" source="622" target="623" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1551" source="865" target="866" label="AST"><data key="type">AST</data></edge><edge id="1556" source="865" target="867" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1104" source="624" target="627" label="AST"><data key="type">AST</data></edge><edge id="1102" source="624" target="626" label="AST"><data key="type">AST</data></edge><edge id="1100" source="624" target="625" label="AST"><data key="type">AST</data></edge><edge id="1554" source="866" target="866" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1553" source="866" target="856" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1552" source="866" target="859" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1555" source="866" target="887" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1101" source="625" target="626" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1558" source="867" target="868" label="AST"><data key="type">AST</data></edge><edge id="1608" source="867" target="889" label="AST"><data key="type">AST</data></edge><edge id="1103" source="626" target="627" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1559" source="868" target="869" label="AST"><data key="type">AST</data></edge><edge id="1607" source="868" target="889" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1106" source="627" target="581" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1105" source="627" target="622" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1107" source="627" target="622" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1565" source="869" target="873" label="AST"><data key="type">AST</data></edge><edge id="1563" source="869" target="872" label="AST"><data key="type">AST</data></edge><edge id="1560" source="869" target="870" label="AST"><data key="type">AST</data></edge><edge id="1113" source="628" target="630" label="AST"><data key="type">AST</data></edge><edge id="1111" source="628" target="629" label="AST"><data key="type">AST</data></edge><edge id="1122" source="628" target="636" label="AST"><data key="type">AST</data></edge><edge id="1119" source="628" target="634" label="AST"><data key="type">AST</data></edge><edge id="1132" source="628" target="641" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1112" source="629" target="630" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1561" source="870" target="871" label="AST"><data key="type">AST</data></edge><edge id="1562" source="870" target="872" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1117" source="630" target="633" label="AST"><data key="type">AST</data></edge><edge id="1114" source="630" target="631" label="AST"><data key="type">AST</data></edge><edge id="1118" source="630" target="634" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1564" source="872" target="873" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1115" source="631" target="632" label="AST"><data key="type">AST</data></edge><edge id="1116" source="631" target="633" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1568" source="873" target="875" label="AST"><data key="type">AST</data></edge><edge id="1566" source="873" target="874" label="AST"><data key="type">AST</data></edge><edge id="1570" source="873" target="876" label="AST"><data key="type">AST</data></edge><edge id="1567" source="874" target="875" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1569" source="875" target="876" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1120" source="634" target="635" label="AST"><data key="type">AST</data></edge><edge id="1121" source="634" target="636" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1579" source="876" target="879" label="AST"><data key="type">AST</data></edge><edge id="1577" source="876" target="878" label="AST"><data key="type">AST</data></edge><edge id="1571" source="876" target="877" label="AST"><data key="type">AST</data></edge><edge id="1592" source="876" target="883" label="AST"><data key="type">AST</data></edge><edge id="1573" source="877" target="785" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1572" source="877" target="850" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1575" source="877" target="877" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1574" source="877" target="850" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1576" source="877" target="878" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1123" source="636" target="637" label="AST"><data key="type">AST</data></edge><edge id="1578" source="878" target="879" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1124" source="637" target="638" label="AST"><data key="type">AST</data></edge><edge id="1131" source="637" target="628" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="1587" source="879" target="882" label="AST"><data key="type">AST</data></edge><edge id="1585" source="879" target="881" label="AST"><data key="type">AST</data></edge><edge id="1580" source="879" target="880" label="AST"><data key="type">AST</data></edge><edge id="1591" source="879" target="883" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1125" source="638" target="639" label="AST"><data key="type">AST</data></edge><edge id="1130" source="638" target="640" label="AST"><data key="type">AST</data></edge><edge id="1127" source="639" target="633" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1126" source="639" target="633" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1128" source="639" target="633" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1129" source="639" target="640" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1582" source="880" target="818" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1581" source="880" target="862" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1583" source="880" target="862" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1584" source="880" target="881" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1586" source="881" target="882" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1589" source="882" target="856" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1588" source="882" target="866" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1590" source="882" target="859" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1136" source="641" target="643" label="AST"><data key="type">AST</data></edge><edge id="1134" source="641" target="642" label="AST"><data key="type">AST</data></edge><edge id="1145" source="641" target="649" label="AST"><data key="type">AST</data></edge><edge id="1142" source="641" target="647" label="AST"><data key="type">AST</data></edge><edge id="1155" source="641" target="654" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1600" source="883" target="886" label="AST"><data key="type">AST</data></edge><edge id="1598" source="883" target="885" label="AST"><data key="type">AST</data></edge><edge id="1593" source="883" target="884" label="AST"><data key="type">AST</data></edge><edge id="696" source="400" target="404" label="AST"><data key="type">AST</data></edge><edge id="698" source="400" target="405" label="AST"><data key="type">AST</data></edge><edge id="688" source="400" target="401" label="AST"><data key="type">AST</data></edge><edge id="1135" source="642" target="643" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1595" source="884" target="818" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1594" source="884" target="880" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1596" source="884" target="880" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1597" source="884" target="885" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="689" source="401" target="402" label="AST"><data key="type">AST</data></edge><edge id="691" source="401" target="403" label="AST"><data key="type">AST</data></edge><edge id="695" source="401" target="404" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1137" source="643" target="644" label="AST"><data key="type">AST</data></edge><edge id="1140" source="643" target="646" label="AST"><data key="type">AST</data></edge><edge id="1141" source="643" target="647" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1599" source="885" target="886" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="690" source="402" target="403" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1138" source="644" target="645" label="AST"><data key="type">AST</data></edge><edge id="1139" source="644" target="646" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1601" source="886" target="887" label="AST"><data key="type">AST</data></edge><edge id="1606" source="886" target="888" label="AST"><data key="type">AST</data></edge><edge id="693" source="403" target="389" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="692" source="403" target="395" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="694" source="403" target="389" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1603" source="887" target="856" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1602" source="887" target="882" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1604" source="887" target="882" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1605" source="887" target="888" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="697" source="404" target="405" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1143" source="647" target="648" label="AST"><data key="type">AST</data></edge><edge id="1144" source="647" target="649" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1609" source="889" target="890" label="AST"><data key="type">AST</data></edge><edge id="1617" source="889" target="892" label="AST"><data key="type">AST</data></edge><edge id="1615" source="889" target="891" label="AST"><data key="type">AST</data></edge><edge id="710" source="406" target="412" label="AST"><data key="type">AST</data></edge><edge id="702" source="406" target="407" label="AST"><data key="type">AST</data></edge><edge id="713" source="406" target="414" label="AST"><data key="type">AST</data></edge><edge id="704" source="406" target="408" label="AST"><data key="type">AST</data></edge><edge id="723" source="406" target="419" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="703" source="407" target="408" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1146" source="649" target="650" label="AST"><data key="type">AST</data></edge><edge id="705" source="408" target="409" label="AST"><data key="type">AST</data></edge><edge id="708" source="408" target="411" label="AST"><data key="type">AST</data></edge><edge id="709" source="408" target="412" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="706" source="409" target="410" label="AST"><data key="type">AST</data></edge><edge id="707" source="409" target="411" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1611" source="890" target="797" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1610" source="890" target="797" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1613" source="890" target="890" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1612" source="890" target="797" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1614" source="890" target="891" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1616" source="891" target="892" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1147" source="650" target="651" label="AST"><data key="type">AST</data></edge><edge id="1154" source="650" target="641" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="1619" source="892" target="872" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1618" source="892" target="872" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1620" source="892" target="872" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1148" source="651" target="652" label="AST"><data key="type">AST</data></edge><edge id="1153" source="651" target="653" label="AST"><data key="type">AST</data></edge><edge id="1623" source="893" target="894" label="AST"><data key="type">AST</data></edge><edge id="1628" source="893" target="780" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="1150" source="652" target="646" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1149" source="652" target="646" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1151" source="652" target="646" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1152" source="652" target="653" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1625" source="894" target="797" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1624" source="894" target="890" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1627" source="894" target="890" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1626" source="894" target="797" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1633" source="895" target="897" label="AST"><data key="type">AST</data></edge><edge id="1631" source="895" target="896" label="AST"><data key="type">AST</data></edge><edge id="1639" source="895" target="901" label="AST"><data key="type">AST</data></edge><edge id="1636" source="895" target="899" label="AST"><data key="type">AST</data></edge><edge id="711" source="412" target="413" label="AST"><data key="type">AST</data></edge><edge id="712" source="412" target="414" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1159" source="654" target="656" label="AST"><data key="type">AST</data></edge><edge id="1157" source="654" target="655" label="AST"><data key="type">AST</data></edge><edge id="1165" source="654" target="660" label="AST"><data key="type">AST</data></edge><edge id="1171" source="654" target="664" label="AST"><data key="type">AST</data></edge><edge id="1186" source="654" target="672" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1632" source="896" target="897" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1158" source="655" target="656" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1634" source="897" target="898" label="AST"><data key="type">AST</data></edge><edge id="1635" source="897" target="899" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="714" source="414" target="415" label="AST"><data key="type">AST</data></edge><edge id="1163" source="656" target="659" label="AST"><data key="type">AST</data></edge><edge id="1160" source="656" target="657" label="AST"><data key="type">AST</data></edge><edge id="1164" source="656" target="660" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="715" source="415" target="416" label="AST"><data key="type">AST</data></edge><edge id="722" source="415" target="406" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="1161" source="657" target="658" label="AST"><data key="type">AST</data></edge><edge id="1162" source="657" target="659" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1637" source="899" target="900" label="AST"><data key="type">AST</data></edge><edge id="1638" source="899" target="901" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="721" source="416" target="418" label="AST"><data key="type">AST</data></edge><edge id="716" source="416" target="417" label="AST"><data key="type">AST</data></edge><edge id="718" source="417" target="411" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="717" source="417" target="411" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="719" source="417" target="411" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="720" source="417" target="418" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="725" source="419" target="420" label="AST"><data key="type">AST</data></edge><edge id="736" source="419" target="427" label="AST"><data key="type">AST</data></edge><edge id="727" source="419" target="421" label="AST"><data key="type">AST</data></edge><edge id="739" source="419" target="429" label="AST"><data key="type">AST</data></edge><edge id="834" source="419" target="481" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1168" source="660" target="662" label="AST"><data key="type">AST</data></edge><edge id="1166" source="660" target="661" label="AST"><data key="type">AST</data></edge><edge id="1170" source="660" target="664" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1167" source="661" target="662" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="726" source="420" target="421" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1169" source="662" target="663" label="AST"><data key="type">AST</data></edge><edge id="734" source="421" target="426" label="AST"><data key="type">AST</data></edge><edge id="728" source="421" target="422" label="AST"><data key="type">AST</data></edge><edge id="735" source="421" target="427" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="732" source="422" target="425" label="AST"><data key="type">AST</data></edge><edge id="729" source="422" target="423" label="AST"><data key="type">AST</data></edge><edge id="733" source="422" target="426" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1172" source="664" target="665" label="AST"><data key="type">AST</data></edge><edge id="730" source="423" target="424" label="AST"><data key="type">AST</data></edge><edge id="731" source="423" target="425" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1173" source="665" target="666" label="AST"><data key="type">AST</data></edge><edge id="1185" source="665" target="654" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="1178" source="666" target="669" label="AST"><data key="type">AST</data></edge><edge id="1176" source="666" target="668" label="AST"><data key="type">AST</data></edge><edge id="1174" source="666" target="667" label="AST"><data key="type">AST</data></edge><edge id="1175" source="667" target="668" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1177" source="668" target="669" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="737" source="427" target="428" label="AST"><data key="type">AST</data></edge><edge id="738" source="427" target="429" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1179" source="669" target="670" label="AST"><data key="type">AST</data></edge><edge id="1184" source="669" target="671" label="AST"><data key="type">AST</data></edge><edge id="740" source="429" target="430" label="AST"><data key="type">AST</data></edge><edge id="749" source="429" target="436" label="AST"><data key="type">AST</data></edge><edge id="1181" source="670" target="659" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1180" source="670" target="659" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1182" source="670" target="659" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1183" source="670" target="671" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="741" source="430" target="431" label="AST"><data key="type">AST</data></edge><edge id="748" source="430" target="436" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1190" source="672" target="674" label="AST"><data key="type">AST</data></edge><edge id="1188" source="672" target="673" label="AST"><data key="type">AST</data></edge><edge id="1198" source="672" target="679" label="AST"><data key="type">AST</data></edge><edge id="1196" source="672" target="678" label="AST"><data key="type">AST</data></edge><edge id="1210" source="672" target="685" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="742" source="431" target="432" label="AST"><data key="type">AST</data></edge><edge id="745" source="431" target="434" label="AST"><data key="type">AST</data></edge><edge id="747" source="431" target="435" label="AST"><data key="type">AST</data></edge><edge id="1189" source="673" target="674" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="743" source="432" target="433" label="AST"><data key="type">AST</data></edge><edge id="744" source="432" target="434" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1194" source="674" target="677" label="AST"><data key="type">AST</data></edge><edge id="1191" source="674" target="675" label="AST"><data key="type">AST</data></edge><edge id="1195" source="674" target="678" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1192" source="675" target="676" label="AST"><data key="type">AST</data></edge><edge id="1193" source="675" target="677" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="746" source="434" target="435" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="750" source="436" target="437" label="AST"><data key="type">AST</data></edge><edge id="797" source="436" target="460" label="AST"><data key="type">AST</data></edge><edge id="824" source="436" target="476" label="AST"><data key="type">AST</data></edge><edge id="1197" source="678" target="679" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="751" source="437" target="438" label="AST"><data key="type">AST</data></edge><edge id="786" source="437" target="455" label="AST"><data key="type">AST</data></edge><edge id="766" source="437" target="443" label="AST"><data key="type">AST</data></edge><edge id="796" source="437" target="460" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1199" source="679" target="680" label="AST"><data key="type">AST</data></edge><edge id="752" source="438" target="439" label="AST"><data key="type">AST</data></edge><edge id="758" source="438" target="440" label="AST"><data key="type">AST</data></edge><edge id="765" source="438" target="443" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="755" source="439" target="434" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="753" source="439" target="434" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="754" source="439" target="441" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="756" source="439" target="434" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="757" source="439" target="440" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1200" source="680" target="681" label="AST"><data key="type">AST</data></edge><edge id="1209" source="680" target="672" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="1206" source="681" target="683" label="AST"><data key="type">AST</data></edge><edge id="1201" source="681" target="682" label="AST"><data key="type">AST</data></edge><edge id="1208" source="681" target="684" label="AST"><data key="type">AST</data></edge><edge id="764" source="440" target="442" label="AST"><data key="type">AST</data></edge><edge id="759" source="440" target="441" label="AST"><data key="type">AST</data></edge><edge id="1203" source="682" target="677" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1202" source="682" target="677" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1204" source="682" target="677" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1205" source="682" target="683" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="761" source="441" target="426" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="760" source="441" target="426" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="762" source="441" target="426" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="763" source="441" target="442" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1207" source="683" target="684" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="320" source="200" target="201" label="AST"><data key="type">AST</data></edge><edge id="321" source="200" target="202" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="767" source="443" target="444" label="AST"><data key="type">AST</data></edge><edge id="785" source="443" target="455" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1226" source="685" target="695" label="AST"><data key="type">AST</data></edge><edge id="1214" source="685" target="687" label="AST"><data key="type">AST</data></edge><edge id="1212" source="685" target="686" label="AST"><data key="type">AST</data></edge><edge id="1220" source="685" target="691" label="AST"><data key="type">AST</data></edge><edge id="1316" source="685" target="742" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="771" source="444" target="447" label="AST"><data key="type">AST</data></edge><edge id="773" source="444" target="448" label="AST"><data key="type">AST</data></edge><edge id="768" source="444" target="445" label="AST"><data key="type">AST</data></edge><edge id="1213" source="686" target="687" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="325" source="203" target="204" label="AST"><data key="type">AST</data></edge><edge id="327" source="203" target="205" label="AST"><data key="type">AST</data></edge><edge id="329" source="203" target="207" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="769" source="445" target="446" label="AST"><data key="type">AST</data></edge><edge id="770" source="445" target="447" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1215" source="687" target="688" label="AST"><data key="type">AST</data></edge><edge id="1218" source="687" target="690" label="AST"><data key="type">AST</data></edge><edge id="1219" source="687" target="691" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="326" source="204" target="205" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1216" source="688" target="689" label="AST"><data key="type">AST</data></edge><edge id="1217" source="688" target="690" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="328" source="205" target="206" label="AST"><data key="type">AST</data></edge><edge id="772" source="447" target="448" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="774" source="448" target="449" label="AST"><data key="type">AST</data></edge><edge id="777" source="448" target="451" label="AST"><data key="type">AST</data></edge><edge id="331" source="207" target="208" label="AST"><data key="type">AST</data></edge><edge id="775" source="449" target="450" label="AST"><data key="type">AST</data></edge><edge id="776" source="449" target="451" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="332" source="208" target="209" label="AST"><data key="type">AST</data></edge><edge id="373" source="208" target="197" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="352" source="209" target="220" label="AST"><data key="type">AST</data></edge><edge id="333" source="209" target="210" label="AST"><data key="type">AST</data></edge><edge id="335" source="209" target="211" label="AST"><data key="type">AST</data></edge><edge id="1223" source="691" target="693" label="AST"><data key="type">AST</data></edge><edge id="1221" source="691" target="692" label="AST"><data key="type">AST</data></edge><edge id="1225" source="691" target="695" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1222" source="692" target="693" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="781" source="451" target="454" label="AST"><data key="type">AST</data></edge><edge id="778" source="451" target="452" label="AST"><data key="type">AST</data></edge><edge id="1224" source="693" target="694" label="AST"><data key="type">AST</data></edge><edge id="334" source="210" target="211" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="779" source="452" target="453" label="AST"><data key="type">AST</data></edge><edge id="780" source="452" target="454" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="336" source="211" target="212" label="AST"><data key="type">AST</data></edge><edge id="339" source="211" target="214" label="AST"><data key="type">AST</data></edge><edge id="351" source="211" target="220" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1227" source="695" target="696" label="AST"><data key="type">AST</data></edge><edge id="1242" source="695" target="706" label="AST"><data key="type">AST</data></edge><edge id="1309" source="695" target="740" label="AST"><data key="type">AST</data></edge><edge id="337" source="212" target="213" label="AST"><data key="type">AST</data></edge><edge id="338" source="212" target="214" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="783" source="454" target="439" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="782" source="454" target="439" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="784" source="454" target="439" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1228" source="696" target="697" label="AST"><data key="type">AST</data></edge><edge id="1241" source="696" target="706" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="787" source="455" target="456" label="AST"><data key="type">AST</data></edge><edge id="795" source="455" target="419" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="1237" source="697" target="703" label="AST"><data key="type">AST</data></edge><edge id="1235" source="697" target="702" label="AST"><data key="type">AST</data></edge><edge id="1229" source="697" target="698" label="AST"><data key="type">AST</data></edge><edge id="345" source="214" target="216" label="AST"><data key="type">AST</data></edge><edge id="347" source="214" target="217" label="AST"><data key="type">AST</data></edge><edge id="340" source="214" target="215" label="AST"><data key="type">AST</data></edge><edge id="788" source="456" target="457" label="AST"><data key="type">AST</data></edge><edge id="791" source="456" target="459" label="AST"><data key="type">AST</data></edge><edge id="1232" source="698" target="700" label="AST"><data key="type">AST</data></edge><edge id="1230" source="698" target="699" label="AST"><data key="type">AST</data></edge><edge id="1234" source="698" target="702" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="342" source="215" target="202" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="341" source="215" target="202" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="343" source="215" target="202" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="344" source="215" target="216" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="789" source="457" target="458" label="AST"><data key="type">AST</data></edge><edge id="790" source="457" target="459" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1231" source="699" target="700" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="346" source="216" target="217" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="348" source="217" target="218" label="AST"><data key="type">AST</data></edge><edge id="350" source="217" target="219" label="AST"><data key="type">AST</data></edge><edge id="793" source="459" target="447" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="792" source="459" target="447" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="794" source="459" target="447" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="349" source="218" target="219" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="798" source="460" target="461" label="AST"><data key="type">AST</data></edge><edge id="804" source="460" target="465" label="AST"><data key="type">AST</data></edge><edge id="823" source="460" target="476" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="799" source="461" target="462" label="AST"><data key="type">AST</data></edge><edge id="802" source="461" target="464" label="AST"><data key="type">AST</data></edge><edge id="803" source="461" target="465" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="353" source="220" target="221" label="AST"><data key="type">AST</data></edge><edge id="355" source="220" target="222" label="AST"><data key="type">AST</data></edge><edge id="372" source="220" target="231" label="AST"><data key="type">AST</data></edge><edge id="800" source="462" target="463" label="AST"><data key="type">AST</data></edge><edge id="801" source="462" target="464" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="354" source="221" target="222" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="356" source="222" target="223" label="AST"><data key="type">AST</data></edge><edge id="359" source="222" target="225" label="AST"><data key="type">AST</data></edge><edge id="371" source="222" target="231" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="357" source="223" target="224" label="AST"><data key="type">AST</data></edge><edge id="358" source="223" target="225" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="805" source="465" target="466" label="AST"><data key="type">AST</data></edge><edge id="806" source="466" target="467" label="AST"><data key="type">AST</data></edge><edge id="365" source="225" target="227" label="AST"><data key="type">AST</data></edge><edge id="367" source="225" target="228" label="AST"><data key="type">AST</data></edge><edge id="360" source="225" target="226" label="AST"><data key="type">AST</data></edge><edge id="810" source="467" target="470" label="AST"><data key="type">AST</data></edge><edge id="821" source="467" target="475" label="AST"><data key="type">AST</data></edge><edge id="807" source="467" target="468" label="AST"><data key="type">AST</data></edge><edge id="362" source="226" target="202" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="361" source="226" target="215" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="363" source="226" target="215" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="364" source="226" target="227" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="808" source="468" target="469" label="AST"><data key="type">AST</data></edge><edge id="809" source="468" target="470" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="366" source="227" target="228" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="368" source="228" target="229" label="AST"><data key="type">AST</data></edge><edge id="370" source="228" target="230" label="AST"><data key="type">AST</data></edge><edge id="369" source="229" target="230" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="811" source="470" target="471" label="AST"><data key="type">AST</data></edge><edge id="813" source="470" target="472" label="AST"><data key="type">AST</data></edge><edge id="820" source="470" target="475" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="812" source="471" target="472" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="819" source="472" target="474" label="AST"><data key="type">AST</data></edge><edge id="814" source="472" target="473" label="AST"><data key="type">AST</data></edge><edge id="816" source="473" target="426" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="815" source="473" target="441" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="817" source="473" target="441" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="818" source="473" target="474" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="376" source="232" target="233" label="AST"><data key="type">AST</data></edge><edge id="378" source="232" target="234" label="AST"><data key="type">AST</data></edge><edge id="390" source="232" target="242" label="AST"><data key="type">AST</data></edge><edge id="384" source="232" target="238" label="AST"><data key="type">AST</data></edge><edge id="434" source="232" target="267" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="377" source="233" target="234" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="822" source="475" target="464" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="379" source="234" target="235" label="AST"><data key="type">AST</data></edge><edge id="382" source="234" target="237" label="AST"><data key="type">AST</data></edge><edge id="383" source="234" target="238" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="825" source="476" target="477" label="AST"><data key="type">AST</data></edge><edge id="380" source="235" target="236" label="AST"><data key="type">AST</data></edge><edge id="381" source="235" target="237" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="830" source="477" target="480" label="AST"><data key="type">AST</data></edge><edge id="826" source="477" target="478" label="AST"><data key="type">AST</data></edge><edge id="828" source="477" target="479" label="AST"><data key="type">AST</data></edge><edge id="827" source="478" target="479" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="829" source="479" target="480" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="385" source="238" target="239" label="AST"><data key="type">AST</data></edge><edge id="387" source="238" target="240" label="AST"><data key="type">AST</data></edge><edge id="389" source="238" target="242" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="386" source="239" target="240" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="832" source="480" target="439" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="831" source="480" target="454" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="833" source="480" target="454" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="844" source="481" target="487" label="AST"><data key="type">AST</data></edge><edge id="836" source="481" target="482" label="AST"><data key="type">AST</data></edge><edge id="847" source="481" target="489" label="AST"><data key="type">AST</data></edge><edge id="838" source="481" target="483" label="AST"><data key="type">AST</data></edge><edge id="898" source="481" target="514" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="388" source="240" target="241" label="AST"><data key="type">AST</data></edge><edge id="837" source="482" target="483" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="842" source="483" target="486" label="AST"><data key="type">AST</data></edge><edge id="839" source="483" target="484" label="AST"><data key="type">AST</data></edge><edge id="843" source="483" target="487" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="391" source="242" target="243" label="AST"><data key="type">AST</data></edge><edge id="840" source="484" target="485" label="AST"><data key="type">AST</data></edge><edge id="841" source="484" target="486" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="392" source="243" target="244" label="AST"><data key="type">AST</data></edge><edge id="433" source="243" target="232" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="412" source="244" target="255" label="AST"><data key="type">AST</data></edge><edge id="393" source="244" target="245" label="AST"><data key="type">AST</data></edge><edge id="395" source="244" target="246" label="AST"><data key="type">AST</data></edge><edge id="394" source="245" target="246" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="845" source="487" target="488" label="AST"><data key="type">AST</data></edge><edge id="846" source="487" target="489" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="396" source="246" target="247" label="AST"><data key="type">AST</data></edge><edge id="399" source="246" target="249" label="AST"><data key="type">AST</data></edge><edge id="411" source="246" target="255" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="397" source="247" target="248" label="AST"><data key="type">AST</data></edge><edge id="398" source="247" target="249" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="862" source="489" target="497" label="AST"><data key="type">AST</data></edge><edge id="848" source="489" target="490" label="AST"><data key="type">AST</data></edge><edge id="400" source="249" target="250" label="AST"><data key="type">AST</data></edge><edge id="405" source="249" target="251" label="AST"><data key="type">AST</data></edge><edge id="407" source="249" target="252" label="AST"><data key="type">AST</data></edge><edge id="849" source="490" target="491" label="AST"><data key="type">AST</data></edge><edge id="861" source="490" target="497" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="850" source="491" target="492" label="AST"><data key="type">AST</data></edge><edge id="852" source="491" target="493" label="AST"><data key="type">AST</data></edge><edge id="854" source="491" target="494" label="AST"><data key="type">AST</data></edge><edge id="402" source="250" target="237" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="401" source="250" target="237" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="403" source="250" target="237" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="404" source="250" target="251" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="851" source="492" target="493" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="406" source="251" target="252" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="853" source="493" target="494" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="410" source="252" target="254" label="AST"><data key="type">AST</data></edge><edge id="408" source="252" target="253" label="AST"><data key="type">AST</data></edge><edge id="860" source="494" target="496" label="AST"><data key="type">AST</data></edge><edge id="855" source="494" target="495" label="AST"><data key="type">AST</data></edge><edge id="409" source="253" target="254" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="857" source="495" target="486" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="856" source="495" target="486" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="858" source="495" target="486" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="859" source="495" target="496" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="432" source="255" target="266" label="AST"><data key="type">AST</data></edge><edge id="413" source="255" target="256" label="AST"><data key="type">AST</data></edge><edge id="415" source="255" target="257" label="AST"><data key="type">AST</data></edge><edge id="863" source="497" target="498" label="AST"><data key="type">AST</data></edge><edge id="897" source="497" target="481" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="414" source="256" target="257" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="872" source="498" target="502" label="AST"><data key="type">AST</data></edge><edge id="874" source="498" target="503" label="AST"><data key="type">AST</data></edge><edge id="864" source="498" target="499" label="AST"><data key="type">AST</data></edge><edge id="416" source="257" target="258" label="AST"><data key="type">AST</data></edge><edge id="419" source="257" target="260" label="AST"><data key="type">AST</data></edge><edge id="431" source="257" target="266" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="865" source="499" target="500" label="AST"><data key="type">AST</data></edge><edge id="867" source="499" target="501" label="AST"><data key="type">AST</data></edge><edge id="871" source="499" target="502" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="417" source="258" target="259" label="AST"><data key="type">AST</data></edge><edge id="418" source="258" target="260" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="420" source="260" target="261" label="AST"><data key="type">AST</data></edge><edge id="425" source="260" target="262" label="AST"><data key="type">AST</data></edge><edge id="427" source="260" target="263" label="AST"><data key="type">AST</data></edge><edge id="422" source="261" target="237" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="421" source="261" target="250" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="423" source="261" target="250" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="424" source="261" target="262" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="426" source="262" target="263" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="430" source="263" target="265" label="AST"><data key="type">AST</data></edge><edge id="428" source="263" target="264" label="AST"><data key="type">AST</data></edge><edge id="429" source="264" target="265" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="444" source="267" target="273" label="AST"><data key="type">AST</data></edge><edge id="455" source="267" target="280" label="AST"><data key="type">AST</data></edge><edge id="436" source="267" target="268" label="AST"><data key="type">AST</data></edge><edge id="438" source="267" target="269" label="AST"><data key="type">AST</data></edge><edge id="449" source="267" target="276" label="AST"><data key="type">AST</data></edge><edge id="628" source="267" target="371" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="437" source="268" target="269" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="442" source="269" target="272" label="AST"><data key="type">AST</data></edge><edge id="439" source="269" target="270" label="AST"><data key="type">AST</data></edge><edge id="443" source="269" target="273" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="440" source="270" target="271" label="AST"><data key="type">AST</data></edge><edge id="441" source="270" target="272" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="445" source="273" target="274" label="AST"><data key="type">AST</data></edge><edge id="447" source="273" target="275" label="AST"><data key="type">AST</data></edge><edge id="448" source="273" target="276" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="446" source="274" target="275" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="452" source="276" target="278" label="AST"><data key="type">AST</data></edge><edge id="450" source="276" target="277" label="AST"><data key="type">AST</data></edge><edge id="454" source="276" target="280" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="451" source="277" target="278" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="453" source="278" target="279" label="AST"><data key="type">AST</data></edge><edge id="520" source="280" target="319" label="AST"><data key="type">AST</data></edge><edge id="456" source="280" target="281" label="AST"><data key="type">AST</data></edge><edge id="621" source="280" target="369" label="AST"><data key="type">AST</data></edge><edge id="471" source="280" target="291" label="AST"><data key="type">AST</data></edge><edge id="457" source="281" target="282" label="AST"><data key="type">AST</data></edge><edge id="470" source="281" target="291" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="464" source="282" target="287" label="AST"><data key="type">AST</data></edge><edge id="466" source="282" target="288" label="AST"><data key="type">AST</data></edge><edge id="458" source="282" target="283" label="AST"><data key="type">AST</data></edge><edge id="459" source="283" target="284" label="AST"><data key="type">AST</data></edge><edge id="461" source="283" target="285" label="AST"><data key="type">AST</data></edge><edge id="463" source="283" target="287" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="460" source="284" target="285" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="462" source="285" target="286" label="AST"><data key="type">AST</data></edge><edge id="465" source="287" target="288" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="467" source="288" target="289" label="AST"><data key="type">AST</data></edge><edge id="469" source="288" target="290" label="AST"><data key="type">AST</data></edge><edge id="468" source="289" target="290" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="472" source="291" target="292" label="AST"><data key="type">AST</data></edge><edge id="519" source="291" target="319" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="473" source="292" target="293" label="AST"><data key="type">AST</data></edge><edge id="479" source="292" target="297" label="AST"><data key="type">AST</data></edge><edge id="481" source="292" target="298" label="AST"><data key="type">AST</data></edge><edge id="474" source="293" target="294" label="AST"><data key="type">AST</data></edge><edge id="476" source="293" target="295" label="AST"><data key="type">AST</data></edge><edge id="478" source="293" target="297" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="475" source="294" target="295" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="477" source="295" target="296" label="AST"><data key="type">AST</data></edge><edge id="480" source="297" target="298" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="484" source="298" target="300" label="AST"><data key="type">AST</data></edge><edge id="486" source="298" target="301" label="AST"><data key="type">AST</data></edge><edge id="503" source="298" target="310" label="AST"><data key="type">AST</data></edge><edge id="482" source="298" target="299" label="AST"><data key="type">AST</data></edge><edge id="483" source="299" target="300" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1640" source="901" target="902" label="AST"><data key="type">AST</data></edge><edge id="1233" source="700" target="701" label="AST"><data key="type">AST</data></edge><edge id="1236" source="702" target="703" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1238" source="703" target="704" label="AST"><data key="type">AST</data></edge><edge id="1240" source="703" target="705" label="AST"><data key="type">AST</data></edge><edge id="1239" source="704" target="705" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1243" source="706" target="707" label="AST"><data key="type">AST</data></edge><edge id="1251" source="706" target="710" label="AST"><data key="type">AST</data></edge><edge id="1308" source="706" target="740" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1249" source="707" target="709" label="AST"><data key="type">AST</data></edge><edge id="1244" source="707" target="708" label="AST"><data key="type">AST</data></edge><edge id="1250" source="707" target="710" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1246" source="708" target="690" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1245" source="708" target="690" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1247" source="708" target="690" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1248" source="708" target="709" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1252" source="710" target="711" label="AST"><data key="type">AST</data></edge><edge id="1265" source="711" target="718" label="AST"><data key="type">AST</data></edge><edge id="1253" source="711" target="712" label="AST"><data key="type">AST</data></edge><edge id="1260" source="711" target="717" label="AST"><data key="type">AST</data></edge><edge id="1254" source="712" target="713" label="AST"><data key="type">AST</data></edge><edge id="1259" source="712" target="717" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1258" source="713" target="716" label="AST"><data key="type">AST</data></edge><edge id="1255" source="713" target="714" label="AST"><data key="type">AST</data></edge><edge id="1256" source="714" target="715" label="AST"><data key="type">AST</data></edge><edge id="1257" source="714" target="716" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1262" source="717" target="690" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1261" source="717" target="708" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1263" source="717" target="708" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1264" source="717" target="718" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1266" source="718" target="719" label="AST"><data key="type">AST</data></edge><edge id="1267" source="719" target="720" label="AST"><data key="type">AST</data></edge><edge id="1275" source="719" target="723" label="AST"><data key="type">AST</data></edge><edge id="1268" source="720" target="721" label="AST"><data key="type">AST</data></edge><edge id="1273" source="720" target="722" label="AST"><data key="type">AST</data></edge><edge id="1274" source="720" target="723" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1270" source="721" target="716" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1269" source="721" target="716" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1271" source="721" target="716" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1272" source="721" target="722" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1276" source="723" target="724" label="AST"><data key="type">AST</data></edge><edge id="1277" source="724" target="725" label="AST"><data key="type">AST</data></edge><edge id="1284" source="724" target="730" label="AST"><data key="type">AST</data></edge><edge id="1292" source="724" target="733" label="AST"><data key="type">AST</data></edge><edge id="1278" source="725" target="726" label="AST"><data key="type">AST</data></edge><edge id="1283" source="725" target="730" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1279" source="726" target="727" label="AST"><data key="type">AST</data></edge><edge id="1282" source="726" target="729" label="AST"><data key="type">AST</data></edge><edge id="1280" source="727" target="728" label="AST"><data key="type">AST</data></edge><edge id="1281" source="727" target="729" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1285" source="730" target="731" label="AST"><data key="type">AST</data></edge><edge id="1290" source="730" target="732" label="AST"><data key="type">AST</data></edge><edge id="1291" source="730" target="733" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1287" source="731" target="716" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1286" source="731" target="721" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1288" source="731" target="721" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1289" source="731" target="732" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1293" source="733" target="734" label="AST"><data key="type">AST</data></edge><edge id="1301" source="734" target="737" label="AST"><data key="type">AST</data></edge><edge id="1299" source="734" target="736" label="AST"><data key="type">AST</data></edge><edge id="1294" source="734" target="735" label="AST"><data key="type">AST</data></edge><edge id="1296" source="735" target="702" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1295" source="735" target="702" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1297" source="735" target="702" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1298" source="735" target="736" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1300" source="736" target="737" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1302" source="737" target="738" label="AST"><data key="type">AST</data></edge><edge id="1307" source="737" target="739" label="AST"><data key="type">AST</data></edge><edge id="1304" source="738" target="729" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1303" source="738" target="729" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1305" source="738" target="729" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1306" source="738" target="739" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1310" source="740" target="741" label="AST"><data key="type">AST</data></edge><edge id="1315" source="740" target="685" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="1312" source="741" target="702" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1311" source="741" target="735" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1314" source="741" target="735" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1313" source="741" target="702" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="866" source="500" target="501" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1327" source="742" target="749" label="AST"><data key="type">AST</data></edge><edge id="1333" source="742" target="753" label="AST"><data key="type">AST</data></edge><edge id="1320" source="742" target="744" label="AST"><data key="type">AST</data></edge><edge id="1318" source="742" target="743" label="AST"><data key="type">AST</data></edge><edge id="1385" source="742" target="780" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="869" source="501" target="493" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="868" source="501" target="493" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="870" source="501" target="493" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1319" source="743" target="744" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="873" source="502" target="503" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1325" source="744" target="748" label="AST"><data key="type">AST</data></edge><edge id="1321" source="744" target="745" label="AST"><data key="type">AST</data></edge><edge id="1326" source="744" target="749" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="883" source="503" target="507" label="AST"><data key="type">AST</data></edge><edge id="885" source="503" target="508" label="AST"><data key="type">AST</data></edge><edge id="875" source="503" target="504" label="AST"><data key="type">AST</data></edge><edge id="1322" source="745" target="746" label="AST"><data key="type">AST</data></edge><edge id="1324" source="745" target="748" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="876" source="504" target="505" label="AST"><data key="type">AST</data></edge><edge id="878" source="504" target="506" label="AST"><data key="type">AST</data></edge><edge id="882" source="504" target="507" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1323" source="746" target="747" label="AST"><data key="type">AST</data></edge><edge id="877" source="505" target="506" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="880" source="506" target="493" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="879" source="506" target="501" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="881" source="506" target="501" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="884" source="507" target="508" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1330" source="749" target="751" label="AST"><data key="type">AST</data></edge><edge id="1328" source="749" target="750" label="AST"><data key="type">AST</data></edge><edge id="1332" source="749" target="753" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="894" source="508" target="512" label="AST"><data key="type">AST</data></edge><edge id="896" source="508" target="513" label="AST"><data key="type">AST</data></edge><edge id="886" source="508" target="509" label="AST"><data key="type">AST</data></edge><edge id="887" source="509" target="510" label="AST"><data key="type">AST</data></edge><edge id="889" source="509" target="511" label="AST"><data key="type">AST</data></edge><edge id="893" source="509" target="512" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1329" source="750" target="751" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1331" source="751" target="752" label="AST"><data key="type">AST</data></edge><edge id="888" source="510" target="511" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="891" source="511" target="493" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="890" source="511" target="506" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="892" source="511" target="506" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1349" source="753" target="764" label="AST"><data key="type">AST</data></edge><edge id="1379" source="753" target="778" label="AST"><data key="type">AST</data></edge><edge id="1334" source="753" target="754" label="AST"><data key="type">AST</data></edge><edge id="895" source="512" target="513" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1335" source="754" target="755" label="AST"><data key="type">AST</data></edge><edge id="1348" source="754" target="764" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1336" source="755" target="756" label="AST"><data key="type">AST</data></edge><edge id="1344" source="755" target="761" label="AST"><data key="type">AST</data></edge><edge id="1342" source="755" target="760" label="AST"><data key="type">AST</data></edge><edge id="908" source="514" target="520" label="AST"><data key="type">AST</data></edge><edge id="900" source="514" target="515" label="AST"><data key="type">AST</data></edge><edge id="902" source="514" target="516" label="AST"><data key="type">AST</data></edge><edge id="914" source="514" target="524" label="AST"><data key="type">AST</data></edge><edge id="917" source="514" target="526" label="AST"><data key="type">AST</data></edge><edge id="952" source="514" target="545" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1337" source="756" target="757" label="AST"><data key="type">AST</data></edge><edge id="1339" source="756" target="758" label="AST"><data key="type">AST</data></edge><edge id="1341" source="756" target="760" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="901" source="515" target="516" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1338" source="757" target="758" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="903" source="516" target="517" label="AST"><data key="type">AST</data></edge><edge id="906" source="516" target="519" label="AST"><data key="type">AST</data></edge><edge id="907" source="516" target="520" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1340" source="758" target="759" label="AST"><data key="type">AST</data></edge><edge id="904" source="517" target="518" label="AST"><data key="type">AST</data></edge><edge id="905" source="517" target="519" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1343" source="760" target="761" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1347" source="761" target="763" label="AST"><data key="type">AST</data></edge><edge id="1345" source="761" target="762" label="AST"><data key="type">AST</data></edge><edge id="909" source="520" target="521" label="AST"><data key="type">AST</data></edge><edge id="912" source="520" target="523" label="AST"><data key="type">AST</data></edge><edge id="913" source="520" target="524" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1346" source="762" target="763" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="910" source="521" target="522" label="AST"><data key="type">AST</data></edge><edge id="911" source="521" target="523" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1357" source="764" target="770" label="AST"><data key="type">AST</data></edge><edge id="1362" source="764" target="771" label="AST"><data key="type">AST</data></edge><edge id="1350" source="764" target="765" label="AST"><data key="type">AST</data></edge><edge id="1378" source="764" target="778" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1351" source="765" target="766" label="AST"><data key="type">AST</data></edge><edge id="1356" source="765" target="770" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="915" source="524" target="525" label="AST"><data key="type">AST</data></edge><edge id="916" source="524" target="526" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1355" source="766" target="769" label="AST"><data key="type">AST</data></edge><edge id="1352" source="766" target="767" label="AST"><data key="type">AST</data></edge><edge id="1353" source="767" target="768" label="AST"><data key="type">AST</data></edge><edge id="1354" source="767" target="769" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="918" source="526" target="527" label="AST"><data key="type">AST</data></edge><edge id="919" source="527" target="528" label="AST"><data key="type">AST</data></edge><edge id="951" source="527" target="514" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="950" source="528" target="544" label="AST"><data key="type">AST</data></edge><edge id="920" source="528" target="529" label="AST"><data key="type">AST</data></edge><edge id="921" source="529" target="530" label="AST"><data key="type">AST</data></edge><edge id="932" source="529" target="535" label="AST"><data key="type">AST</data></edge><edge id="949" source="529" target="544" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1359" source="770" target="748" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1358" source="770" target="748" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1360" source="770" target="748" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1361" source="770" target="771" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1363" source="771" target="772" label="AST"><data key="type">AST</data></edge><edge id="930" source="530" target="534" label="AST"><data key="type">AST</data></edge><edge id="922" source="530" target="531" label="AST"><data key="type">AST</data></edge><edge id="931" source="530" target="535" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1369" source="772" target="774" label="AST"><data key="type">AST</data></edge><edge id="1364" source="772" target="773" label="AST"><data key="type">AST</data></edge><edge id="1371" source="772" target="775" label="AST"><data key="type">AST</data></edge><edge id="923" source="531" target="532" label="AST"><data key="type">AST</data></edge><edge id="925" source="531" target="533" label="AST"><data key="type">AST</data></edge><edge id="929" source="531" target="534" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1366" source="773" target="760" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1365" source="773" target="760" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1367" source="773" target="760" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1368" source="773" target="774" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="924" source="532" target="533" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1370" source="774" target="775" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="927" source="533" target="523" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="926" source="533" target="523" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="928" source="533" target="523" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1377" source="775" target="777" label="AST"><data key="type">AST</data></edge><edge id="1372" source="775" target="776" label="AST"><data key="type">AST</data></edge><edge id="1374" source="776" target="769" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1373" source="776" target="769" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1375" source="776" target="769" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1376" source="776" target="777" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="940" source="535" target="540" label="AST"><data key="type">AST</data></edge><edge id="942" source="535" target="541" label="AST"><data key="type">AST</data></edge><edge id="933" source="535" target="536" label="AST"><data key="type">AST</data></edge><edge id="934" source="536" target="537" label="AST"><data key="type">AST</data></edge><edge id="936" source="536" target="538" label="AST"><data key="type">AST</data></edge><edge id="938" source="536" target="539" label="AST"><data key="type">AST</data></edge><edge id="939" source="536" target="540" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1380" source="778" target="779" label="AST"><data key="type">AST</data></edge><edge id="1384" source="778" target="742" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="935" source="537" target="538" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1382" source="779" target="760" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1381" source="779" target="773" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1383" source="779" target="773" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="937" source="538" target="539" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1401" source="780" target="790" label="AST"><data key="type">AST</data></edge><edge id="1389" source="780" target="782" label="AST"><data key="type">AST</data></edge><edge id="1387" source="780" target="781" label="AST"><data key="type">AST</data></edge><edge id="1395" source="780" target="786" label="AST"><data key="type">AST</data></edge><edge id="1629" source="780" target="895" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1388" source="781" target="782" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="941" source="540" target="541" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1393" source="782" target="785" label="AST"><data key="type">AST</data></edge><edge id="1390" source="782" target="783" label="AST"><data key="type">AST</data></edge><edge id="1394" source="782" target="786" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="943" source="541" target="542" label="AST"><data key="type">AST</data></edge><edge id="945" source="541" target="543" label="AST"><data key="type">AST</data></edge><edge id="1391" source="783" target="784" label="AST"><data key="type">AST</data></edge><edge id="1392" source="783" target="785" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="485" source="300" target="301" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="944" source="542" target="543" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="487" source="301" target="302" label="AST"><data key="type">AST</data></edge><edge id="490" source="301" target="304" label="AST"><data key="type">AST</data></edge><edge id="502" source="301" target="310" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="947" source="543" target="523" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="946" source="543" target="533" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="948" source="543" target="533" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="488" source="302" target="303" label="AST"><data key="type">AST</data></edge><edge id="489" source="302" target="304" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1398" source="786" target="788" label="AST"><data key="type">AST</data></edge><edge id="1396" source="786" target="787" label="AST"><data key="type">AST</data></edge><edge id="1400" source="786" target="790" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="971" source="545" target="557" label="AST"><data key="type">AST</data></edge><edge id="962" source="545" target="551" label="AST"><data key="type">AST</data></edge><edge id="954" source="545" target="546" label="AST"><data key="type">AST</data></edge><edge id="956" source="545" target="547" label="AST"><data key="type">AST</data></edge><edge id="968" source="545" target="555" label="AST"><data key="type">AST</data></edge><edge id="998" source="545" target="569" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1397" source="787" target="788" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="496" source="304" target="306" label="AST"><data key="type">AST</data></edge><edge id="498" source="304" target="307" label="AST"><data key="type">AST</data></edge><edge id="491" source="304" target="305" label="AST"><data key="type">AST</data></edge><edge id="955" source="546" target="547" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1399" source="788" target="789" label="AST"><data key="type">AST</data></edge><edge id="493" source="305" target="272" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="492" source="305" target="272" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="494" source="305" target="272" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="495" source="305" target="306" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="960" source="547" target="550" label="AST"><data key="type">AST</data></edge><edge id="957" source="547" target="548" label="AST"><data key="type">AST</data></edge><edge id="961" source="547" target="551" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="497" source="306" target="307" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="958" source="548" target="549" label="AST"><data key="type">AST</data></edge><edge id="959" source="548" target="550" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="499" source="307" target="308" label="AST"><data key="type">AST</data></edge><edge id="501" source="307" target="309" label="AST"><data key="type">AST</data></edge><edge id="500" source="308" target="309" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1402" source="790" target="791" label="AST"><data key="type">AST</data></edge><edge id="1622" source="790" target="893" label="AST"><data key="type">AST</data></edge><edge id="1417" source="790" target="801" label="AST"><data key="type">AST</data></edge><edge id="1403" source="791" target="792" label="AST"><data key="type">AST</data></edge><edge id="1416" source="791" target="801" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1404" source="792" target="793" label="AST"><data key="type">AST</data></edge><edge id="1412" source="792" target="798" label="AST"><data key="type">AST</data></edge><edge id="1410" source="792" target="797" label="AST"><data key="type">AST</data></edge><edge id="963" source="551" target="552" label="AST"><data key="type">AST</data></edge><edge id="966" source="551" target="554" label="AST"><data key="type">AST</data></edge><edge id="967" source="551" target="555" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1407" source="793" target="795" label="AST"><data key="type">AST</data></edge><edge id="1405" source="793" target="794" label="AST"><data key="type">AST</data></edge><edge id="1409" source="793" target="797" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="504" source="310" target="311" label="AST"><data key="type">AST</data></edge><edge id="507" source="310" target="313" label="AST"><data key="type">AST</data></edge><edge id="964" source="552" target="553" label="AST"><data key="type">AST</data></edge><edge id="965" source="552" target="554" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1406" source="794" target="795" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="505" source="311" target="312" label="AST"><data key="type">AST</data></edge><edge id="506" source="311" target="313" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1408" source="795" target="796" label="AST"><data key="type">AST</data></edge><edge id="513" source="313" target="315" label="AST"><data key="type">AST</data></edge><edge id="515" source="313" target="316" label="AST"><data key="type">AST</data></edge><edge id="508" source="313" target="314" label="AST"><data key="type">AST</data></edge><edge id="969" source="555" target="556" label="AST"><data key="type">AST</data></edge><edge id="970" source="555" target="557" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1411" source="797" target="798" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="510" source="314" target="272" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="509" source="314" target="305" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="511" source="314" target="305" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="512" source="314" target="315" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1415" source="798" target="800" label="AST"><data key="type">AST</data></edge><edge id="1413" source="798" target="799" label="AST"><data key="type">AST</data></edge><edge id="514" source="315" target="316" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="972" source="557" target="558" label="AST"><data key="type">AST</data></edge><edge id="1414" source="799" target="800" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="516" source="316" target="317" label="AST"><data key="type">AST</data></edge><edge id="518" source="316" target="318" label="AST"><data key="type">AST</data></edge><edge id="973" source="558" target="559" label="AST"><data key="type">AST</data></edge><edge id="997" source="558" target="545" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="517" source="317" target="318" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="974" source="559" target="560" label="AST"><data key="type">AST</data></edge><edge id="985" source="559" target="565" label="AST"><data key="type">AST</data></edge><edge id="521" source="319" target="320" label="AST"><data key="type">AST</data></edge><edge id="529" source="319" target="323" label="AST"><data key="type">AST</data></edge><edge id="620" source="319" target="369" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="983" source="560" target="564" label="AST"><data key="type">AST</data></edge><edge id="975" source="560" target="561" label="AST"><data key="type">AST</data></edge><edge id="984" source="560" target="565" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="976" source="561" target="562" label="AST"><data key="type">AST</data></edge><edge id="978" source="561" target="563" label="AST"><data key="type">AST</data></edge><edge id="982" source="561" target="564" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="522" source="320" target="321" label="AST"><data key="type">AST</data></edge><edge id="527" source="320" target="322" label="AST"><data key="type">AST</data></edge><edge id="528" source="320" target="323" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="977" source="562" target="563" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="524" source="321" target="297" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="523" source="321" target="297" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="525" source="321" target="297" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="526" source="321" target="322" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="980" source="563" target="550" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="979" source="563" target="550" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="981" source="563" target="550" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="530" source="323" target="324" label="AST"><data key="type">AST</data></edge><edge id="993" source="565" target="568" label="AST"><data key="type">AST</data></edge><edge id="986" source="565" target="566" label="AST"><data key="type">AST</data></edge><edge id="988" source="565" target="567" label="AST"><data key="type">AST</data></edge><edge id="531" source="324" target="325" label="AST"><data key="type">AST</data></edge><edge id="543" source="324" target="331" label="AST"><data key="type">AST</data></edge><edge id="538" source="324" target="330" label="AST"><data key="type">AST</data></edge><edge id="987" source="566" target="567" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="532" source="325" target="326" label="AST"><data key="type">AST</data></edge><edge id="537" source="325" target="330" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="990" source="567" target="550" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="989" source="567" target="563" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="991" source="567" target="563" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="992" source="567" target="568" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="533" source="326" target="327" label="AST"><data key="type">AST</data></edge><edge id="536" source="326" target="329" label="AST"><data key="type">AST</data></edge><edge id="995" source="568" target="554" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="994" source="568" target="554" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="996" source="568" target="554" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="534" source="327" target="328" label="AST"><data key="type">AST</data></edge><edge id="535" source="327" target="329" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1008" source="569" target="575" label="AST"><data key="type">AST</data></edge><edge id="1002" source="569" target="571" label="AST"><data key="type">AST</data></edge><edge id="1000" source="569" target="570" label="AST"><data key="type">AST</data></edge><edge id="1010" source="569" target="576" label="AST"><data key="type">AST</data></edge><edge id="1109" source="569" target="628" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1001" source="570" target="571" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1006" source="571" target="574" label="AST"><data key="type">AST</data></edge><edge id="1003" source="571" target="572" label="AST"><data key="type">AST</data></edge><edge id="1007" source="571" target="575" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="540" source="330" target="297" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="539" source="330" target="321" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="541" source="330" target="321" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="542" source="330" target="331" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1004" source="572" target="573" label="AST"><data key="type">AST</data></edge><edge id="1005" source="572" target="574" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="544" source="331" target="332" label="AST"><data key="type">AST</data></edge><edge id="553" source="332" target="336" label="AST"><data key="type">AST</data></edge><edge id="545" source="332" target="333" label="AST"><data key="type">AST</data></edge><edge id="551" source="333" target="335" label="AST"><data key="type">AST</data></edge><edge id="546" source="333" target="334" label="AST"><data key="type">AST</data></edge><edge id="552" source="333" target="336" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1009" source="575" target="576" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="548" source="334" target="329" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="547" source="334" target="329" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="549" source="334" target="329" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="550" source="334" target="335" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1089" source="576" target="619" label="AST"><data key="type">AST</data></edge><edge id="1011" source="576" target="577" label="AST"><data key="type">AST</data></edge><edge id="1012" source="577" target="578" label="AST"><data key="type">AST</data></edge><edge id="1088" source="577" target="619" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="554" source="336" target="337" label="AST"><data key="type">AST</data></edge><edge id="571" source="336" target="347" label="AST"><data key="type">AST</data></edge><edge id="1018" source="578" target="582" label="AST"><data key="type">AST</data></edge><edge id="1016" source="578" target="581" label="AST"><data key="type">AST</data></edge><edge id="1013" source="578" target="579" label="AST"><data key="type">AST</data></edge><edge id="555" source="337" target="338" label="AST"><data key="type">AST</data></edge><edge id="570" source="337" target="347" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1014" source="579" target="580" label="AST"><data key="type">AST</data></edge><edge id="1015" source="579" target="581" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="561" source="338" target="343" label="AST"><data key="type">AST</data></edge><edge id="563" source="338" target="344" label="AST"><data key="type">AST</data></edge><edge id="556" source="338" target="339" label="AST"><data key="type">AST</data></edge><edge id="557" source="339" target="340" label="AST"><data key="type">AST</data></edge><edge id="560" source="339" target="343" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1017" source="581" target="582" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="558" source="340" target="341" label="AST"><data key="type">AST</data></edge><edge id="1019" source="582" target="583" label="AST"><data key="type">AST</data></edge><edge id="1028" source="582" target="587" label="AST"><data key="type">AST</data></edge><edge id="1041" source="582" target="594" label="AST"><data key="type">AST</data></edge><edge id="559" source="341" target="342" label="AST"><data key="type">AST</data></edge><edge id="1025" source="583" target="585" label="AST"><data key="type">AST</data></edge><edge id="1020" source="583" target="584" label="AST"><data key="type">AST</data></edge><edge id="1027" source="583" target="587" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1022" source="584" target="574" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1021" source="584" target="574" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1023" source="584" target="574" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1024" source="584" target="585" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="562" source="343" target="344" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1026" source="585" target="586" label="AST"><data key="type">AST</data></edge><edge id="135" source="102" target="103" label="AST"><data key="type">AST</data></edge><edge id="137" source="102" target="104" label="AST"><data key="type">AST</data></edge><edge id="139" source="102" target="106" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="564" source="344" target="345" label="AST"><data key="type">AST</data></edge><edge id="569" source="344" target="346" label="AST"><data key="type">AST</data></edge><edge id="136" source="103" target="104" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="566" source="345" target="329" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="565" source="345" target="334" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="567" source="345" target="334" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="568" source="345" target="346" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1029" source="587" target="588" label="AST"><data key="type">AST</data></edge><edge id="1039" source="587" target="593" label="AST"><data key="type">AST</data></edge><edge id="1040" source="587" target="594" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="138" source="104" target="105" label="AST"><data key="type">AST</data></edge><edge id="1030" source="588" target="589" label="AST"><data key="type">AST</data></edge><edge id="1038" source="588" target="593" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="572" source="347" target="348" label="AST"><data key="type">AST</data></edge><edge id="585" source="347" target="353" label="AST"><data key="type">AST</data></edge><edge id="1034" source="589" target="592" label="AST"><data key="type">AST</data></edge><edge id="1031" source="589" target="590" label="AST"><data key="type">AST</data></edge><edge id="141" source="106" target="107" label="AST"><data key="type">AST</data></edge><edge id="573" source="348" target="349" label="AST"><data key="type">AST</data></edge><edge id="578" source="348" target="350" label="AST"><data key="type">AST</data></edge><edge id="584" source="348" target="353" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="142" source="107" target="108" label="AST"><data key="type">AST</data></edge><edge id="149" source="107" target="96" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="575" source="349" target="275" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="574" source="349" target="275" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="576" source="349" target="275" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="577" source="349" target="350" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="143" source="108" target="109" label="AST"><data key="type">AST</data></edge><edge id="148" source="108" target="110" label="AST"><data key="type">AST</data></edge><edge id="145" source="109" target="101" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="144" source="109" target="101" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="146" source="109" target="101" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="147" source="109" target="110" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1032" source="590" target="591" label="AST"><data key="type">AST</data></edge><edge id="1033" source="590" target="592" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="583" source="350" target="352" label="AST"><data key="type">AST</data></edge><edge id="579" source="350" target="351" label="AST"><data key="type">AST</data></edge><edge id="1036" source="592" target="574" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1035" source="592" target="584" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1037" source="592" target="584" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="580" source="351" target="343" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="581" source="351" target="343" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="582" source="351" target="352" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1042" source="594" target="595" label="AST"><data key="type">AST</data></edge><edge id="1064" source="594" target="606" label="AST"><data key="type">AST</data></edge><edge id="1051" source="594" target="599" label="AST"><data key="type">AST</data></edge><edge id="154" source="111" target="113" label="AST"><data key="type">AST</data></edge><edge id="160" source="111" target="117" label="AST"><data key="type">AST</data></edge><edge id="152" source="111" target="112" label="AST"><data key="type">AST</data></edge><edge id="163" source="111" target="119" label="AST"><data key="type">AST</data></edge><edge id="173" source="111" target="124" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="586" source="353" target="354" label="AST"><data key="type">AST</data></edge><edge id="605" source="353" target="363" label="AST"><data key="type">AST</data></edge><edge id="1048" source="595" target="597" label="AST"><data key="type">AST</data></edge><edge id="1043" source="595" target="596" label="AST"><data key="type">AST</data></edge><edge id="1050" source="595" target="599" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="153" source="112" target="113" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="587" source="354" target="355" label="AST"><data key="type">AST</data></edge><edge id="604" source="354" target="363" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="1045" source="596" target="574" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="1044" source="596" target="592" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="1046" source="596" target="592" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="1047" source="596" target="597" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="155" source="113" target="114" label="AST"><data key="type">AST</data></edge><edge id="158" source="113" target="116" label="AST"><data key="type">AST</data></edge><edge id="159" source="113" target="117" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="594" source="355" target="360" label="AST"><data key="type">AST</data></edge><edge id="588" source="355" target="356" label="AST"><data key="type">AST</data></edge><edge id="592" source="355" target="359" label="AST"><data key="type">AST</data></edge><edge id="1049" source="597" target="598" label="AST"><data key="type">AST</data></edge><edge id="156" source="114" target="115" label="AST"><data key="type">AST</data></edge><edge id="157" source="114" target="116" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="589" source="356" target="357" label="AST"><data key="type">AST</data></edge><edge id="591" source="356" target="359" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="590" source="357" target="358" label="AST"><data key="type">AST</data></edge><edge id="1052" source="599" target="600" label="AST"><data key="type">AST</data></edge><edge id="1062" source="599" target="605" label="AST"><data key="type">AST</data></edge><edge id="1063" source="599" target="606" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="161" source="117" target="118" label="AST"><data key="type">AST</data></edge><edge id="162" source="117" target="119" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="593" source="359" target="360" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="164" source="119" target="120" label="AST"><data key="type">AST</data></edge><edge id="10" source="10" target="11" label="AST"><data key="type">AST</data></edge><edge id="13" source="12" target="13" label="AST"><data key="type">AST</data></edge><edge id="18" source="12" target="18" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="14" source="13" target="14" label="AST"><data key="type">AST</data></edge><edge id="15" source="14" target="15" label="AST"><data key="type">AST</data></edge><edge id="16" source="15" target="16" label="AST"><data key="type">AST</data></edge><edge id="17" source="16" target="17" label="AST"><data key="type">AST</data></edge><edge id="20" source="18" target="19" label="AST"><data key="type">AST</data></edge><edge id="22" source="18" target="21" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="21" source="19" target="20" label="AST"><data key="type">AST</data></edge><edge id="595" source="360" target="361" label="AST"><data key="type">AST</data></edge><edge id="600" source="360" target="362" label="AST"><data key="type">AST</data></edge><edge id="597" source="361" target="343" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="596" source="361" target="343" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="598" source="361" target="351" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="599" source="361" target="362" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="165" source="120" target="121" label="AST"><data key="type">AST</data></edge><edge id="172" source="120" target="111" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="602" source="362" target="275" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="601" source="362" target="349" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="603" source="362" target="349" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="166" source="121" target="122" label="AST"><data key="type">AST</data></edge><edge id="171" source="121" target="123" label="AST"><data key="type">AST</data></edge><edge id="611" source="363" target="365" label="AST"><data key="type">AST</data></edge><edge id="613" source="363" target="366" label="AST"><data key="type">AST</data></edge><edge id="606" source="363" target="364" label="AST"><data key="type">AST</data></edge><edge id="168" source="122" target="116" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="167" source="122" target="116" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="169" source="122" target="116" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="170" source="122" target="123" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="608" source="364" target="287" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="607" source="364" target="287" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="609" source="364" target="287" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="610" source="364" target="365" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="612" source="365" target="366" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="177" source="124" target="126" label="AST"><data key="type">AST</data></edge><edge id="189" source="124" target="134" label="AST"><data key="type">AST</data></edge><edge id="183" source="124" target="130" label="AST"><data key="type">AST</data></edge><edge id="175" source="124" target="125" label="AST"><data key="type">AST</data></edge><edge id="254" source="124" target="162" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="614" source="366" target="367" label="AST"><data key="type">AST</data></edge><edge id="616" source="366" target="368" label="AST"><data key="type">AST</data></edge><edge id="176" source="125" target="126" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="615" source="367" target="368" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="178" source="126" target="127" label="AST"><data key="type">AST</data></edge><edge id="181" source="126" target="129" label="AST"><data key="type">AST</data></edge><edge id="182" source="126" target="130" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="618" source="368" target="359" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="617" source="368" target="359" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="619" source="368" target="359" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="179" source="127" target="128" label="AST"><data key="type">AST</data></edge><edge id="180" source="127" target="129" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="622" source="369" target="370" label="AST"><data key="type">AST</data></edge><edge id="627" source="369" target="267" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="24" source="21" target="22" label="AST"><data key="type">AST</data></edge><edge id="28" source="21" target="26" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="25" source="22" target="23" label="AST"><data key="type">AST</data></edge><edge id="26" source="23" target="24" label="AST"><data key="type">AST</data></edge><edge id="27" source="24" target="25" label="AST"><data key="type">AST</data></edge><edge id="30" source="26" target="27" label="AST"><data key="type">AST</data></edge><edge id="33" source="26" target="30" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="31" source="27" target="28" label="AST"><data key="type">AST</data></edge><edge id="32" source="28" target="29" label="AST"><data key="type">AST</data></edge><edge id="624" source="370" target="287" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="623" source="370" target="364" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="625" source="370" target="287" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="626" source="370" target="364" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="630" source="371" target="372" label="AST"><data key="type">AST</data></edge><edge id="641" source="371" target="379" label="AST"><data key="type">AST</data></edge><edge id="632" source="371" target="373" label="AST"><data key="type">AST</data></edge><edge id="638" source="371" target="377" label="AST"><data key="type">AST</data></edge><edge id="700" source="371" target="406" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="184" source="130" target="131" label="AST"><data key="type">AST</data></edge><edge id="186" source="130" target="132" label="AST"><data key="type">AST</data></edge><edge id="188" source="130" target="134" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="631" source="372" target="373" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="185" source="131" target="132" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="633" source="373" target="374" label="AST"><data key="type">AST</data></edge><edge id="636" source="373" target="376" label="AST"><data key="type">AST</data></edge><edge id="637" source="373" target="377" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="187" source="132" target="133" label="AST"><data key="type">AST</data></edge><edge id="634" source="374" target="375" label="AST"><data key="type">AST</data></edge><edge id="635" source="374" target="376" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="245" source="134" target="158" label="AST"><data key="type">AST</data></edge><edge id="205" source="134" target="143" label="AST"><data key="type">AST</data></edge><edge id="190" source="134" target="135" label="AST"><data key="type">AST</data></edge><edge id="191" source="135" target="136" label="AST"><data key="type">AST</data></edge><edge id="204" source="135" target="143" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="639" source="377" target="378" label="AST"><data key="type">AST</data></edge><edge id="640" source="377" target="379" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="192" source="136" target="137" label="AST"><data key="type">AST</data></edge><edge id="195" source="136" target="139" label="AST"><data key="type">AST</data></edge><edge id="197" source="136" target="140" label="AST"><data key="type">AST</data></edge><edge id="193" source="137" target="138" label="AST"><data key="type">AST</data></edge><edge id="194" source="137" target="139" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="642" source="379" target="380" label="AST"><data key="type">AST</data></edge><edge id="686" source="379" target="399" label="AST"><data key="type">AST</data></edge><edge id="657" source="379" target="388" label="AST"><data key="type">AST</data></edge><edge id="196" source="139" target="140" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="35" source="30" target="31" label="AST"><data key="type">AST</data></edge><edge id="39" source="30" target="35" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="36" source="31" target="32" label="AST"><data key="type">AST</data></edge><edge id="37" source="32" target="33" label="AST"><data key="type">AST</data></edge><edge id="38" source="33" target="34" label="AST"><data key="type">AST</data></edge><edge id="41" source="35" target="36" label="AST"><data key="type">AST</data></edge><edge id="45" source="35" target="40" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="42" source="36" target="37" label="AST"><data key="type">AST</data></edge><edge id="43" source="37" target="38" label="AST"><data key="type">AST</data></edge><edge id="44" source="38" target="39" label="AST"><data key="type">AST</data></edge><edge id="643" source="380" target="381" label="AST"><data key="type">AST</data></edge><edge id="656" source="380" target="388" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="644" source="381" target="382" label="AST"><data key="type">AST</data></edge><edge id="647" source="381" target="384" label="AST"><data key="type">AST</data></edge><edge id="649" source="381" target="385" label="AST"><data key="type">AST</data></edge><edge id="198" source="140" target="141" label="AST"><data key="type">AST</data></edge><edge id="203" source="140" target="142" label="AST"><data key="type">AST</data></edge><edge id="645" source="382" target="383" label="AST"><data key="type">AST</data></edge><edge id="646" source="382" target="384" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="200" source="141" target="129" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="199" source="141" target="129" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="201" source="141" target="129" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="202" source="141" target="142" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="648" source="384" target="385" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="214" source="143" target="145" label="AST"><data key="type">AST</data></edge><edge id="206" source="143" target="144" label="AST"><data key="type">AST</data></edge><edge id="244" source="143" target="158" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="650" source="385" target="386" label="AST"><data key="type">AST</data></edge><edge id="655" source="385" target="387" label="AST"><data key="type">AST</data></edge><edge id="211" source="144" target="139" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="207" source="144" target="139" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="210" source="144" target="155" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="208" source="144" target="146" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="209" source="144" target="150" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="212" source="144" target="155" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="213" source="144" target="145" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="652" source="386" target="376" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="651" source="386" target="376" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="653" source="386" target="376" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="654" source="386" target="387" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="220" source="145" target="147" label="AST"><data key="type">AST</data></edge><edge id="222" source="145" target="148" label="AST"><data key="type">AST</data></edge><edge id="235" source="145" target="154" label="AST"><data key="type">AST</data></edge><edge id="215" source="145" target="146" label="AST"><data key="type">AST</data></edge><edge id="217" source="146" target="139" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="216" source="146" target="144" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="218" source="146" target="139" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="219" source="146" target="147" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="665" source="388" target="390" label="AST"><data key="type">AST</data></edge><edge id="658" source="388" target="389" label="AST"><data key="type">AST</data></edge><edge id="685" source="388" target="399" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="221" source="147" target="148" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="662" source="389" target="384" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="659" source="389" target="384" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="660" source="389" target="391" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="661" source="389" target="395" label="COMPUTED_FROM"><data key="type">COMPUTED_FROM</data></edge><edge id="663" source="389" target="395" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="664" source="389" target="390" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="233" source="148" target="153" label="AST"><data key="type">AST</data></edge><edge id="223" source="148" target="149" label="AST"><data key="type">AST</data></edge><edge id="234" source="148" target="154" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="231" source="149" target="152" label="AST"><data key="type">AST</data></edge><edge id="224" source="149" target="150" label="AST"><data key="type">AST</data></edge><edge id="229" source="149" target="151" label="AST"><data key="type">AST</data></edge><edge id="232" source="149" target="153" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="47" source="40" target="41" label="AST"><data key="type">AST</data></edge><edge id="50" source="40" target="44" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="48" source="41" target="42" label="AST"><data key="type">AST</data></edge><edge id="49" source="42" target="43" label="AST"><data key="type">AST</data></edge><edge id="52" source="44" target="45" label="AST"><data key="type">AST</data></edge><edge id="55" source="44" target="48" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="53" source="45" target="46" label="AST"><data key="type">AST</data></edge><edge id="54" source="46" target="47" label="AST"><data key="type">AST</data></edge><edge id="57" source="48" target="49" label="AST"><data key="type">AST</data></edge><edge id="60" source="48" target="52" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="58" source="49" target="50" label="AST"><data key="type">AST</data></edge><edge id="671" source="390" target="392" label="AST"><data key="type">AST</data></edge><edge id="673" source="390" target="393" label="AST"><data key="type">AST</data></edge><edge id="666" source="390" target="391" label="AST"><data key="type">AST</data></edge><edge id="668" source="391" target="384" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="667" source="391" target="389" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="669" source="391" target="384" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="670" source="391" target="392" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="226" source="150" target="139" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="225" source="150" target="146" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="227" source="150" target="146" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="228" source="150" target="151" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="672" source="392" target="393" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="230" source="151" target="152" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="684" source="393" target="398" label="AST"><data key="type">AST</data></edge><edge id="674" source="393" target="394" label="AST"><data key="type">AST</data></edge><edge id="682" source="394" target="397" label="AST"><data key="type">AST</data></edge><edge id="675" source="394" target="395" label="AST"><data key="type">AST</data></edge><edge id="680" source="394" target="396" label="AST"><data key="type">AST</data></edge><edge id="683" source="394" target="398" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="677" source="395" target="384" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="676" source="395" target="391" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="678" source="395" target="391" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="679" source="395" target="396" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="243" source="154" target="157" label="AST"><data key="type">AST</data></edge><edge id="236" source="154" target="155" label="AST"><data key="type">AST</data></edge><edge id="241" source="154" target="156" label="AST"><data key="type">AST</data></edge><edge id="681" source="396" target="397" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="238" source="155" target="139" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="237" source="155" target="150" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="239" source="155" target="150" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="240" source="155" target="156" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="242" source="156" target="157" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="687" source="399" target="400" label="AST"><data key="type">AST</data></edge><edge id="699" source="399" target="371" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="246" source="158" target="159" label="AST"><data key="type">AST</data></edge><edge id="253" source="158" target="124" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="247" source="159" target="160" label="AST"><data key="type">AST</data></edge><edge id="249" source="159" target="161" label="AST"><data key="type">AST</data></edge><edge id="59" source="50" target="51" label="AST"><data key="type">AST</data></edge><edge id="62" source="52" target="53" label="AST"><data key="type">AST</data></edge><edge id="65" source="52" target="56" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="63" source="53" target="54" label="AST"><data key="type">AST</data></edge><edge id="64" source="54" target="55" label="AST"><data key="type">AST</data></edge><edge id="67" source="56" target="57" label="AST"><data key="type">AST</data></edge><edge id="70" source="56" target="60" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="68" source="57" target="58" label="AST"><data key="type">AST</data></edge><edge id="69" source="58" target="59" label="AST"><data key="type">AST</data></edge><edge id="248" source="160" target="161" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="251" source="161" target="144" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="250" source="161" target="155" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="252" source="161" target="144" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="264" source="162" target="168" label="AST"><data key="type">AST</data></edge><edge id="256" source="162" target="163" label="AST"><data key="type">AST</data></edge><edge id="258" source="162" target="164" label="AST"><data key="type">AST</data></edge><edge id="270" source="162" target="172" label="AST"><data key="type">AST</data></edge><edge id="314" source="162" target="197" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="257" source="163" target="164" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="259" source="164" target="165" label="AST"><data key="type">AST</data></edge><edge id="262" source="164" target="167" label="AST"><data key="type">AST</data></edge><edge id="263" source="164" target="168" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="260" source="165" target="166" label="AST"><data key="type">AST</data></edge><edge id="261" source="165" target="167" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="265" source="168" target="169" label="AST"><data key="type">AST</data></edge><edge id="267" source="168" target="170" label="AST"><data key="type">AST</data></edge><edge id="269" source="168" target="172" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="266" source="169" target="170" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="72" source="60" target="61" label="AST"><data key="type">AST</data></edge><edge id="75" source="60" target="64" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="73" source="61" target="62" label="AST"><data key="type">AST</data></edge><edge id="74" source="62" target="63" label="AST"><data key="type">AST</data></edge><edge id="77" source="64" target="65" label="AST"><data key="type">AST</data></edge><edge id="81" source="64" target="69" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="78" source="65" target="66" label="AST"><data key="type">AST</data></edge><edge id="79" source="66" target="67" label="AST"><data key="type">AST</data></edge><edge id="80" source="67" target="68" label="AST"><data key="type">AST</data></edge><edge id="83" source="69" target="70" label="AST"><data key="type">AST</data></edge><edge id="87" source="69" target="74" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="268" source="170" target="171" label="AST"><data key="type">AST</data></edge><edge id="271" source="172" target="173" label="AST"><data key="type">AST</data></edge><edge id="272" source="173" target="174" label="AST"><data key="type">AST</data></edge><edge id="313" source="173" target="162" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="275" source="174" target="176" label="AST"><data key="type">AST</data></edge><edge id="292" source="174" target="185" label="AST"><data key="type">AST</data></edge><edge id="273" source="174" target="175" label="AST"><data key="type">AST</data></edge><edge id="274" source="175" target="176" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="276" source="176" target="177" label="AST"><data key="type">AST</data></edge><edge id="279" source="176" target="179" label="AST"><data key="type">AST</data></edge><edge id="291" source="176" target="185" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="277" source="177" target="178" label="AST"><data key="type">AST</data></edge><edge id="278" source="177" target="179" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="287" source="179" target="182" label="AST"><data key="type">AST</data></edge><edge id="280" source="179" target="180" label="AST"><data key="type">AST</data></edge><edge id="285" source="179" target="181" label="AST"><data key="type">AST</data></edge><edge id="84" source="70" target="71" label="AST"><data key="type">AST</data></edge><edge id="85" source="71" target="72" label="AST"><data key="type">AST</data></edge><edge id="86" source="72" target="73" label="AST"><data key="type">AST</data></edge><edge id="89" source="74" target="75" label="AST"><data key="type">AST</data></edge><edge id="1187" source="74" target="672" label="AST"><data key="type">AST</data></edge><edge id="151" source="74" target="111" label="AST"><data key="type">AST</data></edge><edge id="174" source="74" target="124" label="AST"><data key="type">AST</data></edge><edge id="375" source="74" target="232" label="AST"><data key="type">AST</data></edge><edge id="255" source="74" target="162" label="AST"><data key="type">AST</data></edge><edge id="1630" source="74" target="895" label="AST"><data key="type">AST</data></edge><edge id="435" source="74" target="267" label="AST"><data key="type">AST</data></edge><edge id="1156" source="74" target="654" label="AST"><data key="type">AST</data></edge><edge id="1211" source="74" target="685" label="AST"><data key="type">AST</data></edge><edge id="315" source="74" target="197" label="AST"><data key="type">AST</data></edge><edge id="953" source="74" target="545" label="AST"><data key="type">AST</data></edge><edge id="1133" source="74" target="641" label="AST"><data key="type">AST</data></edge><edge id="91" source="74" target="76" label="AST"><data key="type">AST</data></edge><edge id="899" source="74" target="514" label="AST"><data key="type">AST</data></edge><edge id="999" source="74" target="569" label="AST"><data key="type">AST</data></edge><edge id="835" source="74" target="481" label="AST"><data key="type">AST</data></edge><edge id="1317" source="74" target="742" label="AST"><data key="type">AST</data></edge><edge id="99" source="74" target="81" label="AST"><data key="type">AST</data></edge><edge id="1110" source="74" target="628" label="AST"><data key="type">AST</data></edge><edge id="125" source="74" target="96" label="AST"><data key="type">AST</data></edge><edge id="1386" source="74" target="780" label="AST"><data key="type">AST</data></edge><edge id="701" source="74" target="406" label="AST"><data key="type">AST</data></edge><edge id="724" source="74" target="419" label="AST"><data key="type">AST</data></edge><edge id="629" source="74" target="371" label="AST"><data key="type">AST</data></edge><edge id="90" source="75" target="76" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="92" source="76" target="77" label="AST"><data key="type">AST</data></edge><edge id="98" source="76" target="81" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="93" source="77" target="78" label="AST"><data key="type">AST</data></edge><edge id="95" source="77" target="79" label="AST"><data key="type">AST</data></edge><edge id="97" source="77" target="80" label="AST"><data key="type">AST</data></edge><edge id="94" source="78" target="79" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="96" source="79" target="80" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="282" source="180" target="167" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="281" source="180" target="167" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="283" source="180" target="167" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="284" source="180" target="181" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="286" source="181" target="182" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="288" source="182" target="183" label="AST"><data key="type">AST</data></edge><edge id="290" source="182" target="184" label="AST"><data key="type">AST</data></edge><edge id="289" source="183" target="184" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="312" source="185" target="196" label="AST"><data key="type">AST</data></edge><edge id="293" source="185" target="186" label="AST"><data key="type">AST</data></edge><edge id="295" source="185" target="187" label="AST"><data key="type">AST</data></edge><edge id="294" source="186" target="187" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="299" source="187" target="190" label="AST"><data key="type">AST</data></edge><edge id="296" source="187" target="188" label="AST"><data key="type">AST</data></edge><edge id="311" source="187" target="196" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="297" source="188" target="189" label="AST"><data key="type">AST</data></edge><edge id="298" source="188" target="190" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="100" source="81" target="82" label="AST"><data key="type">AST</data></edge><edge id="102" source="81" target="83" label="AST"><data key="type">AST</data></edge><edge id="114" source="81" target="91" label="AST"><data key="type">AST</data></edge><edge id="108" source="81" target="87" label="AST"><data key="type">AST</data></edge><edge id="124" source="81" target="96" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="101" source="82" target="83" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="103" source="83" target="84" label="AST"><data key="type">AST</data></edge><edge id="106" source="83" target="86" label="AST"><data key="type">AST</data></edge><edge id="107" source="83" target="87" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="104" source="84" target="85" label="AST"><data key="type">AST</data></edge><edge id="105" source="84" target="86" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="111" source="87" target="89" label="AST"><data key="type">AST</data></edge><edge id="109" source="87" target="88" label="AST"><data key="type">AST</data></edge><edge id="113" source="87" target="91" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="110" source="88" target="89" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="112" source="89" target="90" label="AST"><data key="type">AST</data></edge><edge id="300" source="190" target="191" label="AST"><data key="type">AST</data></edge><edge id="305" source="190" target="192" label="AST"><data key="type">AST</data></edge><edge id="307" source="190" target="193" label="AST"><data key="type">AST</data></edge><edge id="302" source="191" target="167" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="301" source="191" target="180" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="303" source="191" target="180" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="304" source="191" target="192" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="306" source="192" target="193" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="310" source="193" target="195" label="AST"><data key="type">AST</data></edge><edge id="308" source="193" target="194" label="AST"><data key="type">AST</data></edge><edge id="309" source="194" target="195" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="330" source="197" target="207" label="AST"><data key="type">AST</data></edge><edge id="324" source="197" target="203" label="AST"><data key="type">AST</data></edge><edge id="316" source="197" target="198" label="AST"><data key="type">AST</data></edge><edge id="318" source="197" target="199" label="AST"><data key="type">AST</data></edge><edge id="374" source="197" target="232" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="317" source="198" target="199" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="322" source="199" target="202" label="AST"><data key="type">AST</data></edge><edge id="319" source="199" target="200" label="AST"><data key="type">AST</data></edge><edge id="323" source="199" target="203" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="115" source="91" target="92" label="AST"><data key="type">AST</data></edge><edge id="116" source="92" target="93" label="AST"><data key="type">AST</data></edge><edge id="123" source="92" target="81" label="RETURNS_TO"><data key="type">RETURNS_TO</data></edge><edge id="122" source="93" target="95" label="AST"><data key="type">AST</data></edge><edge id="117" source="93" target="94" label="AST"><data key="type">AST</data></edge><edge id="119" source="94" target="86" label="LAST_WRITE"><data key="type">LAST_WRITE</data></edge><edge id="118" source="94" target="86" label="LAST_LEXICAL_SCOPE_USE"><data key="type">LAST_LEXICAL_SCOPE_USE</data></edge><edge id="120" source="94" target="86" label="LAST_READ"><data key="type">LAST_READ</data></edge><edge id="121" source="94" target="95" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="134" source="96" target="102" label="AST"><data key="type">AST</data></edge><edge id="126" source="96" target="97" label="AST"><data key="type">AST</data></edge><edge id="128" source="96" target="98" label="AST"><data key="type">AST</data></edge><edge id="140" source="96" target="106" label="AST"><data key="type">AST</data></edge><edge id="150" source="96" target="111" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="127" source="97" target="98" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="132" source="98" target="101" label="AST"><data key="type">AST</data></edge><edge id="129" source="98" target="99" label="AST"><data key="type">AST</data></edge><edge id="133" source="98" target="102" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge><edge id="130" source="99" target="100" label="AST"><data key="type">AST</data></edge><edge id="131" source="99" target="101" label="NEXT_TOKEN"><data key="type">NEXT_TOKEN</data></edge></graph></graphml>